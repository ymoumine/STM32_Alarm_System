
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f84  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f30  08007154  08007154  00017154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008084  08008084  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008084  08008084  00018084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800808c  0800808c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800808c  0800808c  0001808c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008090  08008090  00018090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004624  20000074  08008108  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004698  08008108  00024698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018125  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000393e  00000000  00000000  0003820c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a0  00000000  00000000  0003bb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011af  00000000  00000000  0003d1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000258dc  00000000  00000000  0003e39f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c094  00000000  00000000  00063c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de6c9  00000000  00000000  0007fd0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006598  00000000  00000000  0015e3d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00164970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800713c 	.word	0x0800713c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800713c 	.word	0x0800713c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
	int done=1;
 8000512:	2301      	movs	r3, #1
 8000514:	607b      	str	r3, [r7, #4]
	while(done)
 8000516:	e19b      	b.n	8000850 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 8000518:	2201      	movs	r2, #1
 800051a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800051e:	48b3      	ldr	r0, [pc, #716]	; (80007ec <Get_Key+0x2e0>)
 8000520:	f001 fe18 	bl	8002154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000524:	2200      	movs	r2, #0
 8000526:	2110      	movs	r1, #16
 8000528:	48b0      	ldr	r0, [pc, #704]	; (80007ec <Get_Key+0x2e0>)
 800052a:	f001 fe13 	bl	8002154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800052e:	2200      	movs	r2, #0
 8000530:	2120      	movs	r1, #32
 8000532:	48ae      	ldr	r0, [pc, #696]	; (80007ec <Get_Key+0x2e0>)
 8000534:	f001 fe0e 	bl	8002154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8000538:	2200      	movs	r2, #0
 800053a:	2108      	movs	r1, #8
 800053c:	48ab      	ldr	r0, [pc, #684]	; (80007ec <Get_Key+0x2e0>)
 800053e:	f001 fe09 	bl	8002154 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000542:	2140      	movs	r1, #64	; 0x40
 8000544:	48a9      	ldr	r0, [pc, #676]	; (80007ec <Get_Key+0x2e0>)
 8000546:	f001 fded 	bl	8002124 <HAL_GPIO_ReadPin>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d00b      	beq.n	8000568 <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000550:	bf00      	nop
 8000552:	2140      	movs	r1, #64	; 0x40
 8000554:	48a5      	ldr	r0, [pc, #660]	; (80007ec <Get_Key+0x2e0>)
 8000556:	f001 fde5 	bl	8002124 <HAL_GPIO_ReadPin>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d1f8      	bne.n	8000552 <Get_Key+0x46>
		key='1';
 8000560:	4ba3      	ldr	r3, [pc, #652]	; (80007f0 <Get_Key+0x2e4>)
 8000562:	2231      	movs	r2, #49	; 0x31
 8000564:	701a      	strb	r2, [r3, #0]
		break;
 8000566:	e177      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000568:	2180      	movs	r1, #128	; 0x80
 800056a:	48a2      	ldr	r0, [pc, #648]	; (80007f4 <Get_Key+0x2e8>)
 800056c:	f001 fdda 	bl	8002124 <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d00b      	beq.n	800058e <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000576:	bf00      	nop
 8000578:	2180      	movs	r1, #128	; 0x80
 800057a:	489e      	ldr	r0, [pc, #632]	; (80007f4 <Get_Key+0x2e8>)
 800057c:	f001 fdd2 	bl	8002124 <HAL_GPIO_ReadPin>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d1f8      	bne.n	8000578 <Get_Key+0x6c>
		key='4';
 8000586:	4b9a      	ldr	r3, [pc, #616]	; (80007f0 <Get_Key+0x2e4>)
 8000588:	2234      	movs	r2, #52	; 0x34
 800058a:	701a      	strb	r2, [r3, #0]
		break;
 800058c:	e164      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800058e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000592:	4899      	ldr	r0, [pc, #612]	; (80007f8 <Get_Key+0x2ec>)
 8000594:	f001 fdc6 	bl	8002124 <HAL_GPIO_ReadPin>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d00c      	beq.n	80005b8 <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800059e:	bf00      	nop
 80005a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a4:	4894      	ldr	r0, [pc, #592]	; (80007f8 <Get_Key+0x2ec>)
 80005a6:	f001 fdbd 	bl	8002124 <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d1f7      	bne.n	80005a0 <Get_Key+0x94>
		key='7';
 80005b0:	4b8f      	ldr	r3, [pc, #572]	; (80007f0 <Get_Key+0x2e4>)
 80005b2:	2237      	movs	r2, #55	; 0x37
 80005b4:	701a      	strb	r2, [r3, #0]
		break;
 80005b6:	e14f      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80005b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005bc:	488e      	ldr	r0, [pc, #568]	; (80007f8 <Get_Key+0x2ec>)
 80005be:	f001 fdb1 	bl	8002124 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d00c      	beq.n	80005e2 <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80005c8:	bf00      	nop
 80005ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ce:	488a      	ldr	r0, [pc, #552]	; (80007f8 <Get_Key+0x2ec>)
 80005d0:	f001 fda8 	bl	8002124 <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d1f7      	bne.n	80005ca <Get_Key+0xbe>
		key='*';
 80005da:	4b85      	ldr	r3, [pc, #532]	; (80007f0 <Get_Key+0x2e4>)
 80005dc:	222a      	movs	r2, #42	; 0x2a
 80005de:	701a      	strb	r2, [r3, #0]
		break;
 80005e0:	e13a      	b.n	8000858 <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e8:	4880      	ldr	r0, [pc, #512]	; (80007ec <Get_Key+0x2e0>)
 80005ea:	f001 fdb3 	bl	8002154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 80005ee:	2201      	movs	r2, #1
 80005f0:	2110      	movs	r1, #16
 80005f2:	487e      	ldr	r0, [pc, #504]	; (80007ec <Get_Key+0x2e0>)
 80005f4:	f001 fdae 	bl	8002154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80005f8:	2200      	movs	r2, #0
 80005fa:	2120      	movs	r1, #32
 80005fc:	487b      	ldr	r0, [pc, #492]	; (80007ec <Get_Key+0x2e0>)
 80005fe:	f001 fda9 	bl	8002154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8000602:	2200      	movs	r2, #0
 8000604:	2108      	movs	r1, #8
 8000606:	4879      	ldr	r0, [pc, #484]	; (80007ec <Get_Key+0x2e0>)
 8000608:	f001 fda4 	bl	8002154 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 800060c:	2140      	movs	r1, #64	; 0x40
 800060e:	4877      	ldr	r0, [pc, #476]	; (80007ec <Get_Key+0x2e0>)
 8000610:	f001 fd88 	bl	8002124 <HAL_GPIO_ReadPin>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d00b      	beq.n	8000632 <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 800061a:	bf00      	nop
 800061c:	2140      	movs	r1, #64	; 0x40
 800061e:	4873      	ldr	r0, [pc, #460]	; (80007ec <Get_Key+0x2e0>)
 8000620:	f001 fd80 	bl	8002124 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d1f8      	bne.n	800061c <Get_Key+0x110>
		key='2';
 800062a:	4b71      	ldr	r3, [pc, #452]	; (80007f0 <Get_Key+0x2e4>)
 800062c:	2232      	movs	r2, #50	; 0x32
 800062e:	701a      	strb	r2, [r3, #0]
		break;
 8000630:	e112      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000632:	2180      	movs	r1, #128	; 0x80
 8000634:	486f      	ldr	r0, [pc, #444]	; (80007f4 <Get_Key+0x2e8>)
 8000636:	f001 fd75 	bl	8002124 <HAL_GPIO_ReadPin>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d00b      	beq.n	8000658 <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000640:	bf00      	nop
 8000642:	2180      	movs	r1, #128	; 0x80
 8000644:	486b      	ldr	r0, [pc, #428]	; (80007f4 <Get_Key+0x2e8>)
 8000646:	f001 fd6d 	bl	8002124 <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1f8      	bne.n	8000642 <Get_Key+0x136>
		key='5';
 8000650:	4b67      	ldr	r3, [pc, #412]	; (80007f0 <Get_Key+0x2e4>)
 8000652:	2235      	movs	r2, #53	; 0x35
 8000654:	701a      	strb	r2, [r3, #0]
		break;
 8000656:	e0ff      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000658:	f44f 7100 	mov.w	r1, #512	; 0x200
 800065c:	4866      	ldr	r0, [pc, #408]	; (80007f8 <Get_Key+0x2ec>)
 800065e:	f001 fd61 	bl	8002124 <HAL_GPIO_ReadPin>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d00c      	beq.n	8000682 <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000668:	bf00      	nop
 800066a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800066e:	4862      	ldr	r0, [pc, #392]	; (80007f8 <Get_Key+0x2ec>)
 8000670:	f001 fd58 	bl	8002124 <HAL_GPIO_ReadPin>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d1f7      	bne.n	800066a <Get_Key+0x15e>
		key='8';
 800067a:	4b5d      	ldr	r3, [pc, #372]	; (80007f0 <Get_Key+0x2e4>)
 800067c:	2238      	movs	r2, #56	; 0x38
 800067e:	701a      	strb	r2, [r3, #0]
		break;
 8000680:	e0ea      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000686:	485c      	ldr	r0, [pc, #368]	; (80007f8 <Get_Key+0x2ec>)
 8000688:	f001 fd4c 	bl	8002124 <HAL_GPIO_ReadPin>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d00c      	beq.n	80006ac <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000692:	bf00      	nop
 8000694:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000698:	4857      	ldr	r0, [pc, #348]	; (80007f8 <Get_Key+0x2ec>)
 800069a:	f001 fd43 	bl	8002124 <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1f7      	bne.n	8000694 <Get_Key+0x188>
		key='0';
 80006a4:	4b52      	ldr	r3, [pc, #328]	; (80007f0 <Get_Key+0x2e4>)
 80006a6:	2230      	movs	r2, #48	; 0x30
 80006a8:	701a      	strb	r2, [r3, #0]
		break;
 80006aa:	e0d5      	b.n	8000858 <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b2:	484e      	ldr	r0, [pc, #312]	; (80007ec <Get_Key+0x2e0>)
 80006b4:	f001 fd4e 	bl	8002154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 80006b8:	2200      	movs	r2, #0
 80006ba:	2110      	movs	r1, #16
 80006bc:	484b      	ldr	r0, [pc, #300]	; (80007ec <Get_Key+0x2e0>)
 80006be:	f001 fd49 	bl	8002154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 80006c2:	2201      	movs	r2, #1
 80006c4:	2120      	movs	r1, #32
 80006c6:	4849      	ldr	r0, [pc, #292]	; (80007ec <Get_Key+0x2e0>)
 80006c8:	f001 fd44 	bl	8002154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 80006cc:	2200      	movs	r2, #0
 80006ce:	2108      	movs	r1, #8
 80006d0:	4846      	ldr	r0, [pc, #280]	; (80007ec <Get_Key+0x2e0>)
 80006d2:	f001 fd3f 	bl	8002154 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006d6:	2140      	movs	r1, #64	; 0x40
 80006d8:	4844      	ldr	r0, [pc, #272]	; (80007ec <Get_Key+0x2e0>)
 80006da:	f001 fd23 	bl	8002124 <HAL_GPIO_ReadPin>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d00b      	beq.n	80006fc <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006e4:	bf00      	nop
 80006e6:	2140      	movs	r1, #64	; 0x40
 80006e8:	4840      	ldr	r0, [pc, #256]	; (80007ec <Get_Key+0x2e0>)
 80006ea:	f001 fd1b 	bl	8002124 <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1f8      	bne.n	80006e6 <Get_Key+0x1da>
		key='3';
 80006f4:	4b3e      	ldr	r3, [pc, #248]	; (80007f0 <Get_Key+0x2e4>)
 80006f6:	2233      	movs	r2, #51	; 0x33
 80006f8:	701a      	strb	r2, [r3, #0]
		break;
 80006fa:	e0ad      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	483d      	ldr	r0, [pc, #244]	; (80007f4 <Get_Key+0x2e8>)
 8000700:	f001 fd10 	bl	8002124 <HAL_GPIO_ReadPin>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d00b      	beq.n	8000722 <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800070a:	bf00      	nop
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	4839      	ldr	r0, [pc, #228]	; (80007f4 <Get_Key+0x2e8>)
 8000710:	f001 fd08 	bl	8002124 <HAL_GPIO_ReadPin>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d1f8      	bne.n	800070c <Get_Key+0x200>
		key='6';
 800071a:	4b35      	ldr	r3, [pc, #212]	; (80007f0 <Get_Key+0x2e4>)
 800071c:	2236      	movs	r2, #54	; 0x36
 800071e:	701a      	strb	r2, [r3, #0]
		break;
 8000720:	e09a      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000722:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000726:	4834      	ldr	r0, [pc, #208]	; (80007f8 <Get_Key+0x2ec>)
 8000728:	f001 fcfc 	bl	8002124 <HAL_GPIO_ReadPin>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d00c      	beq.n	800074c <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000732:	bf00      	nop
 8000734:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000738:	482f      	ldr	r0, [pc, #188]	; (80007f8 <Get_Key+0x2ec>)
 800073a:	f001 fcf3 	bl	8002124 <HAL_GPIO_ReadPin>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1f7      	bne.n	8000734 <Get_Key+0x228>
		key='9';
 8000744:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <Get_Key+0x2e4>)
 8000746:	2239      	movs	r2, #57	; 0x39
 8000748:	701a      	strb	r2, [r3, #0]
		break;
 800074a:	e085      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800074c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000750:	4829      	ldr	r0, [pc, #164]	; (80007f8 <Get_Key+0x2ec>)
 8000752:	f001 fce7 	bl	8002124 <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d00c      	beq.n	8000776 <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800075c:	bf00      	nop
 800075e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000762:	4825      	ldr	r0, [pc, #148]	; (80007f8 <Get_Key+0x2ec>)
 8000764:	f001 fcde 	bl	8002124 <HAL_GPIO_ReadPin>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1f7      	bne.n	800075e <Get_Key+0x252>
		key='#';
 800076e:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <Get_Key+0x2e4>)
 8000770:	2223      	movs	r2, #35	; 0x23
 8000772:	701a      	strb	r2, [r3, #0]
		break;
 8000774:	e070      	b.n	8000858 <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800077c:	481b      	ldr	r0, [pc, #108]	; (80007ec <Get_Key+0x2e0>)
 800077e:	f001 fce9 	bl	8002154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000782:	2200      	movs	r2, #0
 8000784:	2110      	movs	r1, #16
 8000786:	4819      	ldr	r0, [pc, #100]	; (80007ec <Get_Key+0x2e0>)
 8000788:	f001 fce4 	bl	8002154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800078c:	2200      	movs	r2, #0
 800078e:	2120      	movs	r1, #32
 8000790:	4816      	ldr	r0, [pc, #88]	; (80007ec <Get_Key+0x2e0>)
 8000792:	f001 fcdf 	bl	8002154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 8000796:	2201      	movs	r2, #1
 8000798:	2108      	movs	r1, #8
 800079a:	4814      	ldr	r0, [pc, #80]	; (80007ec <Get_Key+0x2e0>)
 800079c:	f001 fcda 	bl	8002154 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80007a0:	2140      	movs	r1, #64	; 0x40
 80007a2:	4812      	ldr	r0, [pc, #72]	; (80007ec <Get_Key+0x2e0>)
 80007a4:	f001 fcbe 	bl	8002124 <HAL_GPIO_ReadPin>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d00b      	beq.n	80007c6 <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80007ae:	bf00      	nop
 80007b0:	2140      	movs	r1, #64	; 0x40
 80007b2:	480e      	ldr	r0, [pc, #56]	; (80007ec <Get_Key+0x2e0>)
 80007b4:	f001 fcb6 	bl	8002124 <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d1f8      	bne.n	80007b0 <Get_Key+0x2a4>
		key='A';
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <Get_Key+0x2e4>)
 80007c0:	2241      	movs	r2, #65	; 0x41
 80007c2:	701a      	strb	r2, [r3, #0]
		break;
 80007c4:	e048      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007c6:	2180      	movs	r1, #128	; 0x80
 80007c8:	480a      	ldr	r0, [pc, #40]	; (80007f4 <Get_Key+0x2e8>)
 80007ca:	f001 fcab 	bl	8002124 <HAL_GPIO_ReadPin>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d013      	beq.n	80007fc <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007d4:	bf00      	nop
 80007d6:	2180      	movs	r1, #128	; 0x80
 80007d8:	4806      	ldr	r0, [pc, #24]	; (80007f4 <Get_Key+0x2e8>)
 80007da:	f001 fca3 	bl	8002124 <HAL_GPIO_ReadPin>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d1f8      	bne.n	80007d6 <Get_Key+0x2ca>
		key='B';
 80007e4:	4b02      	ldr	r3, [pc, #8]	; (80007f0 <Get_Key+0x2e4>)
 80007e6:	2242      	movs	r2, #66	; 0x42
 80007e8:	701a      	strb	r2, [r3, #0]
		break;
 80007ea:	e035      	b.n	8000858 <Get_Key+0x34c>
 80007ec:	40020400 	.word	0x40020400
 80007f0:	20000090 	.word	0x20000090
 80007f4:	40020800 	.word	0x40020800
 80007f8:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80007fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000800:	481a      	ldr	r0, [pc, #104]	; (800086c <Get_Key+0x360>)
 8000802:	f001 fc8f 	bl	8002124 <HAL_GPIO_ReadPin>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00c      	beq.n	8000826 <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800080c:	bf00      	nop
 800080e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000812:	4816      	ldr	r0, [pc, #88]	; (800086c <Get_Key+0x360>)
 8000814:	f001 fc86 	bl	8002124 <HAL_GPIO_ReadPin>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1f7      	bne.n	800080e <Get_Key+0x302>
		key='C';
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <Get_Key+0x364>)
 8000820:	2243      	movs	r2, #67	; 0x43
 8000822:	701a      	strb	r2, [r3, #0]
		break;
 8000824:	e018      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800082a:	4810      	ldr	r0, [pc, #64]	; (800086c <Get_Key+0x360>)
 800082c:	f001 fc7a 	bl	8002124 <HAL_GPIO_ReadPin>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d00c      	beq.n	8000850 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000836:	bf00      	nop
 8000838:	f44f 7180 	mov.w	r1, #256	; 0x100
 800083c:	480b      	ldr	r0, [pc, #44]	; (800086c <Get_Key+0x360>)
 800083e:	f001 fc71 	bl	8002124 <HAL_GPIO_ReadPin>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1f7      	bne.n	8000838 <Get_Key+0x32c>
		key='D';
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <Get_Key+0x364>)
 800084a:	2244      	movs	r2, #68	; 0x44
 800084c:	701a      	strb	r2, [r3, #0]
		break;
 800084e:	e003      	b.n	8000858 <Get_Key+0x34c>
	while(done)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2b00      	cmp	r3, #0
 8000854:	f47f ae60 	bne.w	8000518 <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000858:	2120      	movs	r1, #32
 800085a:	4804      	ldr	r0, [pc, #16]	; (800086c <Get_Key+0x360>)
 800085c:	f001 fc93 	bl	8002186 <HAL_GPIO_TogglePin>
	return(key);
 8000860:	4b03      	ldr	r3, [pc, #12]	; (8000870 <Get_Key+0x364>)
 8000862:	781b      	ldrb	r3, [r3, #0]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40020000 	.word	0x40020000
 8000870:	20000090 	.word	0x20000090

08000874 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000884:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <vApplicationGetIdleTaskMemory+0x30>)
 800088a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000892:	bf00      	nop
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	20000094 	.word	0x20000094
 80008a4:	200000e8 	.word	0x200000e8

080008a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80008a8:	b5b0      	push	{r4, r5, r7, lr}
 80008aa:	b0a0      	sub	sp, #128	; 0x80
 80008ac:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008ae:	f001 f95d 	bl	8001b6c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008b2:	f000 f8a3 	bl	80009fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008b6:	f000 f967 	bl	8000b88 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80008ba:	f000 f93b 	bl	8000b34 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80008be:	f000 f90b 	bl	8000ad8 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	/* USER CODE BEGIN 2 */
	SSD1306_Init();
 80008c2:	f000 fc53 	bl	800116c <SSD1306_Init>
	SSD1306_GotoXY(0, 0);
 80008c6:	2100      	movs	r1, #0
 80008c8:	2000      	movs	r0, #0
 80008ca:	f000 fdb9 	bl	8001440 <SSD1306_GotoXY>
	//SSD1306_Puts ("Voltage:", &Font_11x18, 1);
	SSD1306_Puts("Set Code!", &Font_11x18, 1);
 80008ce:	2201      	movs	r2, #1
 80008d0:	493b      	ldr	r1, [pc, #236]	; (80009c0 <main+0x118>)
 80008d2:	483c      	ldr	r0, [pc, #240]	; (80009c4 <main+0x11c>)
 80008d4:	f000 fe4a 	bl	800156c <SSD1306_Puts>
	HAL_UART_Transmit(&huart2, (uint8_t *)"Set Code!\r\n", 11, 100);
 80008d8:	2364      	movs	r3, #100	; 0x64
 80008da:	220b      	movs	r2, #11
 80008dc:	493a      	ldr	r1, [pc, #232]	; (80009c8 <main+0x120>)
 80008de:	483b      	ldr	r0, [pc, #236]	; (80009cc <main+0x124>)
 80008e0:	f003 fb44 	bl	8003f6c <HAL_UART_Transmit>
	SSD1306_GotoXY(0, 30);
 80008e4:	211e      	movs	r1, #30
 80008e6:	2000      	movs	r0, #0
 80008e8:	f000 fdaa 	bl	8001440 <SSD1306_GotoXY>
	HAL_UART_Transmit(&huart2, (uint8_t *)"Code:", 5, 100);
 80008ec:	2364      	movs	r3, #100	; 0x64
 80008ee:	2205      	movs	r2, #5
 80008f0:	4937      	ldr	r1, [pc, #220]	; (80009d0 <main+0x128>)
 80008f2:	4836      	ldr	r0, [pc, #216]	; (80009cc <main+0x124>)
 80008f4:	f003 fb3a 	bl	8003f6c <HAL_UART_Transmit>
	SSD1306_Puts("Code:", &Font_11x18, 1);
 80008f8:	2201      	movs	r2, #1
 80008fa:	4931      	ldr	r1, [pc, #196]	; (80009c0 <main+0x118>)
 80008fc:	4834      	ldr	r0, [pc, #208]	; (80009d0 <main+0x128>)
 80008fe:	f000 fe35 	bl	800156c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000902:	f000 fcf7 	bl	80012f4 <SSD1306_UpdateScreen>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of myQueue01 */
	osMessageQDef(myQueue01, 16, char);
 8000906:	4b33      	ldr	r3, [pc, #204]	; (80009d4 <main+0x12c>)
 8000908:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800090c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800090e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000912:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f003 ff62 	bl	80047e2 <osMessageCreate>
 800091e:	4603      	mov	r3, r0
 8000920:	4a2d      	ldr	r2, [pc, #180]	; (80009d8 <main+0x130>)
 8000922:	6013      	str	r3, [r2, #0]
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */

	osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 128);
 8000924:	4b2d      	ldr	r3, [pc, #180]	; (80009dc <main+0x134>)
 8000926:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800092a:	461d      	mov	r5, r3
 800092c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800092e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000930:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000934:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myDefaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000938:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f003 feef 	bl	8004722 <osThreadCreate>
 8000944:	4603      	mov	r3, r0
 8000946:	4a26      	ldr	r2, [pc, #152]	; (80009e0 <main+0x138>)
 8000948:	6013      	str	r3, [r2, #0]

	/* definition and creation of myTask02 */
	osThreadDef(myTask02, StartTask02, osPriorityAboveNormal, 0, 128);
 800094a:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <main+0x13c>)
 800094c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000950:	461d      	mov	r5, r3
 8000952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000956:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800095a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800095e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f003 fedc 	bl	8004722 <osThreadCreate>
 800096a:	4603      	mov	r3, r0
 800096c:	4a1e      	ldr	r2, [pc, #120]	; (80009e8 <main+0x140>)
 800096e:	6013      	str	r3, [r2, #0]

	/* definition and creation of myTask03 */
	osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <main+0x144>)
 8000972:	f107 041c 	add.w	r4, r7, #28
 8000976:	461d      	mov	r5, r3
 8000978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000980:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f003 fec9 	bl	8004722 <osThreadCreate>
 8000990:	4603      	mov	r3, r0
 8000992:	4a17      	ldr	r2, [pc, #92]	; (80009f0 <main+0x148>)
 8000994:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	osThreadDef(myTask04, StartTask04, osPriorityAboveNormal, 0, 128);
 8000996:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <main+0x14c>)
 8000998:	463c      	mov	r4, r7
 800099a:	461d      	mov	r5, r3
 800099c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800099e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 80009a8:	463b      	mov	r3, r7
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f003 feb8 	bl	8004722 <osThreadCreate>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4a10      	ldr	r2, [pc, #64]	; (80009f8 <main+0x150>)
 80009b6:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80009b8:	f003 feac 	bl	8004714 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80009bc:	e7fe      	b.n	80009bc <main+0x114>
 80009be:	bf00      	nop
 80009c0:	20000000 	.word	0x20000000
 80009c4:	08007154 	.word	0x08007154
 80009c8:	08007160 	.word	0x08007160
 80009cc:	2000033c 	.word	0x2000033c
 80009d0:	0800716c 	.word	0x0800716c
 80009d4:	08007174 	.word	0x08007174
 80009d8:	20000394 	.word	0x20000394
 80009dc:	08007190 	.word	0x08007190
 80009e0:	20000384 	.word	0x20000384
 80009e4:	080071b8 	.word	0x080071b8
 80009e8:	20000388 	.word	0x20000388
 80009ec:	080071e0 	.word	0x080071e0
 80009f0:	2000038c 	.word	0x2000038c
 80009f4:	08007208 	.word	0x08007208
 80009f8:	20000390 	.word	0x20000390

080009fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b094      	sub	sp, #80	; 0x50
 8000a00:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	2234      	movs	r2, #52	; 0x34
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f006 f8ac 	bl	8006b68 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a10:	f107 0308 	add.w	r3, r7, #8
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <SystemClock_Config+0xd4>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	4a29      	ldr	r2, [pc, #164]	; (8000ad0 <SystemClock_Config+0xd4>)
 8000a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a30:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <SystemClock_Config+0xd4>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <SystemClock_Config+0xd8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a48:	4a22      	ldr	r2, [pc, #136]	; (8000ad4 <SystemClock_Config+0xd8>)
 8000a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <SystemClock_Config+0xd8>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a60:	2301      	movs	r3, #1
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a64:	2310      	movs	r3, #16
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000a70:	2310      	movs	r3, #16
 8000a72:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000a74:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a78:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f002 fcde 	bl	800344c <HAL_RCC_OscConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0x9e>
		Error_Handler();
 8000a96:	f000 fb63 	bl	8001160 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aaa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f002 f94c 	bl	8002d54 <HAL_RCC_ClockConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0xca>
		Error_Handler();
 8000ac2:	f000 fb4d 	bl	8001160 <Error_Handler>
	}
}
 8000ac6:	bf00      	nop
 8000ac8:	3750      	adds	r7, #80	; 0x50
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40007000 	.word	0x40007000

08000ad8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000ade:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <MX_I2C1_Init+0x54>)
 8000ae0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000ae4:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <MX_I2C1_Init+0x58>)
 8000ae6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000af6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000afa:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000afc:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b08:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000b14:	4804      	ldr	r0, [pc, #16]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000b16:	f001 fb51 	bl	80021bc <HAL_I2C_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000b20:	f000 fb1e 	bl	8001160 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200002e8 	.word	0x200002e8
 8000b2c:	40005400 	.word	0x40005400
 8000b30:	00061a80 	.word	0x00061a80

08000b34 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <MX_USART2_UART_Init+0x50>)
 8000b3c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b44:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b6c:	f003 f9ae 	bl	8003ecc <HAL_UART_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000b76:	f000 faf3 	bl	8001160 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000033c 	.word	0x2000033c
 8000b84:	40004400 	.word	0x40004400

08000b88 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
 8000b9c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b58      	ldr	r3, [pc, #352]	; (8000d04 <MX_GPIO_Init+0x17c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a57      	ldr	r2, [pc, #348]	; (8000d04 <MX_GPIO_Init+0x17c>)
 8000ba8:	f043 0304 	orr.w	r3, r3, #4
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b55      	ldr	r3, [pc, #340]	; (8000d04 <MX_GPIO_Init+0x17c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0304 	and.w	r3, r3, #4
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b51      	ldr	r3, [pc, #324]	; (8000d04 <MX_GPIO_Init+0x17c>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a50      	ldr	r2, [pc, #320]	; (8000d04 <MX_GPIO_Init+0x17c>)
 8000bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b4e      	ldr	r3, [pc, #312]	; (8000d04 <MX_GPIO_Init+0x17c>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	4b4a      	ldr	r3, [pc, #296]	; (8000d04 <MX_GPIO_Init+0x17c>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a49      	ldr	r2, [pc, #292]	; (8000d04 <MX_GPIO_Init+0x17c>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b47      	ldr	r3, [pc, #284]	; (8000d04 <MX_GPIO_Init+0x17c>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b43      	ldr	r3, [pc, #268]	; (8000d04 <MX_GPIO_Init+0x17c>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a42      	ldr	r2, [pc, #264]	; (8000d04 <MX_GPIO_Init+0x17c>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b40      	ldr	r3, [pc, #256]	; (8000d04 <MX_GPIO_Init+0x17c>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_15, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f248 01e0 	movw	r1, #32992	; 0x80e0
 8000c14:	483c      	ldr	r0, [pc, #240]	; (8000d08 <MX_GPIO_Init+0x180>)
 8000c16:	f001 fa9d 	bl	8002154 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, KC0_Pin | KC3_Pin | KC1_Pin | KC2_Pin,
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000c20:	483a      	ldr	r0, [pc, #232]	; (8000d0c <MX_GPIO_Init+0x184>)
 8000c22:	f001 fa97 	bl	8002154 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c2a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4833      	ldr	r0, [pc, #204]	; (8000d08 <MX_GPIO_Init+0x180>)
 8000c3c:	f001 f8de 	bl	8001dfc <HAL_GPIO_Init>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c40:	2320      	movs	r3, #32
 8000c42:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	482c      	ldr	r0, [pc, #176]	; (8000d08 <MX_GPIO_Init+0x180>)
 8000c58:	f001 f8d0 	bl	8001dfc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c5c:	2340      	movs	r3, #64	; 0x40
 8000c5e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	4825      	ldr	r0, [pc, #148]	; (8000d08 <MX_GPIO_Init+0x180>)
 8000c74:	f001 f8c2 	bl	8001dfc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c78:	2380      	movs	r3, #128	; 0x80
 8000c7a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	481e      	ldr	r0, [pc, #120]	; (8000d08 <MX_GPIO_Init+0x180>)
 8000c90:	f001 f8b4 	bl	8001dfc <HAL_GPIO_Init>

	/*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
	GPIO_InitStruct.Pin = KC0_Pin | KC3_Pin | KC1_Pin | KC2_Pin;
 8000c94:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000c98:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4619      	mov	r1, r3
 8000cac:	4817      	ldr	r0, [pc, #92]	; (8000d0c <MX_GPIO_Init+0x184>)
 8000cae:	f001 f8a5 	bl	8001dfc <HAL_GPIO_Init>

	/*Configure GPIO pin : KR1_Pin */
	GPIO_InitStruct.Pin = KR1_Pin;
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4812      	ldr	r0, [pc, #72]	; (8000d10 <MX_GPIO_Init+0x188>)
 8000cc6:	f001 f899 	bl	8001dfc <HAL_GPIO_Init>

	/*Configure GPIO pins : KR3_Pin KR2_Pin */
	GPIO_InitStruct.Pin = KR3_Pin | KR2_Pin;
 8000cca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480a      	ldr	r0, [pc, #40]	; (8000d08 <MX_GPIO_Init+0x180>)
 8000ce0:	f001 f88c 	bl	8001dfc <HAL_GPIO_Init>

	/*Configure GPIO pin : KR0_Pin */
	GPIO_InitStruct.Pin = KR0_Pin;
 8000ce4:	2340      	movs	r3, #64	; 0x40
 8000ce6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cec:	2302      	movs	r3, #2
 8000cee:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_GPIO_Init+0x184>)
 8000cf8:	f001 f880 	bl	8001dfc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000cfc:	bf00      	nop
 8000cfe:	3728      	adds	r7, #40	; 0x28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020000 	.word	0x40020000
 8000d0c:	40020400 	.word	0x40020400
 8000d10:	40020800 	.word	0x40020800

08000d14 <StartDefaultTask>:

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */
void StartDefaultTask(void const *argument) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		if (armed && buzzer) {
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <StartDefaultTask+0x54>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d014      	beq.n	8000d4e <StartDefaultTask+0x3a>
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <StartDefaultTask+0x58>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d010      	beq.n	8000d4e <StartDefaultTask+0x3a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET); // activate the buzzer
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2140      	movs	r1, #64	; 0x40
 8000d30:	480f      	ldr	r0, [pc, #60]	; (8000d70 <StartDefaultTask+0x5c>)
 8000d32:	f001 fa0f 	bl	8002154 <HAL_GPIO_WritePin>
			osDelay(100);
 8000d36:	2064      	movs	r0, #100	; 0x64
 8000d38:	f003 fd3f 	bl	80047ba <osDelay>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET); // Stop the buzzer
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2140      	movs	r1, #64	; 0x40
 8000d40:	480b      	ldr	r0, [pc, #44]	; (8000d70 <StartDefaultTask+0x5c>)
 8000d42:	f001 fa07 	bl	8002154 <HAL_GPIO_WritePin>
			osDelay(100);
 8000d46:	2064      	movs	r0, #100	; 0x64
 8000d48:	f003 fd37 	bl	80047ba <osDelay>
 8000d4c:	e007      	b.n	8000d5e <StartDefaultTask+0x4a>
		} else {
			// Ensure buzzer is off when system is not armed or no buzzer
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2140      	movs	r1, #64	; 0x40
 8000d52:	4807      	ldr	r0, [pc, #28]	; (8000d70 <StartDefaultTask+0x5c>)
 8000d54:	f001 f9fe 	bl	8002154 <HAL_GPIO_WritePin>
			osDelay(100);
 8000d58:	2064      	movs	r0, #100	; 0x64
 8000d5a:	f003 fd2e 	bl	80047ba <osDelay>
		}

		osDelay(100);
 8000d5e:	2064      	movs	r0, #100	; 0x64
 8000d60:	f003 fd2b 	bl	80047ba <osDelay>
		if (armed && buzzer) {
 8000d64:	e7da      	b.n	8000d1c <StartDefaultTask+0x8>
 8000d66:	bf00      	nop
 8000d68:	2000039c 	.word	0x2000039c
 8000d6c:	20000398 	.word	0x20000398
 8000d70:	40020000 	.word	0x40020000

08000d74 <StartTask02>:
 * @brief Function implementing the myTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const *argument) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	char receivedKey;
	char enteredCode[7] = { 0 }; // Array to store the entered code, assuming max length + 1 for null terminator
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	f107 0318 	add.w	r3, r7, #24
 8000d84:	2100      	movs	r1, #0
 8000d86:	460a      	mov	r2, r1
 8000d88:	801a      	strh	r2, [r3, #0]
 8000d8a:	460a      	mov	r2, r1
 8000d8c:	709a      	strb	r2, [r3, #2]
	uint8_t codeLength = 0; // To track the number of entered characters
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	 uint8_t maxCodeLength = 6; // Adjust based on your requirements
 8000d94:	2306      	movs	r3, #6
 8000d96:	77fb      	strb	r3, [r7, #31]
	 uint8_t minCodeLength = 4;
 8000d98:	2304      	movs	r3, #4
 8000d9a:	77bb      	strb	r3, [r7, #30]
	 char correctCode[7] = { 0 }; // Example of a correct code for comparison
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	2100      	movs	r1, #0
 8000da6:	460a      	mov	r2, r1
 8000da8:	801a      	strh	r2, [r3, #0]
 8000daa:	460a      	mov	r2, r1
 8000dac:	709a      	strb	r2, [r3, #2]
int initial = 1;
 8000dae:	2301      	movs	r3, #1
 8000db0:	623b      	str	r3, [r7, #32]

	for (;;) {

		if (armed) {
 8000db2:	4ba0      	ldr	r3, [pc, #640]	; (8001034 <StartTask02+0x2c0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00a      	beq.n	8000dd0 <StartTask02+0x5c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	2140      	movs	r1, #64	; 0x40
 8000dbe:	489e      	ldr	r0, [pc, #632]	; (8001038 <StartTask02+0x2c4>)
 8000dc0:	f001 f9c8 	bl	8002154 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2180      	movs	r1, #128	; 0x80
 8000dc8:	489b      	ldr	r0, [pc, #620]	; (8001038 <StartTask02+0x2c4>)
 8000dca:	f001 f9c3 	bl	8002154 <HAL_GPIO_WritePin>
 8000dce:	e009      	b.n	8000de4 <StartTask02+0x70>
			//osDelay(2000);
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2180      	movs	r1, #128	; 0x80
 8000dd4:	4898      	ldr	r0, [pc, #608]	; (8001038 <StartTask02+0x2c4>)
 8000dd6:	f001 f9bd 	bl	8002154 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2140      	movs	r1, #64	; 0x40
 8000dde:	4896      	ldr	r0, [pc, #600]	; (8001038 <StartTask02+0x2c4>)
 8000de0:	f001 f9b8 	bl	8002154 <HAL_GPIO_WritePin>
		}

		if(initial){
 8000de4:	6a3b      	ldr	r3, [r7, #32]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d00f      	beq.n	8000e0a <StartTask02+0x96>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df0:	4891      	ldr	r0, [pc, #580]	; (8001038 <StartTask02+0x2c4>)
 8000df2:	f001 f9af 	bl	8002154 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	2140      	movs	r1, #64	; 0x40
 8000dfa:	488f      	ldr	r0, [pc, #572]	; (8001038 <StartTask02+0x2c4>)
 8000dfc:	f001 f9aa 	bl	8002154 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	2180      	movs	r1, #128	; 0x80
 8000e04:	488c      	ldr	r0, [pc, #560]	; (8001038 <StartTask02+0x2c4>)
 8000e06:	f001 f9a5 	bl	8002154 <HAL_GPIO_WritePin>
		}

		if (xQueueReceive(myQueue01Handle, &receivedKey,
 8000e0a:	4b8c      	ldr	r3, [pc, #560]	; (800103c <StartTask02+0x2c8>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f107 011d 	add.w	r1, r7, #29
 8000e12:	f04f 32ff 	mov.w	r2, #4294967295
 8000e16:	4618      	mov	r0, r3
 8000e18:	f003 fff8 	bl	8004e0c <xQueueReceive>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d1c7      	bne.n	8000db2 <StartTask02+0x3e>
				portMAX_DELAY) == pdPASS) {
			if (receivedKey == '#' && codeLength >= minCodeLength && initial) { // Enter/confirm key or max length reached
 8000e22:	7f7b      	ldrb	r3, [r7, #29]
 8000e24:	2b23      	cmp	r3, #35	; 0x23
 8000e26:	d156      	bne.n	8000ed6 <StartTask02+0x162>
 8000e28:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000e2c:	7fbb      	ldrb	r3, [r7, #30]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d351      	bcc.n	8000ed6 <StartTask02+0x162>
 8000e32:	6a3b      	ldr	r3, [r7, #32]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d04e      	beq.n	8000ed6 <StartTask02+0x162>
				// Check if the entered code is correct
				strncpy(correctCode, enteredCode, sizeof(correctCode));
 8000e38:	f107 0114 	add.w	r1, r7, #20
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	2207      	movs	r2, #7
 8000e42:	4618      	mov	r0, r3
 8000e44:	f005 feaa 	bl	8006b9c <strncpy>

				SSD1306_Clear();
 8000e48:	f000 fbb5 	bl	80015b6 <SSD1306_Clear>
				SSD1306_GotoXY(0, 0);
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f000 faf6 	bl	8001440 <SSD1306_GotoXY>
				HAL_UART_Transmit(&huart2, (uint8_t *)"Code Set\r\n", 10, 100);
 8000e54:	2364      	movs	r3, #100	; 0x64
 8000e56:	220a      	movs	r2, #10
 8000e58:	4979      	ldr	r1, [pc, #484]	; (8001040 <StartTask02+0x2cc>)
 8000e5a:	487a      	ldr	r0, [pc, #488]	; (8001044 <StartTask02+0x2d0>)
 8000e5c:	f003 f886 	bl	8003f6c <HAL_UART_Transmit>
				SSD1306_Puts("Code Set", &Font_11x18, 1);
 8000e60:	2201      	movs	r2, #1
 8000e62:	4979      	ldr	r1, [pc, #484]	; (8001048 <StartTask02+0x2d4>)
 8000e64:	4879      	ldr	r0, [pc, #484]	; (800104c <StartTask02+0x2d8>)
 8000e66:	f000 fb81 	bl	800156c <SSD1306_Puts>
				SSD1306_UpdateScreen();
 8000e6a:	f000 fa43 	bl	80012f4 <SSD1306_UpdateScreen>

				HAL_Delay(2000);
 8000e6e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e72:	f000 febd 	bl	8001bf0 <HAL_Delay>

				// MIGHT NEED TO REMOVE THIS
				armed = 1;
 8000e76:	4b6f      	ldr	r3, [pc, #444]	; (8001034 <StartTask02+0x2c0>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]

				SSD1306_Clear();
 8000e7c:	f000 fb9b 	bl	80015b6 <SSD1306_Clear>
								SSD1306_GotoXY(0, 0);
 8000e80:	2100      	movs	r1, #0
 8000e82:	2000      	movs	r0, #0
 8000e84:	f000 fadc 	bl	8001440 <SSD1306_GotoXY>
									SSD1306_Puts("Armed!", &Font_11x18, 1);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	496f      	ldr	r1, [pc, #444]	; (8001048 <StartTask02+0x2d4>)
 8000e8c:	4870      	ldr	r0, [pc, #448]	; (8001050 <StartTask02+0x2dc>)
 8000e8e:	f000 fb6d 	bl	800156c <SSD1306_Puts>
									HAL_UART_Transmit(&huart2, (uint8_t *)"Armed!\r\n", 8, 100);
 8000e92:	2364      	movs	r3, #100	; 0x64
 8000e94:	2208      	movs	r2, #8
 8000e96:	496f      	ldr	r1, [pc, #444]	; (8001054 <StartTask02+0x2e0>)
 8000e98:	486a      	ldr	r0, [pc, #424]	; (8001044 <StartTask02+0x2d0>)
 8000e9a:	f003 f867 	bl	8003f6c <HAL_UART_Transmit>
								SSD1306_GotoXY(0, 30); // Adjust Y position based on your font size
 8000e9e:	211e      	movs	r1, #30
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f000 facd 	bl	8001440 <SSD1306_GotoXY>
								HAL_UART_Transmit(&huart2, (uint8_t *)"Code:", 5, 100);
 8000ea6:	2364      	movs	r3, #100	; 0x64
 8000ea8:	2205      	movs	r2, #5
 8000eaa:	496b      	ldr	r1, [pc, #428]	; (8001058 <StartTask02+0x2e4>)
 8000eac:	4865      	ldr	r0, [pc, #404]	; (8001044 <StartTask02+0x2d0>)
 8000eae:	f003 f85d 	bl	8003f6c <HAL_UART_Transmit>
								SSD1306_Puts("Code:", &Font_11x18, 1);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4964      	ldr	r1, [pc, #400]	; (8001048 <StartTask02+0x2d4>)
 8000eb6:	4868      	ldr	r0, [pc, #416]	; (8001058 <StartTask02+0x2e4>)
 8000eb8:	f000 fb58 	bl	800156c <SSD1306_Puts>

								// REMOVE END HERE

				memset(enteredCode, 0, sizeof(enteredCode));
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2207      	movs	r2, #7
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f005 fe4f 	bl	8006b68 <memset>
				codeLength = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


				initial = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	623b      	str	r3, [r7, #32]
 8000ed4:	e0ad      	b.n	8001032 <StartTask02+0x2be>
			}

				else if (receivedKey == '#' && codeLength >= minCodeLength && !initial) { // Enter/confirm key or max length reached
 8000ed6:	7f7b      	ldrb	r3, [r7, #29]
 8000ed8:	2b23      	cmp	r3, #35	; 0x23
 8000eda:	f040 8088 	bne.w	8000fee <StartTask02+0x27a>
 8000ede:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000ee2:	7fbb      	ldrb	r3, [r7, #30]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	f0c0 8082 	bcc.w	8000fee <StartTask02+0x27a>
 8000eea:	6a3b      	ldr	r3, [r7, #32]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d17e      	bne.n	8000fee <StartTask02+0x27a>
				// Check if the entered code is correct
				if (strncmp(enteredCode, correctCode, maxCodeLength) == 0) {
 8000ef0:	7ffa      	ldrb	r2, [r7, #31]
 8000ef2:	f107 010c 	add.w	r1, r7, #12
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4618      	mov	r0, r3
 8000efc:	f005 fe3c 	bl	8006b78 <strncmp>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d11c      	bne.n	8000f40 <StartTask02+0x1cc>
					// Code is correct
					SSD1306_Clear();
 8000f06:	f000 fb56 	bl	80015b6 <SSD1306_Clear>
					SSD1306_GotoXY(0, 0);
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f000 fa97 	bl	8001440 <SSD1306_GotoXY>
					SSD1306_Puts("Success!", &Font_11x18, 1);
 8000f12:	2201      	movs	r2, #1
 8000f14:	494c      	ldr	r1, [pc, #304]	; (8001048 <StartTask02+0x2d4>)
 8000f16:	4851      	ldr	r0, [pc, #324]	; (800105c <StartTask02+0x2e8>)
 8000f18:	f000 fb28 	bl	800156c <SSD1306_Puts>

					HAL_UART_Transmit(&huart2, (uint8_t *)"Success!\r\n", 10, 100);
 8000f1c:	2364      	movs	r3, #100	; 0x64
 8000f1e:	220a      	movs	r2, #10
 8000f20:	494f      	ldr	r1, [pc, #316]	; (8001060 <StartTask02+0x2ec>)
 8000f22:	4848      	ldr	r0, [pc, #288]	; (8001044 <StartTask02+0x2d0>)
 8000f24:	f003 f822 	bl	8003f6c <HAL_UART_Transmit>

					if (armed) {
 8000f28:	4b42      	ldr	r3, [pc, #264]	; (8001034 <StartTask02+0x2c0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <StartTask02+0x1c4>
						armed = 0;
 8000f30:	4b40      	ldr	r3, [pc, #256]	; (8001034 <StartTask02+0x2c0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	e017      	b.n	8000f68 <StartTask02+0x1f4>
					} else {
						armed = 1;
 8000f38:	4b3e      	ldr	r3, [pc, #248]	; (8001034 <StartTask02+0x2c0>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	e013      	b.n	8000f68 <StartTask02+0x1f4>
					}
				} else {
					// Code is incorrect
					SSD1306_Clear();
 8000f40:	f000 fb39 	bl	80015b6 <SSD1306_Clear>
					SSD1306_GotoXY(0, 0);
 8000f44:	2100      	movs	r1, #0
 8000f46:	2000      	movs	r0, #0
 8000f48:	f000 fa7a 	bl	8001440 <SSD1306_GotoXY>
					SSD1306_Puts("Failed!", &Font_11x18, 1);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	493e      	ldr	r1, [pc, #248]	; (8001048 <StartTask02+0x2d4>)
 8000f50:	4844      	ldr	r0, [pc, #272]	; (8001064 <StartTask02+0x2f0>)
 8000f52:	f000 fb0b 	bl	800156c <SSD1306_Puts>
					HAL_UART_Transmit(&huart2, (uint8_t *)"Failed!\r\n", 9, 100);
 8000f56:	2364      	movs	r3, #100	; 0x64
 8000f58:	2209      	movs	r2, #9
 8000f5a:	4943      	ldr	r1, [pc, #268]	; (8001068 <StartTask02+0x2f4>)
 8000f5c:	4839      	ldr	r0, [pc, #228]	; (8001044 <StartTask02+0x2d0>)
 8000f5e:	f003 f805 	bl	8003f6c <HAL_UART_Transmit>
					buzzer= 1;
 8000f62:	4b42      	ldr	r3, [pc, #264]	; (800106c <StartTask02+0x2f8>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	601a      	str	r2, [r3, #0]

				}
				SSD1306_UpdateScreen();
 8000f68:	f000 f9c4 	bl	80012f4 <SSD1306_UpdateScreen>
				HAL_Delay(2000); // Display message for 2 seconds
 8000f6c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f70:	f000 fe3e 	bl	8001bf0 <HAL_Delay>

				// Reset display and code length for next entry
				SSD1306_Clear();
 8000f74:	f000 fb1f 	bl	80015b6 <SSD1306_Clear>
				SSD1306_GotoXY(0, 0);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f000 fa60 	bl	8001440 <SSD1306_GotoXY>
				if (armed) {
 8000f80:	4b2c      	ldr	r3, [pc, #176]	; (8001034 <StartTask02+0x2c0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d00b      	beq.n	8000fa0 <StartTask02+0x22c>
					SSD1306_Puts("Armed!", &Font_11x18, 1);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	492f      	ldr	r1, [pc, #188]	; (8001048 <StartTask02+0x2d4>)
 8000f8c:	4830      	ldr	r0, [pc, #192]	; (8001050 <StartTask02+0x2dc>)
 8000f8e:	f000 faed 	bl	800156c <SSD1306_Puts>
					HAL_UART_Transmit(&huart2, (uint8_t *)"Armed!\r\n", 8, 100);
 8000f92:	2364      	movs	r3, #100	; 0x64
 8000f94:	2208      	movs	r2, #8
 8000f96:	492f      	ldr	r1, [pc, #188]	; (8001054 <StartTask02+0x2e0>)
 8000f98:	482a      	ldr	r0, [pc, #168]	; (8001044 <StartTask02+0x2d0>)
 8000f9a:	f002 ffe7 	bl	8003f6c <HAL_UART_Transmit>
 8000f9e:	e00a      	b.n	8000fb6 <StartTask02+0x242>

				} else {
					SSD1306_Puts("Not Armed!", &Font_11x18, 1);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4929      	ldr	r1, [pc, #164]	; (8001048 <StartTask02+0x2d4>)
 8000fa4:	4832      	ldr	r0, [pc, #200]	; (8001070 <StartTask02+0x2fc>)
 8000fa6:	f000 fae1 	bl	800156c <SSD1306_Puts>
					HAL_UART_Transmit(&huart2, (uint8_t *)"Not Armed!\r\n", 12, 100);
 8000faa:	2364      	movs	r3, #100	; 0x64
 8000fac:	220c      	movs	r2, #12
 8000fae:	4931      	ldr	r1, [pc, #196]	; (8001074 <StartTask02+0x300>)
 8000fb0:	4824      	ldr	r0, [pc, #144]	; (8001044 <StartTask02+0x2d0>)
 8000fb2:	f002 ffdb 	bl	8003f6c <HAL_UART_Transmit>

				}
				SSD1306_GotoXY(0, 30); // Adjust Y position based on your font size
 8000fb6:	211e      	movs	r1, #30
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f000 fa41 	bl	8001440 <SSD1306_GotoXY>
				HAL_UART_Transmit(&huart2, (uint8_t *)"Code:", 5, 100);
 8000fbe:	2364      	movs	r3, #100	; 0x64
 8000fc0:	2205      	movs	r2, #5
 8000fc2:	4925      	ldr	r1, [pc, #148]	; (8001058 <StartTask02+0x2e4>)
 8000fc4:	481f      	ldr	r0, [pc, #124]	; (8001044 <StartTask02+0x2d0>)
 8000fc6:	f002 ffd1 	bl	8003f6c <HAL_UART_Transmit>
				SSD1306_Puts("Code:", &Font_11x18, 1);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	491e      	ldr	r1, [pc, #120]	; (8001048 <StartTask02+0x2d4>)
 8000fce:	4822      	ldr	r0, [pc, #136]	; (8001058 <StartTask02+0x2e4>)
 8000fd0:	f000 facc 	bl	800156c <SSD1306_Puts>
				SSD1306_UpdateScreen();
 8000fd4:	f000 f98e 	bl	80012f4 <SSD1306_UpdateScreen>
				memset(enteredCode, 0, sizeof(enteredCode)); // Clear the entered code
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2207      	movs	r2, #7
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f005 fdc1 	bl	8006b68 <memset>
				codeLength = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fec:	e021      	b.n	8001032 <StartTask02+0x2be>
			} else {
				// Add received key to the entered code and update display with an additional asterisk
				if (codeLength < maxCodeLength) { // Prevent buffer overflow
 8000fee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000ff2:	7ffb      	ldrb	r3, [r7, #31]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d219      	bcs.n	800102c <StartTask02+0x2b8>
					enteredCode[codeLength] = receivedKey; // Store the received key
 8000ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ffc:	7f7a      	ldrb	r2, [r7, #29]
 8000ffe:	3328      	adds	r3, #40	; 0x28
 8001000:	443b      	add	r3, r7
 8001002:	f803 2c14 	strb.w	r2, [r3, #-20]
					//SSD1306_GotoXY ((codeLength * 5), 30); // Adjust spacing based on font size
					SSD1306_Puts("*", &Font_11x18, 1);
 8001006:	2201      	movs	r2, #1
 8001008:	490f      	ldr	r1, [pc, #60]	; (8001048 <StartTask02+0x2d4>)
 800100a:	481b      	ldr	r0, [pc, #108]	; (8001078 <StartTask02+0x304>)
 800100c:	f000 faae 	bl	800156c <SSD1306_Puts>
					HAL_UART_Transmit(&huart2, (uint8_t *)"*", 1, 100);
 8001010:	2364      	movs	r3, #100	; 0x64
 8001012:	2201      	movs	r2, #1
 8001014:	4918      	ldr	r1, [pc, #96]	; (8001078 <StartTask02+0x304>)
 8001016:	480b      	ldr	r0, [pc, #44]	; (8001044 <StartTask02+0x2d0>)
 8001018:	f002 ffa8 	bl	8003f6c <HAL_UART_Transmit>
					SSD1306_UpdateScreen();
 800101c:	f000 f96a 	bl	80012f4 <SSD1306_UpdateScreen>
					codeLength++;
 8001020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001024:	3301      	adds	r3, #1
 8001026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800102a:	e6c2      	b.n	8000db2 <StartTask02+0x3e>
					// Might  wait here? HAL_Delay (500);
				} else {
					printf("Error: Max Code Length Reached!\r\n");
 800102c:	4813      	ldr	r0, [pc, #76]	; (800107c <StartTask02+0x308>)
 800102e:	f005 fcbb 	bl	80069a8 <puts>
		if (armed) {
 8001032:	e6be      	b.n	8000db2 <StartTask02+0x3e>
 8001034:	2000039c 	.word	0x2000039c
 8001038:	40020000 	.word	0x40020000
 800103c:	20000394 	.word	0x20000394
 8001040:	08007224 	.word	0x08007224
 8001044:	2000033c 	.word	0x2000033c
 8001048:	20000000 	.word	0x20000000
 800104c:	08007230 	.word	0x08007230
 8001050:	0800723c 	.word	0x0800723c
 8001054:	08007244 	.word	0x08007244
 8001058:	0800716c 	.word	0x0800716c
 800105c:	08007250 	.word	0x08007250
 8001060:	0800725c 	.word	0x0800725c
 8001064:	08007268 	.word	0x08007268
 8001068:	08007270 	.word	0x08007270
 800106c:	20000398 	.word	0x20000398
 8001070:	0800727c 	.word	0x0800727c
 8001074:	08007288 	.word	0x08007288
 8001078:	08007298 	.word	0x08007298
 800107c:	0800729c 	.word	0x0800729c

08001080 <StartTask03>:
	}

	/* USER CODE END StartTask02 */
}

void StartTask03(void const *argument) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	const TickType_t xDelay = 20 / portTICK_PERIOD_MS; // Debounce delay
 8001088:	2314      	movs	r3, #20
 800108a:	60fb      	str	r3, [r7, #12]
	char keyToSend; // To hold the key to be sent

	for (;;) {
		keyToSend = Get_Key(); // Assume Get_Key() is debounced and returns '\0' if no key is pressed
 800108c:	f7ff fa3e 	bl	800050c <Get_Key>
 8001090:	4603      	mov	r3, r0
 8001092:	72fb      	strb	r3, [r7, #11]
		if (keyToSend != '\0') { // Check if a key is pressed
 8001094:	7afb      	ldrb	r3, [r7, #11]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00e      	beq.n	80010b8 <StartTask03+0x38>
			// Send the key press to the display task
			if (xQueueSend(myQueue01Handle, &keyToSend, portMAX_DELAY) != pdPASS) {
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <StartTask03+0x40>)
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	f107 010b 	add.w	r1, r7, #11
 80010a2:	2300      	movs	r3, #0
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295
 80010a8:	f003 fdb2 	bl	8004c10 <xQueueGenericSend>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d002      	beq.n	80010b8 <StartTask03+0x38>
				printf("Error: Data couldn't be sent from task 2\r\n");
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <StartTask03+0x44>)
 80010b4:	f005 fc78 	bl	80069a8 <puts>
			}
		}

		vTaskDelay(xDelay); // Wait for the next cycle
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f004 fa2b 	bl	8005514 <vTaskDelay>
		keyToSend = Get_Key(); // Assume Get_Key() is debounced and returns '\0' if no key is pressed
 80010be:	e7e5      	b.n	800108c <StartTask03+0xc>
 80010c0:	20000394 	.word	0x20000394
 80010c4:	080072c0 	.word	0x080072c0

080010c8 <StartTask04>:
	}
	/* USER CODE END StartTask02 */
}

void StartTask04(void const *argument) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	GPIO_PinState pirState;
	/* Infinite loop */
	for (;;) {

		pirState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 80010d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d4:	4813      	ldr	r0, [pc, #76]	; (8001124 <StartTask04+0x5c>)
 80010d6:	f001 f825 	bl	8002124 <HAL_GPIO_ReadPin>
 80010da:	4603      	mov	r3, r0
 80010dc:	73fb      	strb	r3, [r7, #15]


		if (pirState == GPIO_PIN_SET && armed) {
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d10d      	bne.n	8001100 <StartTask04+0x38>
 80010e4:	4b10      	ldr	r3, [pc, #64]	; (8001128 <StartTask04+0x60>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d009      	beq.n	8001100 <StartTask04+0x38>

			HAL_UART_Transmit(&huart2, (uint8_t *)"Movement\r\n", 13, 100);
 80010ec:	2364      	movs	r3, #100	; 0x64
 80010ee:	220d      	movs	r2, #13
 80010f0:	490e      	ldr	r1, [pc, #56]	; (800112c <StartTask04+0x64>)
 80010f2:	480f      	ldr	r0, [pc, #60]	; (8001130 <StartTask04+0x68>)
 80010f4:	f002 ff3a 	bl	8003f6c <HAL_UART_Transmit>
			buzzer = 1;
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <StartTask04+0x6c>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	e00c      	b.n	800111a <StartTask04+0x52>

		} else {

			if(armed){
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <StartTask04+0x60>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d005      	beq.n	8001114 <StartTask04+0x4c>
				//pirState = GPIO_PIN_RESET;
				HAL_UART_Transmit(&huart2, (uint8_t *)"No Movement\r\n", 13, 100);
 8001108:	2364      	movs	r3, #100	; 0x64
 800110a:	220d      	movs	r2, #13
 800110c:	490a      	ldr	r1, [pc, #40]	; (8001138 <StartTask04+0x70>)
 800110e:	4808      	ldr	r0, [pc, #32]	; (8001130 <StartTask04+0x68>)
 8001110:	f002 ff2c 	bl	8003f6c <HAL_UART_Transmit>
			}

			buzzer = 0; // No buzzer
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <StartTask04+0x6c>)
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
		}



		osDelay(100); // Check every 100ms
 800111a:	2064      	movs	r0, #100	; 0x64
 800111c:	f003 fb4d 	bl	80047ba <osDelay>
		pirState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8001120:	e7d6      	b.n	80010d0 <StartTask04+0x8>
 8001122:	bf00      	nop
 8001124:	40020000 	.word	0x40020000
 8001128:	2000039c 	.word	0x2000039c
 800112c:	080072ec 	.word	0x080072ec
 8001130:	2000033c 	.word	0x2000033c
 8001134:	20000398 	.word	0x20000398
 8001138:	080072f8 	.word	0x080072f8

0800113c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d101      	bne.n	8001152 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800114e:	f000 fd2f 	bl	8001bb0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40001000 	.word	0x40001000

08001160 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001164:	b672      	cpsid	i
}
 8001166:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001168:	e7fe      	b.n	8001168 <Error_Handler+0x8>
	...

0800116c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001172:	f000 fa29 	bl	80015c8 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001176:	f644 6320 	movw	r3, #20000	; 0x4e20
 800117a:	2201      	movs	r2, #1
 800117c:	2178      	movs	r1, #120	; 0x78
 800117e:	485b      	ldr	r0, [pc, #364]	; (80012ec <SSD1306_Init+0x180>)
 8001180:	f001 fa5e 	bl	8002640 <HAL_I2C_IsDeviceReady>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800118a:	2300      	movs	r3, #0
 800118c:	e0a9      	b.n	80012e2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800118e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001192:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001194:	e002      	b.n	800119c <SSD1306_Init+0x30>
		p--;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3b01      	subs	r3, #1
 800119a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f9      	bne.n	8001196 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80011a2:	22ae      	movs	r2, #174	; 0xae
 80011a4:	2100      	movs	r1, #0
 80011a6:	2078      	movs	r0, #120	; 0x78
 80011a8:	f000 fa8a 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80011ac:	2220      	movs	r2, #32
 80011ae:	2100      	movs	r1, #0
 80011b0:	2078      	movs	r0, #120	; 0x78
 80011b2:	f000 fa85 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80011b6:	2210      	movs	r2, #16
 80011b8:	2100      	movs	r1, #0
 80011ba:	2078      	movs	r0, #120	; 0x78
 80011bc:	f000 fa80 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80011c0:	22b0      	movs	r2, #176	; 0xb0
 80011c2:	2100      	movs	r1, #0
 80011c4:	2078      	movs	r0, #120	; 0x78
 80011c6:	f000 fa7b 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80011ca:	22c8      	movs	r2, #200	; 0xc8
 80011cc:	2100      	movs	r1, #0
 80011ce:	2078      	movs	r0, #120	; 0x78
 80011d0:	f000 fa76 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80011d4:	2200      	movs	r2, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	2078      	movs	r0, #120	; 0x78
 80011da:	f000 fa71 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80011de:	2210      	movs	r2, #16
 80011e0:	2100      	movs	r1, #0
 80011e2:	2078      	movs	r0, #120	; 0x78
 80011e4:	f000 fa6c 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80011e8:	2240      	movs	r2, #64	; 0x40
 80011ea:	2100      	movs	r1, #0
 80011ec:	2078      	movs	r0, #120	; 0x78
 80011ee:	f000 fa67 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80011f2:	2281      	movs	r2, #129	; 0x81
 80011f4:	2100      	movs	r1, #0
 80011f6:	2078      	movs	r0, #120	; 0x78
 80011f8:	f000 fa62 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80011fc:	22ff      	movs	r2, #255	; 0xff
 80011fe:	2100      	movs	r1, #0
 8001200:	2078      	movs	r0, #120	; 0x78
 8001202:	f000 fa5d 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001206:	22a1      	movs	r2, #161	; 0xa1
 8001208:	2100      	movs	r1, #0
 800120a:	2078      	movs	r0, #120	; 0x78
 800120c:	f000 fa58 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001210:	22a6      	movs	r2, #166	; 0xa6
 8001212:	2100      	movs	r1, #0
 8001214:	2078      	movs	r0, #120	; 0x78
 8001216:	f000 fa53 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800121a:	22a8      	movs	r2, #168	; 0xa8
 800121c:	2100      	movs	r1, #0
 800121e:	2078      	movs	r0, #120	; 0x78
 8001220:	f000 fa4e 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001224:	223f      	movs	r2, #63	; 0x3f
 8001226:	2100      	movs	r1, #0
 8001228:	2078      	movs	r0, #120	; 0x78
 800122a:	f000 fa49 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800122e:	22a4      	movs	r2, #164	; 0xa4
 8001230:	2100      	movs	r1, #0
 8001232:	2078      	movs	r0, #120	; 0x78
 8001234:	f000 fa44 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001238:	22d3      	movs	r2, #211	; 0xd3
 800123a:	2100      	movs	r1, #0
 800123c:	2078      	movs	r0, #120	; 0x78
 800123e:	f000 fa3f 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	2078      	movs	r0, #120	; 0x78
 8001248:	f000 fa3a 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800124c:	22d5      	movs	r2, #213	; 0xd5
 800124e:	2100      	movs	r1, #0
 8001250:	2078      	movs	r0, #120	; 0x78
 8001252:	f000 fa35 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001256:	22f0      	movs	r2, #240	; 0xf0
 8001258:	2100      	movs	r1, #0
 800125a:	2078      	movs	r0, #120	; 0x78
 800125c:	f000 fa30 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001260:	22d9      	movs	r2, #217	; 0xd9
 8001262:	2100      	movs	r1, #0
 8001264:	2078      	movs	r0, #120	; 0x78
 8001266:	f000 fa2b 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800126a:	2222      	movs	r2, #34	; 0x22
 800126c:	2100      	movs	r1, #0
 800126e:	2078      	movs	r0, #120	; 0x78
 8001270:	f000 fa26 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001274:	22da      	movs	r2, #218	; 0xda
 8001276:	2100      	movs	r1, #0
 8001278:	2078      	movs	r0, #120	; 0x78
 800127a:	f000 fa21 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800127e:	2212      	movs	r2, #18
 8001280:	2100      	movs	r1, #0
 8001282:	2078      	movs	r0, #120	; 0x78
 8001284:	f000 fa1c 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001288:	22db      	movs	r2, #219	; 0xdb
 800128a:	2100      	movs	r1, #0
 800128c:	2078      	movs	r0, #120	; 0x78
 800128e:	f000 fa17 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001292:	2220      	movs	r2, #32
 8001294:	2100      	movs	r1, #0
 8001296:	2078      	movs	r0, #120	; 0x78
 8001298:	f000 fa12 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800129c:	228d      	movs	r2, #141	; 0x8d
 800129e:	2100      	movs	r1, #0
 80012a0:	2078      	movs	r0, #120	; 0x78
 80012a2:	f000 fa0d 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80012a6:	2214      	movs	r2, #20
 80012a8:	2100      	movs	r1, #0
 80012aa:	2078      	movs	r0, #120	; 0x78
 80012ac:	f000 fa08 	bl	80016c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80012b0:	22af      	movs	r2, #175	; 0xaf
 80012b2:	2100      	movs	r1, #0
 80012b4:	2078      	movs	r0, #120	; 0x78
 80012b6:	f000 fa03 	bl	80016c0 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80012ba:	222e      	movs	r2, #46	; 0x2e
 80012bc:	2100      	movs	r1, #0
 80012be:	2078      	movs	r0, #120	; 0x78
 80012c0:	f000 f9fe 	bl	80016c0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80012c4:	2000      	movs	r0, #0
 80012c6:	f000 f843 	bl	8001350 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80012ca:	f000 f813 	bl	80012f4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <SSD1306_Init+0x184>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <SSD1306_Init+0x184>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80012da:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <SSD1306_Init+0x184>)
 80012dc:	2201      	movs	r2, #1
 80012de:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80012e0:	2301      	movs	r3, #1
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200002e8 	.word	0x200002e8
 80012f0:	200007a0 	.word	0x200007a0

080012f4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80012fa:	2300      	movs	r3, #0
 80012fc:	71fb      	strb	r3, [r7, #7]
 80012fe:	e01d      	b.n	800133c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	3b50      	subs	r3, #80	; 0x50
 8001304:	b2db      	uxtb	r3, r3
 8001306:	461a      	mov	r2, r3
 8001308:	2100      	movs	r1, #0
 800130a:	2078      	movs	r0, #120	; 0x78
 800130c:	f000 f9d8 	bl	80016c0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	2078      	movs	r0, #120	; 0x78
 8001316:	f000 f9d3 	bl	80016c0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800131a:	2210      	movs	r2, #16
 800131c:	2100      	movs	r1, #0
 800131e:	2078      	movs	r0, #120	; 0x78
 8001320:	f000 f9ce 	bl	80016c0 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	01db      	lsls	r3, r3, #7
 8001328:	4a08      	ldr	r2, [pc, #32]	; (800134c <SSD1306_UpdateScreen+0x58>)
 800132a:	441a      	add	r2, r3
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	2140      	movs	r1, #64	; 0x40
 8001330:	2078      	movs	r0, #120	; 0x78
 8001332:	f000 f95f 	bl	80015f4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	3301      	adds	r3, #1
 800133a:	71fb      	strb	r3, [r7, #7]
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	2b07      	cmp	r3, #7
 8001340:	d9de      	bls.n	8001300 <SSD1306_UpdateScreen+0xc>
	}
}
 8001342:	bf00      	nop
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200003a0 	.word	0x200003a0

08001350 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d101      	bne.n	8001364 <SSD1306_Fill+0x14>
 8001360:	2300      	movs	r3, #0
 8001362:	e000      	b.n	8001366 <SSD1306_Fill+0x16>
 8001364:	23ff      	movs	r3, #255	; 0xff
 8001366:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800136a:	4619      	mov	r1, r3
 800136c:	4803      	ldr	r0, [pc, #12]	; (800137c <SSD1306_Fill+0x2c>)
 800136e:	f005 fbfb 	bl	8006b68 <memset>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200003a0 	.word	0x200003a0

08001380 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
 800138a:	460b      	mov	r3, r1
 800138c:	80bb      	strh	r3, [r7, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	70fb      	strb	r3, [r7, #3]
	if (
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	2b7f      	cmp	r3, #127	; 0x7f
 8001396:	d848      	bhi.n	800142a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001398:	88bb      	ldrh	r3, [r7, #4]
 800139a:	2b3f      	cmp	r3, #63	; 0x3f
 800139c:	d845      	bhi.n	800142a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800139e:	4b26      	ldr	r3, [pc, #152]	; (8001438 <SSD1306_DrawPixel+0xb8>)
 80013a0:	791b      	ldrb	r3, [r3, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d006      	beq.n	80013b4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80013a6:	78fb      	ldrb	r3, [r7, #3]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	bf0c      	ite	eq
 80013ac:	2301      	moveq	r3, #1
 80013ae:	2300      	movne	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80013b4:	78fb      	ldrb	r3, [r7, #3]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d11a      	bne.n	80013f0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80013ba:	88fa      	ldrh	r2, [r7, #6]
 80013bc:	88bb      	ldrh	r3, [r7, #4]
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	b298      	uxth	r0, r3
 80013c2:	4603      	mov	r3, r0
 80013c4:	01db      	lsls	r3, r3, #7
 80013c6:	4413      	add	r3, r2
 80013c8:	4a1c      	ldr	r2, [pc, #112]	; (800143c <SSD1306_DrawPixel+0xbc>)
 80013ca:	5cd3      	ldrb	r3, [r2, r3]
 80013cc:	b25a      	sxtb	r2, r3
 80013ce:	88bb      	ldrh	r3, [r7, #4]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	b25b      	sxtb	r3, r3
 80013dc:	4313      	orrs	r3, r2
 80013de:	b259      	sxtb	r1, r3
 80013e0:	88fa      	ldrh	r2, [r7, #6]
 80013e2:	4603      	mov	r3, r0
 80013e4:	01db      	lsls	r3, r3, #7
 80013e6:	4413      	add	r3, r2
 80013e8:	b2c9      	uxtb	r1, r1
 80013ea:	4a14      	ldr	r2, [pc, #80]	; (800143c <SSD1306_DrawPixel+0xbc>)
 80013ec:	54d1      	strb	r1, [r2, r3]
 80013ee:	e01d      	b.n	800142c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013f0:	88fa      	ldrh	r2, [r7, #6]
 80013f2:	88bb      	ldrh	r3, [r7, #4]
 80013f4:	08db      	lsrs	r3, r3, #3
 80013f6:	b298      	uxth	r0, r3
 80013f8:	4603      	mov	r3, r0
 80013fa:	01db      	lsls	r3, r3, #7
 80013fc:	4413      	add	r3, r2
 80013fe:	4a0f      	ldr	r2, [pc, #60]	; (800143c <SSD1306_DrawPixel+0xbc>)
 8001400:	5cd3      	ldrb	r3, [r2, r3]
 8001402:	b25a      	sxtb	r2, r3
 8001404:	88bb      	ldrh	r3, [r7, #4]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	2101      	movs	r1, #1
 800140c:	fa01 f303 	lsl.w	r3, r1, r3
 8001410:	b25b      	sxtb	r3, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	b25b      	sxtb	r3, r3
 8001416:	4013      	ands	r3, r2
 8001418:	b259      	sxtb	r1, r3
 800141a:	88fa      	ldrh	r2, [r7, #6]
 800141c:	4603      	mov	r3, r0
 800141e:	01db      	lsls	r3, r3, #7
 8001420:	4413      	add	r3, r2
 8001422:	b2c9      	uxtb	r1, r1
 8001424:	4a05      	ldr	r2, [pc, #20]	; (800143c <SSD1306_DrawPixel+0xbc>)
 8001426:	54d1      	strb	r1, [r2, r3]
 8001428:	e000      	b.n	800142c <SSD1306_DrawPixel+0xac>
		return;
 800142a:	bf00      	nop
	}
}
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	200007a0 	.word	0x200007a0
 800143c:	200003a0 	.word	0x200003a0

08001440 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	460a      	mov	r2, r1
 800144a:	80fb      	strh	r3, [r7, #6]
 800144c:	4613      	mov	r3, r2
 800144e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001450:	4a05      	ldr	r2, [pc, #20]	; (8001468 <SSD1306_GotoXY+0x28>)
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001456:	4a04      	ldr	r2, [pc, #16]	; (8001468 <SSD1306_GotoXY+0x28>)
 8001458:	88bb      	ldrh	r3, [r7, #4]
 800145a:	8053      	strh	r3, [r2, #2]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	200007a0 	.word	0x200007a0

0800146c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
 8001478:	4613      	mov	r3, r2
 800147a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800147c:	4b3a      	ldr	r3, [pc, #232]	; (8001568 <SSD1306_Putc+0xfc>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	4413      	add	r3, r2
	if (
 8001488:	2b7f      	cmp	r3, #127	; 0x7f
 800148a:	dc07      	bgt.n	800149c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800148c:	4b36      	ldr	r3, [pc, #216]	; (8001568 <SSD1306_Putc+0xfc>)
 800148e:	885b      	ldrh	r3, [r3, #2]
 8001490:	461a      	mov	r2, r3
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	785b      	ldrb	r3, [r3, #1]
 8001496:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001498:	2b3f      	cmp	r3, #63	; 0x3f
 800149a:	dd01      	ble.n	80014a0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800149c:	2300      	movs	r3, #0
 800149e:	e05e      	b.n	800155e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	e04b      	b.n	800153e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	3b20      	subs	r3, #32
 80014ae:	6839      	ldr	r1, [r7, #0]
 80014b0:	7849      	ldrb	r1, [r1, #1]
 80014b2:	fb01 f303 	mul.w	r3, r1, r3
 80014b6:	4619      	mov	r1, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	440b      	add	r3, r1
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4413      	add	r3, r2
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	e030      	b.n	800152c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d010      	beq.n	80014fc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80014da:	4b23      	ldr	r3, [pc, #140]	; (8001568 <SSD1306_Putc+0xfc>)
 80014dc:	881a      	ldrh	r2, [r3, #0]
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	4413      	add	r3, r2
 80014e4:	b298      	uxth	r0, r3
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <SSD1306_Putc+0xfc>)
 80014e8:	885a      	ldrh	r2, [r3, #2]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	4413      	add	r3, r2
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	79ba      	ldrb	r2, [r7, #6]
 80014f4:	4619      	mov	r1, r3
 80014f6:	f7ff ff43 	bl	8001380 <SSD1306_DrawPixel>
 80014fa:	e014      	b.n	8001526 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80014fc:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <SSD1306_Putc+0xfc>)
 80014fe:	881a      	ldrh	r2, [r3, #0]
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	b29b      	uxth	r3, r3
 8001504:	4413      	add	r3, r2
 8001506:	b298      	uxth	r0, r3
 8001508:	4b17      	ldr	r3, [pc, #92]	; (8001568 <SSD1306_Putc+0xfc>)
 800150a:	885a      	ldrh	r2, [r3, #2]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	b29b      	uxth	r3, r3
 8001510:	4413      	add	r3, r2
 8001512:	b299      	uxth	r1, r3
 8001514:	79bb      	ldrb	r3, [r7, #6]
 8001516:	2b00      	cmp	r3, #0
 8001518:	bf0c      	ite	eq
 800151a:	2301      	moveq	r3, #1
 800151c:	2300      	movne	r3, #0
 800151e:	b2db      	uxtb	r3, r3
 8001520:	461a      	mov	r2, r3
 8001522:	f7ff ff2d 	bl	8001380 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	3301      	adds	r3, #1
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	4293      	cmp	r3, r2
 8001536:	d3c8      	bcc.n	80014ca <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	3301      	adds	r3, #1
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	785b      	ldrb	r3, [r3, #1]
 8001542:	461a      	mov	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	4293      	cmp	r3, r2
 8001548:	d3ad      	bcc.n	80014a6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800154a:	4b07      	ldr	r3, [pc, #28]	; (8001568 <SSD1306_Putc+0xfc>)
 800154c:	881a      	ldrh	r2, [r3, #0]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4413      	add	r3, r2
 8001556:	b29a      	uxth	r2, r3
 8001558:	4b03      	ldr	r3, [pc, #12]	; (8001568 <SSD1306_Putc+0xfc>)
 800155a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800155c:	79fb      	ldrb	r3, [r7, #7]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200007a0 	.word	0x200007a0

0800156c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	4613      	mov	r3, r2
 8001578:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800157a:	e012      	b.n	80015a2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	79fa      	ldrb	r2, [r7, #7]
 8001582:	68b9      	ldr	r1, [r7, #8]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff71 	bl	800146c <SSD1306_Putc>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d002      	beq.n	800159c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	e008      	b.n	80015ae <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	3301      	adds	r3, #1
 80015a0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1e8      	bne.n	800157c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	781b      	ldrb	r3, [r3, #0]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80015ba:	2000      	movs	r0, #0
 80015bc:	f7ff fec8 	bl	8001350 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80015c0:	f7ff fe98 	bl	80012f4 <SSD1306_UpdateScreen>
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <ssd1306_I2C_Init+0x28>)
 80015d0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015d2:	e002      	b.n	80015da <ssd1306_I2C_Init+0x12>
		p--;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f9      	bne.n	80015d4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	0003d090 	.word	0x0003d090

080015f4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b0c7      	sub	sp, #284	; 0x11c
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	4604      	mov	r4, r0
 80015fc:	4608      	mov	r0, r1
 80015fe:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001602:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001606:	600a      	str	r2, [r1, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800160e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001612:	4622      	mov	r2, r4
 8001614:	701a      	strb	r2, [r3, #0]
 8001616:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800161a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800161e:	4602      	mov	r2, r0
 8001620:	701a      	strb	r2, [r3, #0]
 8001622:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001626:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800162a:	460a      	mov	r2, r1
 800162c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800162e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001636:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800163a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800163e:	7812      	ldrb	r2, [r2, #0]
 8001640:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001642:	2300      	movs	r3, #0
 8001644:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001648:	e015      	b.n	8001676 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800164a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800164e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001652:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	441a      	add	r2, r3
 800165a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800165e:	3301      	adds	r3, #1
 8001660:	7811      	ldrb	r1, [r2, #0]
 8001662:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001666:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800166a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800166c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001670:	3301      	adds	r3, #1
 8001672:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001676:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800167a:	b29b      	uxth	r3, r3
 800167c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001680:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001684:	8812      	ldrh	r2, [r2, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d8df      	bhi.n	800164a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800168a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800168e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b299      	uxth	r1, r3
 8001696:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800169a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	3301      	adds	r3, #1
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	f107 020c 	add.w	r2, r7, #12
 80016a8:	200a      	movs	r0, #10
 80016aa:	9000      	str	r0, [sp, #0]
 80016ac:	4803      	ldr	r0, [pc, #12]	; (80016bc <ssd1306_I2C_WriteMulti+0xc8>)
 80016ae:	f000 fec9 	bl	8002444 <HAL_I2C_Master_Transmit>
}
 80016b2:	bf00      	nop
 80016b4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd90      	pop	{r4, r7, pc}
 80016bc:	200002e8 	.word	0x200002e8

080016c0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
 80016ca:	460b      	mov	r3, r1
 80016cc:	71bb      	strb	r3, [r7, #6]
 80016ce:	4613      	mov	r3, r2
 80016d0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80016d2:	79bb      	ldrb	r3, [r7, #6]
 80016d4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80016d6:	797b      	ldrb	r3, [r7, #5]
 80016d8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	b299      	uxth	r1, r3
 80016de:	f107 020c 	add.w	r2, r7, #12
 80016e2:	230a      	movs	r3, #10
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2302      	movs	r3, #2
 80016e8:	4803      	ldr	r0, [pc, #12]	; (80016f8 <ssd1306_I2C_Write+0x38>)
 80016ea:	f000 feab 	bl	8002444 <HAL_I2C_Master_Transmit>
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200002e8 	.word	0x200002e8

080016fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_MspInit+0x54>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	4a11      	ldr	r2, [pc, #68]	; (8001750 <HAL_MspInit+0x54>)
 800170c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001710:	6453      	str	r3, [r2, #68]	; 0x44
 8001712:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <HAL_MspInit+0x54>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	603b      	str	r3, [r7, #0]
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_MspInit+0x54>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <HAL_MspInit+0x54>)
 8001728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172c:	6413      	str	r3, [r2, #64]	; 0x40
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <HAL_MspInit+0x54>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	210f      	movs	r1, #15
 800173e:	f06f 0001 	mvn.w	r0, #1
 8001742:	f000 fb31 	bl	8001da8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800

08001754 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a19      	ldr	r2, [pc, #100]	; (80017d8 <HAL_I2C_MspInit+0x84>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d12c      	bne.n	80017d0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <HAL_I2C_MspInit+0x88>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a17      	ldr	r2, [pc, #92]	; (80017dc <HAL_I2C_MspInit+0x88>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <HAL_I2C_MspInit+0x88>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001792:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001798:	2312      	movs	r3, #18
 800179a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017a4:	2304      	movs	r3, #4
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4619      	mov	r1, r3
 80017ae:	480c      	ldr	r0, [pc, #48]	; (80017e0 <HAL_I2C_MspInit+0x8c>)
 80017b0:	f000 fb24 	bl	8001dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <HAL_I2C_MspInit+0x88>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	4a07      	ldr	r2, [pc, #28]	; (80017dc <HAL_I2C_MspInit+0x88>)
 80017be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017c2:	6413      	str	r3, [r2, #64]	; 0x40
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <HAL_I2C_MspInit+0x88>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017d0:	bf00      	nop
 80017d2:	3728      	adds	r7, #40	; 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40005400 	.word	0x40005400
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020400 	.word	0x40020400

080017e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a19      	ldr	r2, [pc, #100]	; (8001868 <HAL_UART_MspInit+0x84>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d12b      	bne.n	800185e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	4b18      	ldr	r3, [pc, #96]	; (800186c <HAL_UART_MspInit+0x88>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	4a17      	ldr	r2, [pc, #92]	; (800186c <HAL_UART_MspInit+0x88>)
 8001810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001814:	6413      	str	r3, [r2, #64]	; 0x40
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_UART_MspInit+0x88>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <HAL_UART_MspInit+0x88>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a10      	ldr	r2, [pc, #64]	; (800186c <HAL_UART_MspInit+0x88>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <HAL_UART_MspInit+0x88>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800183e:	2304      	movs	r3, #4
 8001840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001842:	2312      	movs	r3, #18
 8001844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184a:	2303      	movs	r3, #3
 800184c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800184e:	2307      	movs	r3, #7
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	4619      	mov	r1, r3
 8001858:	4805      	ldr	r0, [pc, #20]	; (8001870 <HAL_UART_MspInit+0x8c>)
 800185a:	f000 facf 	bl	8001dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800185e:	bf00      	nop
 8001860:	3728      	adds	r7, #40	; 0x28
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40004400 	.word	0x40004400
 800186c:	40023800 	.word	0x40023800
 8001870:	40020000 	.word	0x40020000

08001874 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08e      	sub	sp, #56	; 0x38
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	4b33      	ldr	r3, [pc, #204]	; (8001958 <HAL_InitTick+0xe4>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	4a32      	ldr	r2, [pc, #200]	; (8001958 <HAL_InitTick+0xe4>)
 800188e:	f043 0310 	orr.w	r3, r3, #16
 8001892:	6413      	str	r3, [r2, #64]	; 0x40
 8001894:	4b30      	ldr	r3, [pc, #192]	; (8001958 <HAL_InitTick+0xe4>)
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	f003 0310 	and.w	r3, r3, #16
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018a0:	f107 0210 	add.w	r2, r7, #16
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4611      	mov	r1, r2
 80018aa:	4618      	mov	r0, r3
 80018ac:	f001 fb6c 	bl	8002f88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d103      	bne.n	80018c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018ba:	f001 fb3d 	bl	8002f38 <HAL_RCC_GetPCLK1Freq>
 80018be:	6378      	str	r0, [r7, #52]	; 0x34
 80018c0:	e004      	b.n	80018cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018c2:	f001 fb39 	bl	8002f38 <HAL_RCC_GetPCLK1Freq>
 80018c6:	4603      	mov	r3, r0
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ce:	4a23      	ldr	r2, [pc, #140]	; (800195c <HAL_InitTick+0xe8>)
 80018d0:	fba2 2303 	umull	r2, r3, r2, r3
 80018d4:	0c9b      	lsrs	r3, r3, #18
 80018d6:	3b01      	subs	r3, #1
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018da:	4b21      	ldr	r3, [pc, #132]	; (8001960 <HAL_InitTick+0xec>)
 80018dc:	4a21      	ldr	r2, [pc, #132]	; (8001964 <HAL_InitTick+0xf0>)
 80018de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018e0:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <HAL_InitTick+0xec>)
 80018e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018e6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018e8:	4a1d      	ldr	r2, [pc, #116]	; (8001960 <HAL_InitTick+0xec>)
 80018ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018ee:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <HAL_InitTick+0xec>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f4:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <HAL_InitTick+0xec>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fa:	4b19      	ldr	r3, [pc, #100]	; (8001960 <HAL_InitTick+0xec>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001900:	4817      	ldr	r0, [pc, #92]	; (8001960 <HAL_InitTick+0xec>)
 8001902:	f002 f841 	bl	8003988 <HAL_TIM_Base_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800190c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001910:	2b00      	cmp	r3, #0
 8001912:	d11b      	bne.n	800194c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001914:	4812      	ldr	r0, [pc, #72]	; (8001960 <HAL_InitTick+0xec>)
 8001916:	f002 f891 	bl	8003a3c <HAL_TIM_Base_Start_IT>
 800191a:	4603      	mov	r3, r0
 800191c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001920:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001924:	2b00      	cmp	r3, #0
 8001926:	d111      	bne.n	800194c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001928:	2036      	movs	r0, #54	; 0x36
 800192a:	f000 fa59 	bl	8001de0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b0f      	cmp	r3, #15
 8001932:	d808      	bhi.n	8001946 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001934:	2200      	movs	r2, #0
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	2036      	movs	r0, #54	; 0x36
 800193a:	f000 fa35 	bl	8001da8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <HAL_InitTick+0xf4>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	e002      	b.n	800194c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800194c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001950:	4618      	mov	r0, r3
 8001952:	3738      	adds	r7, #56	; 0x38
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	431bde83 	.word	0x431bde83
 8001960:	200007a8 	.word	0x200007a8
 8001964:	40001000 	.word	0x40001000
 8001968:	2000000c 	.word	0x2000000c

0800196c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001970:	e7fe      	b.n	8001970 <NMI_Handler+0x4>

08001972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001976:	e7fe      	b.n	8001976 <HardFault_Handler+0x4>

08001978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800197c:	e7fe      	b.n	800197c <MemManage_Handler+0x4>

0800197e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001982:	e7fe      	b.n	8001982 <BusFault_Handler+0x4>

08001984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <UsageFault_Handler+0x4>

0800198a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <TIM6_DAC_IRQHandler+0x10>)
 800199e:	f002 f8bd 	bl	8003b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200007a8 	.word	0x200007a8

080019ac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	e00a      	b.n	80019d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019be:	f3af 8000 	nop.w
 80019c2:	4601      	mov	r1, r0
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	60ba      	str	r2, [r7, #8]
 80019ca:	b2ca      	uxtb	r2, r1
 80019cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	3301      	adds	r3, #1
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	429a      	cmp	r2, r3
 80019da:	dbf0      	blt.n	80019be <_read+0x12>
  }

  return len;
 80019dc:	687b      	ldr	r3, [r7, #4]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	e009      	b.n	8001a0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	60ba      	str	r2, [r7, #8]
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	dbf1      	blt.n	80019f8 <_write+0x12>
  }
  return len;
 8001a14:	687b      	ldr	r3, [r7, #4]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <_close>:

int _close(int file)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a46:	605a      	str	r2, [r3, #4]
  return 0;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <_isatty>:

int _isatty(int file)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a5e:	2301      	movs	r3, #1
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a90:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <_sbrk+0x5c>)
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <_sbrk+0x60>)
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d102      	bne.n	8001aaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <_sbrk+0x64>)
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <_sbrk+0x68>)
 8001aa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <_sbrk+0x64>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d207      	bcs.n	8001ac8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab8:	f005 f8ca 	bl	8006c50 <__errno>
 8001abc:	4603      	mov	r3, r0
 8001abe:	220c      	movs	r2, #12
 8001ac0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac6:	e009      	b.n	8001adc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <_sbrk+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ace:	4b07      	ldr	r3, [pc, #28]	; (8001aec <_sbrk+0x64>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4a05      	ldr	r2, [pc, #20]	; (8001aec <_sbrk+0x64>)
 8001ad8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ada:	68fb      	ldr	r3, [r7, #12]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20020000 	.word	0x20020000
 8001ae8:	00000400 	.word	0x00000400
 8001aec:	200007f0 	.word	0x200007f0
 8001af0:	20004698 	.word	0x20004698

08001af4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <SystemInit+0x20>)
 8001afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001afe:	4a05      	ldr	r2, [pc, #20]	; (8001b14 <SystemInit+0x20>)
 8001b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b1c:	f7ff ffea 	bl	8001af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b20:	480c      	ldr	r0, [pc, #48]	; (8001b54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b22:	490d      	ldr	r1, [pc, #52]	; (8001b58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b24:	4a0d      	ldr	r2, [pc, #52]	; (8001b5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b28:	e002      	b.n	8001b30 <LoopCopyDataInit>

08001b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2e:	3304      	adds	r3, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b34:	d3f9      	bcc.n	8001b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b38:	4c0a      	ldr	r4, [pc, #40]	; (8001b64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b3c:	e001      	b.n	8001b42 <LoopFillZerobss>

08001b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b40:	3204      	adds	r2, #4

08001b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b44:	d3fb      	bcc.n	8001b3e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b46:	f005 f889 	bl	8006c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4a:	f7fe fead 	bl	80008a8 <main>
  bx  lr    
 8001b4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b58:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001b5c:	08008094 	.word	0x08008094
  ldr r2, =_sbss
 8001b60:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001b64:	20004698 	.word	0x20004698

08001b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b68:	e7fe      	b.n	8001b68 <ADC_IRQHandler>
	...

08001b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b70:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <HAL_Init+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0d      	ldr	r2, [pc, #52]	; (8001bac <HAL_Init+0x40>)
 8001b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <HAL_Init+0x40>)
 8001b82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a07      	ldr	r2, [pc, #28]	; (8001bac <HAL_Init+0x40>)
 8001b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b94:	2003      	movs	r0, #3
 8001b96:	f000 f8fc 	bl	8001d92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f7ff fe6a 	bl	8001874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba0:	f7ff fdac 	bl	80016fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023c00 	.word	0x40023c00

08001bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_IncTick+0x20>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_IncTick+0x24>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <HAL_IncTick+0x24>)
 8001bc2:	6013      	str	r3, [r2, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000010 	.word	0x20000010
 8001bd4:	200007f4 	.word	0x200007f4

08001bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return uwTick;
 8001bdc:	4b03      	ldr	r3, [pc, #12]	; (8001bec <HAL_GetTick+0x14>)
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	200007f4 	.word	0x200007f4

08001bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf8:	f7ff ffee 	bl	8001bd8 <HAL_GetTick>
 8001bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c08:	d005      	beq.n	8001c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_Delay+0x44>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c16:	bf00      	nop
 8001c18:	f7ff ffde 	bl	8001bd8 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d8f7      	bhi.n	8001c18 <HAL_Delay+0x28>
  {
  }
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000010 	.word	0x20000010

08001c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <__NVIC_SetPriorityGrouping+0x44>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c54:	4013      	ands	r3, r2
 8001c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6a:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	60d3      	str	r3, [r2, #12]
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <__NVIC_GetPriorityGrouping+0x18>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	f003 0307 	and.w	r3, r3, #7
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	db0b      	blt.n	8001cc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	f003 021f 	and.w	r2, r3, #31
 8001cb4:	4907      	ldr	r1, [pc, #28]	; (8001cd4 <__NVIC_EnableIRQ+0x38>)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000e100 	.word	0xe000e100

08001cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	6039      	str	r1, [r7, #0]
 8001ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	db0a      	blt.n	8001d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	490c      	ldr	r1, [pc, #48]	; (8001d24 <__NVIC_SetPriority+0x4c>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	0112      	lsls	r2, r2, #4
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d00:	e00a      	b.n	8001d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4908      	ldr	r1, [pc, #32]	; (8001d28 <__NVIC_SetPriority+0x50>)
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	3b04      	subs	r3, #4
 8001d10:	0112      	lsls	r2, r2, #4
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	440b      	add	r3, r1
 8001d16:	761a      	strb	r2, [r3, #24]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000e100 	.word	0xe000e100
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	; 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f1c3 0307 	rsb	r3, r3, #7
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	bf28      	it	cs
 8001d4a:	2304      	movcs	r3, #4
 8001d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3304      	adds	r3, #4
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d902      	bls.n	8001d5c <NVIC_EncodePriority+0x30>
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3b03      	subs	r3, #3
 8001d5a:	e000      	b.n	8001d5e <NVIC_EncodePriority+0x32>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	f04f 32ff 	mov.w	r2, #4294967295
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	401a      	ands	r2, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d74:	f04f 31ff 	mov.w	r1, #4294967295
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	43d9      	mvns	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	4313      	orrs	r3, r2
         );
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3724      	adds	r7, #36	; 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff ff4c 	bl	8001c38 <__NVIC_SetPriorityGrouping>
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dba:	f7ff ff61 	bl	8001c80 <__NVIC_GetPriorityGrouping>
 8001dbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	68b9      	ldr	r1, [r7, #8]
 8001dc4:	6978      	ldr	r0, [r7, #20]
 8001dc6:	f7ff ffb1 	bl	8001d2c <NVIC_EncodePriority>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ff80 	bl	8001cd8 <__NVIC_SetPriority>
}
 8001dd8:	bf00      	nop
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ff54 	bl	8001c9c <__NVIC_EnableIRQ>
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
 8001e16:	e165      	b.n	80020e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e18:	2201      	movs	r2, #1
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	f040 8154 	bne.w	80020de <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d005      	beq.n	8001e4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d130      	bne.n	8001eb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	2203      	movs	r2, #3
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e84:	2201      	movs	r2, #1
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	f003 0201 	and.w	r2, r3, #1
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d017      	beq.n	8001eec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d123      	bne.n	8001f40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	08da      	lsrs	r2, r3, #3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3208      	adds	r2, #8
 8001f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	220f      	movs	r2, #15
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	08da      	lsrs	r2, r3, #3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3208      	adds	r2, #8
 8001f3a:	69b9      	ldr	r1, [r7, #24]
 8001f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0203 	and.w	r2, r3, #3
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 80ae 	beq.w	80020de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	4b5d      	ldr	r3, [pc, #372]	; (80020fc <HAL_GPIO_Init+0x300>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4a5c      	ldr	r2, [pc, #368]	; (80020fc <HAL_GPIO_Init+0x300>)
 8001f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f90:	6453      	str	r3, [r2, #68]	; 0x44
 8001f92:	4b5a      	ldr	r3, [pc, #360]	; (80020fc <HAL_GPIO_Init+0x300>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f9e:	4a58      	ldr	r2, [pc, #352]	; (8002100 <HAL_GPIO_Init+0x304>)
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	089b      	lsrs	r3, r3, #2
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	220f      	movs	r2, #15
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4f      	ldr	r2, [pc, #316]	; (8002104 <HAL_GPIO_Init+0x308>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d025      	beq.n	8002016 <HAL_GPIO_Init+0x21a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a4e      	ldr	r2, [pc, #312]	; (8002108 <HAL_GPIO_Init+0x30c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d01f      	beq.n	8002012 <HAL_GPIO_Init+0x216>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a4d      	ldr	r2, [pc, #308]	; (800210c <HAL_GPIO_Init+0x310>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d019      	beq.n	800200e <HAL_GPIO_Init+0x212>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a4c      	ldr	r2, [pc, #304]	; (8002110 <HAL_GPIO_Init+0x314>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d013      	beq.n	800200a <HAL_GPIO_Init+0x20e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a4b      	ldr	r2, [pc, #300]	; (8002114 <HAL_GPIO_Init+0x318>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00d      	beq.n	8002006 <HAL_GPIO_Init+0x20a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a4a      	ldr	r2, [pc, #296]	; (8002118 <HAL_GPIO_Init+0x31c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d007      	beq.n	8002002 <HAL_GPIO_Init+0x206>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a49      	ldr	r2, [pc, #292]	; (800211c <HAL_GPIO_Init+0x320>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d101      	bne.n	8001ffe <HAL_GPIO_Init+0x202>
 8001ffa:	2306      	movs	r3, #6
 8001ffc:	e00c      	b.n	8002018 <HAL_GPIO_Init+0x21c>
 8001ffe:	2307      	movs	r3, #7
 8002000:	e00a      	b.n	8002018 <HAL_GPIO_Init+0x21c>
 8002002:	2305      	movs	r3, #5
 8002004:	e008      	b.n	8002018 <HAL_GPIO_Init+0x21c>
 8002006:	2304      	movs	r3, #4
 8002008:	e006      	b.n	8002018 <HAL_GPIO_Init+0x21c>
 800200a:	2303      	movs	r3, #3
 800200c:	e004      	b.n	8002018 <HAL_GPIO_Init+0x21c>
 800200e:	2302      	movs	r3, #2
 8002010:	e002      	b.n	8002018 <HAL_GPIO_Init+0x21c>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <HAL_GPIO_Init+0x21c>
 8002016:	2300      	movs	r3, #0
 8002018:	69fa      	ldr	r2, [r7, #28]
 800201a:	f002 0203 	and.w	r2, r2, #3
 800201e:	0092      	lsls	r2, r2, #2
 8002020:	4093      	lsls	r3, r2
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002028:	4935      	ldr	r1, [pc, #212]	; (8002100 <HAL_GPIO_Init+0x304>)
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	089b      	lsrs	r3, r3, #2
 800202e:	3302      	adds	r3, #2
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002036:	4b3a      	ldr	r3, [pc, #232]	; (8002120 <HAL_GPIO_Init+0x324>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800205a:	4a31      	ldr	r2, [pc, #196]	; (8002120 <HAL_GPIO_Init+0x324>)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002060:	4b2f      	ldr	r3, [pc, #188]	; (8002120 <HAL_GPIO_Init+0x324>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002084:	4a26      	ldr	r2, [pc, #152]	; (8002120 <HAL_GPIO_Init+0x324>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800208a:	4b25      	ldr	r3, [pc, #148]	; (8002120 <HAL_GPIO_Init+0x324>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ae:	4a1c      	ldr	r2, [pc, #112]	; (8002120 <HAL_GPIO_Init+0x324>)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b4:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <HAL_GPIO_Init+0x324>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020d8:	4a11      	ldr	r2, [pc, #68]	; (8002120 <HAL_GPIO_Init+0x324>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3301      	adds	r3, #1
 80020e2:	61fb      	str	r3, [r7, #28]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	2b0f      	cmp	r3, #15
 80020e8:	f67f ae96 	bls.w	8001e18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	3724      	adds	r7, #36	; 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800
 8002100:	40013800 	.word	0x40013800
 8002104:	40020000 	.word	0x40020000
 8002108:	40020400 	.word	0x40020400
 800210c:	40020800 	.word	0x40020800
 8002110:	40020c00 	.word	0x40020c00
 8002114:	40021000 	.word	0x40021000
 8002118:	40021400 	.word	0x40021400
 800211c:	40021800 	.word	0x40021800
 8002120:	40013c00 	.word	0x40013c00

08002124 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	887b      	ldrh	r3, [r7, #2]
 8002136:	4013      	ands	r3, r2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800213c:	2301      	movs	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
 8002140:	e001      	b.n	8002146 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002142:	2300      	movs	r3, #0
 8002144:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002146:	7bfb      	ldrb	r3, [r7, #15]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	807b      	strh	r3, [r7, #2]
 8002160:	4613      	mov	r3, r2
 8002162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002164:	787b      	ldrb	r3, [r7, #1]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800216a:	887a      	ldrh	r2, [r7, #2]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002170:	e003      	b.n	800217a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002172:	887b      	ldrh	r3, [r7, #2]
 8002174:	041a      	lsls	r2, r3, #16
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	619a      	str	r2, [r3, #24]
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002186:	b480      	push	{r7}
 8002188:	b085      	sub	sp, #20
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	460b      	mov	r3, r1
 8002190:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002198:	887a      	ldrh	r2, [r7, #2]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4013      	ands	r3, r2
 800219e:	041a      	lsls	r2, r3, #16
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	43d9      	mvns	r1, r3
 80021a4:	887b      	ldrh	r3, [r7, #2]
 80021a6:	400b      	ands	r3, r1
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	619a      	str	r2, [r3, #24]
}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e12b      	b.n	8002426 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d106      	bne.n	80021e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff fab6 	bl	8001754 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2224      	movs	r2, #36	; 0x24
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0201 	bic.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800220e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800221e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002220:	f000 fe8a 	bl	8002f38 <HAL_RCC_GetPCLK1Freq>
 8002224:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4a81      	ldr	r2, [pc, #516]	; (8002430 <HAL_I2C_Init+0x274>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d807      	bhi.n	8002240 <HAL_I2C_Init+0x84>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4a80      	ldr	r2, [pc, #512]	; (8002434 <HAL_I2C_Init+0x278>)
 8002234:	4293      	cmp	r3, r2
 8002236:	bf94      	ite	ls
 8002238:	2301      	movls	r3, #1
 800223a:	2300      	movhi	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	e006      	b.n	800224e <HAL_I2C_Init+0x92>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4a7d      	ldr	r2, [pc, #500]	; (8002438 <HAL_I2C_Init+0x27c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	bf94      	ite	ls
 8002248:	2301      	movls	r3, #1
 800224a:	2300      	movhi	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e0e7      	b.n	8002426 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4a78      	ldr	r2, [pc, #480]	; (800243c <HAL_I2C_Init+0x280>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	0c9b      	lsrs	r3, r3, #18
 8002260:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	430a      	orrs	r2, r1
 8002274:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	4a6a      	ldr	r2, [pc, #424]	; (8002430 <HAL_I2C_Init+0x274>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d802      	bhi.n	8002290 <HAL_I2C_Init+0xd4>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	3301      	adds	r3, #1
 800228e:	e009      	b.n	80022a4 <HAL_I2C_Init+0xe8>
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	4a69      	ldr	r2, [pc, #420]	; (8002440 <HAL_I2C_Init+0x284>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	099b      	lsrs	r3, r3, #6
 80022a2:	3301      	adds	r3, #1
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	430b      	orrs	r3, r1
 80022aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	495c      	ldr	r1, [pc, #368]	; (8002430 <HAL_I2C_Init+0x274>)
 80022c0:	428b      	cmp	r3, r1
 80022c2:	d819      	bhi.n	80022f8 <HAL_I2C_Init+0x13c>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1e59      	subs	r1, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80022d2:	1c59      	adds	r1, r3, #1
 80022d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022d8:	400b      	ands	r3, r1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00a      	beq.n	80022f4 <HAL_I2C_Init+0x138>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1e59      	subs	r1, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ec:	3301      	adds	r3, #1
 80022ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f2:	e051      	b.n	8002398 <HAL_I2C_Init+0x1dc>
 80022f4:	2304      	movs	r3, #4
 80022f6:	e04f      	b.n	8002398 <HAL_I2C_Init+0x1dc>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d111      	bne.n	8002324 <HAL_I2C_Init+0x168>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1e58      	subs	r0, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6859      	ldr	r1, [r3, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	440b      	add	r3, r1
 800230e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002312:	3301      	adds	r3, #1
 8002314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002318:	2b00      	cmp	r3, #0
 800231a:	bf0c      	ite	eq
 800231c:	2301      	moveq	r3, #1
 800231e:	2300      	movne	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	e012      	b.n	800234a <HAL_I2C_Init+0x18e>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1e58      	subs	r0, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	0099      	lsls	r1, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	fbb0 f3f3 	udiv	r3, r0, r3
 800233a:	3301      	adds	r3, #1
 800233c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002340:	2b00      	cmp	r3, #0
 8002342:	bf0c      	ite	eq
 8002344:	2301      	moveq	r3, #1
 8002346:	2300      	movne	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_I2C_Init+0x196>
 800234e:	2301      	movs	r3, #1
 8002350:	e022      	b.n	8002398 <HAL_I2C_Init+0x1dc>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10e      	bne.n	8002378 <HAL_I2C_Init+0x1bc>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1e58      	subs	r0, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6859      	ldr	r1, [r3, #4]
 8002362:	460b      	mov	r3, r1
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	440b      	add	r3, r1
 8002368:	fbb0 f3f3 	udiv	r3, r0, r3
 800236c:	3301      	adds	r3, #1
 800236e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002376:	e00f      	b.n	8002398 <HAL_I2C_Init+0x1dc>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1e58      	subs	r0, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6859      	ldr	r1, [r3, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	0099      	lsls	r1, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	fbb0 f3f3 	udiv	r3, r0, r3
 800238e:	3301      	adds	r3, #1
 8002390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	6809      	ldr	r1, [r1, #0]
 800239c:	4313      	orrs	r3, r2
 800239e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69da      	ldr	r2, [r3, #28]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6911      	ldr	r1, [r2, #16]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68d2      	ldr	r2, [r2, #12]
 80023d2:	4311      	orrs	r1, r2
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	430b      	orrs	r3, r1
 80023da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2220      	movs	r2, #32
 8002412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	000186a0 	.word	0x000186a0
 8002434:	001e847f 	.word	0x001e847f
 8002438:	003d08ff 	.word	0x003d08ff
 800243c:	431bde83 	.word	0x431bde83
 8002440:	10624dd3 	.word	0x10624dd3

08002444 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af02      	add	r7, sp, #8
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	461a      	mov	r2, r3
 8002450:	460b      	mov	r3, r1
 8002452:	817b      	strh	r3, [r7, #10]
 8002454:	4613      	mov	r3, r2
 8002456:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002458:	f7ff fbbe 	bl	8001bd8 <HAL_GetTick>
 800245c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b20      	cmp	r3, #32
 8002468:	f040 80e0 	bne.w	800262c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2319      	movs	r3, #25
 8002472:	2201      	movs	r2, #1
 8002474:	4970      	ldr	r1, [pc, #448]	; (8002638 <HAL_I2C_Master_Transmit+0x1f4>)
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 fa92 	bl	80029a0 <I2C_WaitOnFlagUntilTimeout>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002482:	2302      	movs	r3, #2
 8002484:	e0d3      	b.n	800262e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_I2C_Master_Transmit+0x50>
 8002490:	2302      	movs	r3, #2
 8002492:	e0cc      	b.n	800262e <HAL_I2C_Master_Transmit+0x1ea>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d007      	beq.n	80024ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 0201 	orr.w	r2, r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2221      	movs	r2, #33	; 0x21
 80024ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2210      	movs	r2, #16
 80024d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	893a      	ldrh	r2, [r7, #8]
 80024ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4a50      	ldr	r2, [pc, #320]	; (800263c <HAL_I2C_Master_Transmit+0x1f8>)
 80024fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024fc:	8979      	ldrh	r1, [r7, #10]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	6a3a      	ldr	r2, [r7, #32]
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 f9ca 	bl	800289c <I2C_MasterRequestWrite>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e08d      	b.n	800262e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002512:	2300      	movs	r3, #0
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002528:	e066      	b.n	80025f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	6a39      	ldr	r1, [r7, #32]
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 fb50 	bl	8002bd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00d      	beq.n	8002556 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	2b04      	cmp	r3, #4
 8002540:	d107      	bne.n	8002552 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002550:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e06b      	b.n	800262e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	781a      	ldrb	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b04      	cmp	r3, #4
 8002592:	d11b      	bne.n	80025cc <HAL_I2C_Master_Transmit+0x188>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002598:	2b00      	cmp	r3, #0
 800259a:	d017      	beq.n	80025cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	781a      	ldrb	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	6a39      	ldr	r1, [r7, #32]
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 fb47 	bl	8002c64 <I2C_WaitOnBTFFlagUntilTimeout>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00d      	beq.n	80025f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d107      	bne.n	80025f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e01a      	b.n	800262e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d194      	bne.n	800252a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800260e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	e000      	b.n	800262e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800262c:	2302      	movs	r3, #2
  }
}
 800262e:	4618      	mov	r0, r3
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	00100002 	.word	0x00100002
 800263c:	ffff0000 	.word	0xffff0000

08002640 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	; 0x28
 8002644:	af02      	add	r7, sp, #8
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	460b      	mov	r3, r1
 800264e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002650:	f7ff fac2 	bl	8001bd8 <HAL_GetTick>
 8002654:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b20      	cmp	r3, #32
 8002664:	f040 8111 	bne.w	800288a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	2319      	movs	r3, #25
 800266e:	2201      	movs	r2, #1
 8002670:	4988      	ldr	r1, [pc, #544]	; (8002894 <HAL_I2C_IsDeviceReady+0x254>)
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 f994 	bl	80029a0 <I2C_WaitOnFlagUntilTimeout>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800267e:	2302      	movs	r3, #2
 8002680:	e104      	b.n	800288c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_I2C_IsDeviceReady+0x50>
 800268c:	2302      	movs	r3, #2
 800268e:	e0fd      	b.n	800288c <HAL_I2C_IsDeviceReady+0x24c>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d007      	beq.n	80026b6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0201 	orr.w	r2, r2, #1
 80026b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2224      	movs	r2, #36	; 0x24
 80026ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4a70      	ldr	r2, [pc, #448]	; (8002898 <HAL_I2C_IsDeviceReady+0x258>)
 80026d8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026e8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 f952 	bl	80029a0 <I2C_WaitOnFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00d      	beq.n	800271e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002710:	d103      	bne.n	800271a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002718:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e0b6      	b.n	800288c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800271e:	897b      	ldrh	r3, [r7, #10]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800272c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800272e:	f7ff fa53 	bl	8001bd8 <HAL_GetTick>
 8002732:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b02      	cmp	r3, #2
 8002740:	bf0c      	ite	eq
 8002742:	2301      	moveq	r3, #1
 8002744:	2300      	movne	r3, #0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002758:	bf0c      	ite	eq
 800275a:	2301      	moveq	r3, #1
 800275c:	2300      	movne	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002762:	e025      	b.n	80027b0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002764:	f7ff fa38 	bl	8001bd8 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d302      	bcc.n	800277a <HAL_I2C_IsDeviceReady+0x13a>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d103      	bne.n	8002782 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	22a0      	movs	r2, #160	; 0xa0
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b02      	cmp	r3, #2
 800278e:	bf0c      	ite	eq
 8002790:	2301      	moveq	r3, #1
 8002792:	2300      	movne	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a6:	bf0c      	ite	eq
 80027a8:	2301      	moveq	r3, #1
 80027aa:	2300      	movne	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2ba0      	cmp	r3, #160	; 0xa0
 80027ba:	d005      	beq.n	80027c8 <HAL_I2C_IsDeviceReady+0x188>
 80027bc:	7dfb      	ldrb	r3, [r7, #23]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d102      	bne.n	80027c8 <HAL_I2C_IsDeviceReady+0x188>
 80027c2:	7dbb      	ldrb	r3, [r7, #22]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0cd      	beq.n	8002764 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d129      	bne.n	8002832 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ec:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	2319      	movs	r3, #25
 800280a:	2201      	movs	r2, #1
 800280c:	4921      	ldr	r1, [pc, #132]	; (8002894 <HAL_I2C_IsDeviceReady+0x254>)
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f8c6 	bl	80029a0 <I2C_WaitOnFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e036      	b.n	800288c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	e02c      	b.n	800288c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002840:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800284a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	2319      	movs	r3, #25
 8002852:	2201      	movs	r2, #1
 8002854:	490f      	ldr	r1, [pc, #60]	; (8002894 <HAL_I2C_IsDeviceReady+0x254>)
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 f8a2 	bl	80029a0 <I2C_WaitOnFlagUntilTimeout>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e012      	b.n	800288c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	3301      	adds	r3, #1
 800286a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	429a      	cmp	r2, r3
 8002872:	f4ff af32 	bcc.w	80026da <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800288a:	2302      	movs	r3, #2
  }
}
 800288c:	4618      	mov	r0, r3
 800288e:	3720      	adds	r7, #32
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	00100002 	.word	0x00100002
 8002898:	ffff0000 	.word	0xffff0000

0800289c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af02      	add	r7, sp, #8
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	460b      	mov	r3, r1
 80028aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d006      	beq.n	80028c6 <I2C_MasterRequestWrite+0x2a>
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d003      	beq.n	80028c6 <I2C_MasterRequestWrite+0x2a>
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028c4:	d108      	bne.n	80028d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	e00b      	b.n	80028f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	2b12      	cmp	r3, #18
 80028de:	d107      	bne.n	80028f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 f84f 	bl	80029a0 <I2C_WaitOnFlagUntilTimeout>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00d      	beq.n	8002924 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002916:	d103      	bne.n	8002920 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800291e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e035      	b.n	8002990 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800292c:	d108      	bne.n	8002940 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800292e:	897b      	ldrh	r3, [r7, #10]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	461a      	mov	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800293c:	611a      	str	r2, [r3, #16]
 800293e:	e01b      	b.n	8002978 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002940:	897b      	ldrh	r3, [r7, #10]
 8002942:	11db      	asrs	r3, r3, #7
 8002944:	b2db      	uxtb	r3, r3
 8002946:	f003 0306 	and.w	r3, r3, #6
 800294a:	b2db      	uxtb	r3, r3
 800294c:	f063 030f 	orn	r3, r3, #15
 8002950:	b2da      	uxtb	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	490e      	ldr	r1, [pc, #56]	; (8002998 <I2C_MasterRequestWrite+0xfc>)
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 f898 	bl	8002a94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e010      	b.n	8002990 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800296e:	897b      	ldrh	r3, [r7, #10]
 8002970:	b2da      	uxtb	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	4907      	ldr	r1, [pc, #28]	; (800299c <I2C_MasterRequestWrite+0x100>)
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 f888 	bl	8002a94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	00010008 	.word	0x00010008
 800299c:	00010002 	.word	0x00010002

080029a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	4613      	mov	r3, r2
 80029ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029b0:	e048      	b.n	8002a44 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b8:	d044      	beq.n	8002a44 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ba:	f7ff f90d 	bl	8001bd8 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d302      	bcc.n	80029d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d139      	bne.n	8002a44 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	0c1b      	lsrs	r3, r3, #16
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d10d      	bne.n	80029f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	43da      	mvns	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	4013      	ands	r3, r2
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf0c      	ite	eq
 80029ec:	2301      	moveq	r3, #1
 80029ee:	2300      	movne	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	e00c      	b.n	8002a10 <I2C_WaitOnFlagUntilTimeout+0x70>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	43da      	mvns	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	4013      	ands	r3, r2
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	bf0c      	ite	eq
 8002a08:	2301      	moveq	r3, #1
 8002a0a:	2300      	movne	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d116      	bne.n	8002a44 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	f043 0220 	orr.w	r2, r3, #32
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e023      	b.n	8002a8c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	0c1b      	lsrs	r3, r3, #16
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d10d      	bne.n	8002a6a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	43da      	mvns	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	bf0c      	ite	eq
 8002a60:	2301      	moveq	r3, #1
 8002a62:	2300      	movne	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	461a      	mov	r2, r3
 8002a68:	e00c      	b.n	8002a84 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	43da      	mvns	r2, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	4013      	ands	r3, r2
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	bf0c      	ite	eq
 8002a7c:	2301      	moveq	r3, #1
 8002a7e:	2300      	movne	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	461a      	mov	r2, r3
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d093      	beq.n	80029b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
 8002aa0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002aa2:	e071      	b.n	8002b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab2:	d123      	bne.n	8002afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002acc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	f043 0204 	orr.w	r2, r3, #4
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e067      	b.n	8002bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b02:	d041      	beq.n	8002b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b04:	f7ff f868 	bl	8001bd8 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d302      	bcc.n	8002b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d136      	bne.n	8002b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	0c1b      	lsrs	r3, r3, #16
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d10c      	bne.n	8002b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	bf14      	ite	ne
 8002b36:	2301      	movne	r3, #1
 8002b38:	2300      	moveq	r3, #0
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	e00b      	b.n	8002b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	43da      	mvns	r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	bf14      	ite	ne
 8002b50:	2301      	movne	r3, #1
 8002b52:	2300      	moveq	r3, #0
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d016      	beq.n	8002b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	f043 0220 	orr.w	r2, r3, #32
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e021      	b.n	8002bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	0c1b      	lsrs	r3, r3, #16
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d10c      	bne.n	8002bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	43da      	mvns	r2, r3
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	bf14      	ite	ne
 8002ba4:	2301      	movne	r3, #1
 8002ba6:	2300      	moveq	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	e00b      	b.n	8002bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	43da      	mvns	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	bf14      	ite	ne
 8002bbe:	2301      	movne	r3, #1
 8002bc0:	2300      	moveq	r3, #0
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f47f af6d 	bne.w	8002aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002be0:	e034      	b.n	8002c4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f886 	bl	8002cf4 <I2C_IsAcknowledgeFailed>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e034      	b.n	8002c5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf8:	d028      	beq.n	8002c4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bfa:	f7fe ffed 	bl	8001bd8 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d302      	bcc.n	8002c10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d11d      	bne.n	8002c4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1a:	2b80      	cmp	r3, #128	; 0x80
 8002c1c:	d016      	beq.n	8002c4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	f043 0220 	orr.w	r2, r3, #32
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e007      	b.n	8002c5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c56:	2b80      	cmp	r3, #128	; 0x80
 8002c58:	d1c3      	bne.n	8002be2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c70:	e034      	b.n	8002cdc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f83e 	bl	8002cf4 <I2C_IsAcknowledgeFailed>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e034      	b.n	8002cec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c88:	d028      	beq.n	8002cdc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c8a:	f7fe ffa5 	bl	8001bd8 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d302      	bcc.n	8002ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d11d      	bne.n	8002cdc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d016      	beq.n	8002cdc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	f043 0220 	orr.w	r2, r3, #32
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e007      	b.n	8002cec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d1c3      	bne.n	8002c72 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d0a:	d11b      	bne.n	8002d44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	f043 0204 	orr.w	r2, r3, #4
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e000      	b.n	8002d46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
	...

08002d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0cc      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d68:	4b68      	ldr	r3, [pc, #416]	; (8002f0c <HAL_RCC_ClockConfig+0x1b8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 030f 	and.w	r3, r3, #15
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d90c      	bls.n	8002d90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d76:	4b65      	ldr	r3, [pc, #404]	; (8002f0c <HAL_RCC_ClockConfig+0x1b8>)
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7e:	4b63      	ldr	r3, [pc, #396]	; (8002f0c <HAL_RCC_ClockConfig+0x1b8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d001      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e0b8      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d020      	beq.n	8002dde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002da8:	4b59      	ldr	r3, [pc, #356]	; (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	4a58      	ldr	r2, [pc, #352]	; (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002db2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dc0:	4b53      	ldr	r3, [pc, #332]	; (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	4a52      	ldr	r2, [pc, #328]	; (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dcc:	4b50      	ldr	r3, [pc, #320]	; (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	494d      	ldr	r1, [pc, #308]	; (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d044      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d107      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df2:	4b47      	ldr	r3, [pc, #284]	; (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d119      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e07f      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d003      	beq.n	8002e12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d107      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e12:	4b3f      	ldr	r3, [pc, #252]	; (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d109      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e06f      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e22:	4b3b      	ldr	r3, [pc, #236]	; (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e067      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e32:	4b37      	ldr	r3, [pc, #220]	; (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f023 0203 	bic.w	r2, r3, #3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	4934      	ldr	r1, [pc, #208]	; (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e44:	f7fe fec8 	bl	8001bd8 <HAL_GetTick>
 8002e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4a:	e00a      	b.n	8002e62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e4c:	f7fe fec4 	bl	8001bd8 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e04f      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e62:	4b2b      	ldr	r3, [pc, #172]	; (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 020c 	and.w	r2, r3, #12
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d1eb      	bne.n	8002e4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e74:	4b25      	ldr	r3, [pc, #148]	; (8002f0c <HAL_RCC_ClockConfig+0x1b8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d20c      	bcs.n	8002e9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	4b22      	ldr	r3, [pc, #136]	; (8002f0c <HAL_RCC_ClockConfig+0x1b8>)
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8a:	4b20      	ldr	r3, [pc, #128]	; (8002f0c <HAL_RCC_ClockConfig+0x1b8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e032      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d008      	beq.n	8002eba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ea8:	4b19      	ldr	r3, [pc, #100]	; (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	4916      	ldr	r1, [pc, #88]	; (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d009      	beq.n	8002eda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ec6:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	490e      	ldr	r1, [pc, #56]	; (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eda:	f000 f887 	bl	8002fec <HAL_RCC_GetSysClockFreq>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	091b      	lsrs	r3, r3, #4
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	490a      	ldr	r1, [pc, #40]	; (8002f14 <HAL_RCC_ClockConfig+0x1c0>)
 8002eec:	5ccb      	ldrb	r3, [r1, r3]
 8002eee:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef2:	4a09      	ldr	r2, [pc, #36]	; (8002f18 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ef6:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <HAL_RCC_ClockConfig+0x1c8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe fcba 	bl	8001874 <HAL_InitTick>

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40023c00 	.word	0x40023c00
 8002f10:	40023800 	.word	0x40023800
 8002f14:	0800806c 	.word	0x0800806c
 8002f18:	20000008 	.word	0x20000008
 8002f1c:	2000000c 	.word	0x2000000c

08002f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f24:	4b03      	ldr	r3, [pc, #12]	; (8002f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f26:	681b      	ldr	r3, [r3, #0]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	20000008 	.word	0x20000008

08002f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f3c:	f7ff fff0 	bl	8002f20 <HAL_RCC_GetHCLKFreq>
 8002f40:	4602      	mov	r2, r0
 8002f42:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	0a9b      	lsrs	r3, r3, #10
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	4903      	ldr	r1, [pc, #12]	; (8002f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f4e:	5ccb      	ldrb	r3, [r1, r3]
 8002f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	0800807c 	.word	0x0800807c

08002f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f64:	f7ff ffdc 	bl	8002f20 <HAL_RCC_GetHCLKFreq>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	0b5b      	lsrs	r3, r3, #13
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	4903      	ldr	r1, [pc, #12]	; (8002f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f76:	5ccb      	ldrb	r3, [r1, r3]
 8002f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40023800 	.word	0x40023800
 8002f84:	0800807c 	.word	0x0800807c

08002f88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	220f      	movs	r2, #15
 8002f96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f98:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 0203 	and.w	r2, r3, #3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002fa4:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002fbc:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	08db      	lsrs	r3, r3, #3
 8002fc2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002fca:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <HAL_RCC_GetClockConfig+0x60>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 020f 	and.w	r2, r3, #15
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	601a      	str	r2, [r3, #0]
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40023c00 	.word	0x40023c00

08002fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff0:	b0ae      	sub	sp, #184	; 0xb8
 8002ff2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003006:	2300      	movs	r3, #0
 8003008:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003012:	4bcb      	ldr	r3, [pc, #812]	; (8003340 <HAL_RCC_GetSysClockFreq+0x354>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b0c      	cmp	r3, #12
 800301c:	f200 8206 	bhi.w	800342c <HAL_RCC_GetSysClockFreq+0x440>
 8003020:	a201      	add	r2, pc, #4	; (adr r2, 8003028 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003026:	bf00      	nop
 8003028:	0800305d 	.word	0x0800305d
 800302c:	0800342d 	.word	0x0800342d
 8003030:	0800342d 	.word	0x0800342d
 8003034:	0800342d 	.word	0x0800342d
 8003038:	08003065 	.word	0x08003065
 800303c:	0800342d 	.word	0x0800342d
 8003040:	0800342d 	.word	0x0800342d
 8003044:	0800342d 	.word	0x0800342d
 8003048:	0800306d 	.word	0x0800306d
 800304c:	0800342d 	.word	0x0800342d
 8003050:	0800342d 	.word	0x0800342d
 8003054:	0800342d 	.word	0x0800342d
 8003058:	0800325d 	.word	0x0800325d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800305c:	4bb9      	ldr	r3, [pc, #740]	; (8003344 <HAL_RCC_GetSysClockFreq+0x358>)
 800305e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003062:	e1e7      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003064:	4bb8      	ldr	r3, [pc, #736]	; (8003348 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003066:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800306a:	e1e3      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800306c:	4bb4      	ldr	r3, [pc, #720]	; (8003340 <HAL_RCC_GetSysClockFreq+0x354>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003074:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003078:	4bb1      	ldr	r3, [pc, #708]	; (8003340 <HAL_RCC_GetSysClockFreq+0x354>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d071      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003084:	4bae      	ldr	r3, [pc, #696]	; (8003340 <HAL_RCC_GetSysClockFreq+0x354>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	099b      	lsrs	r3, r3, #6
 800308a:	2200      	movs	r2, #0
 800308c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003090:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003094:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800309c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030a0:	2300      	movs	r3, #0
 80030a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030aa:	4622      	mov	r2, r4
 80030ac:	462b      	mov	r3, r5
 80030ae:	f04f 0000 	mov.w	r0, #0
 80030b2:	f04f 0100 	mov.w	r1, #0
 80030b6:	0159      	lsls	r1, r3, #5
 80030b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030bc:	0150      	lsls	r0, r2, #5
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	4621      	mov	r1, r4
 80030c4:	1a51      	subs	r1, r2, r1
 80030c6:	6439      	str	r1, [r7, #64]	; 0x40
 80030c8:	4629      	mov	r1, r5
 80030ca:	eb63 0301 	sbc.w	r3, r3, r1
 80030ce:	647b      	str	r3, [r7, #68]	; 0x44
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80030dc:	4649      	mov	r1, r9
 80030de:	018b      	lsls	r3, r1, #6
 80030e0:	4641      	mov	r1, r8
 80030e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030e6:	4641      	mov	r1, r8
 80030e8:	018a      	lsls	r2, r1, #6
 80030ea:	4641      	mov	r1, r8
 80030ec:	1a51      	subs	r1, r2, r1
 80030ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80030f0:	4649      	mov	r1, r9
 80030f2:	eb63 0301 	sbc.w	r3, r3, r1
 80030f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003104:	4649      	mov	r1, r9
 8003106:	00cb      	lsls	r3, r1, #3
 8003108:	4641      	mov	r1, r8
 800310a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800310e:	4641      	mov	r1, r8
 8003110:	00ca      	lsls	r2, r1, #3
 8003112:	4610      	mov	r0, r2
 8003114:	4619      	mov	r1, r3
 8003116:	4603      	mov	r3, r0
 8003118:	4622      	mov	r2, r4
 800311a:	189b      	adds	r3, r3, r2
 800311c:	633b      	str	r3, [r7, #48]	; 0x30
 800311e:	462b      	mov	r3, r5
 8003120:	460a      	mov	r2, r1
 8003122:	eb42 0303 	adc.w	r3, r2, r3
 8003126:	637b      	str	r3, [r7, #52]	; 0x34
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003134:	4629      	mov	r1, r5
 8003136:	024b      	lsls	r3, r1, #9
 8003138:	4621      	mov	r1, r4
 800313a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800313e:	4621      	mov	r1, r4
 8003140:	024a      	lsls	r2, r1, #9
 8003142:	4610      	mov	r0, r2
 8003144:	4619      	mov	r1, r3
 8003146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800314a:	2200      	movs	r2, #0
 800314c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003150:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003154:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003158:	f7fd f85a 	bl	8000210 <__aeabi_uldivmod>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4613      	mov	r3, r2
 8003162:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003166:	e067      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003168:	4b75      	ldr	r3, [pc, #468]	; (8003340 <HAL_RCC_GetSysClockFreq+0x354>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	099b      	lsrs	r3, r3, #6
 800316e:	2200      	movs	r2, #0
 8003170:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003174:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003178:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800317c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003180:	67bb      	str	r3, [r7, #120]	; 0x78
 8003182:	2300      	movs	r3, #0
 8003184:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003186:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800318a:	4622      	mov	r2, r4
 800318c:	462b      	mov	r3, r5
 800318e:	f04f 0000 	mov.w	r0, #0
 8003192:	f04f 0100 	mov.w	r1, #0
 8003196:	0159      	lsls	r1, r3, #5
 8003198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800319c:	0150      	lsls	r0, r2, #5
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4621      	mov	r1, r4
 80031a4:	1a51      	subs	r1, r2, r1
 80031a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80031a8:	4629      	mov	r1, r5
 80031aa:	eb63 0301 	sbc.w	r3, r3, r1
 80031ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80031bc:	4649      	mov	r1, r9
 80031be:	018b      	lsls	r3, r1, #6
 80031c0:	4641      	mov	r1, r8
 80031c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031c6:	4641      	mov	r1, r8
 80031c8:	018a      	lsls	r2, r1, #6
 80031ca:	4641      	mov	r1, r8
 80031cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80031d0:	4649      	mov	r1, r9
 80031d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	f04f 0300 	mov.w	r3, #0
 80031de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031ea:	4692      	mov	sl, r2
 80031ec:	469b      	mov	fp, r3
 80031ee:	4623      	mov	r3, r4
 80031f0:	eb1a 0303 	adds.w	r3, sl, r3
 80031f4:	623b      	str	r3, [r7, #32]
 80031f6:	462b      	mov	r3, r5
 80031f8:	eb4b 0303 	adc.w	r3, fp, r3
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800320a:	4629      	mov	r1, r5
 800320c:	028b      	lsls	r3, r1, #10
 800320e:	4621      	mov	r1, r4
 8003210:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003214:	4621      	mov	r1, r4
 8003216:	028a      	lsls	r2, r1, #10
 8003218:	4610      	mov	r0, r2
 800321a:	4619      	mov	r1, r3
 800321c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003220:	2200      	movs	r2, #0
 8003222:	673b      	str	r3, [r7, #112]	; 0x70
 8003224:	677a      	str	r2, [r7, #116]	; 0x74
 8003226:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800322a:	f7fc fff1 	bl	8000210 <__aeabi_uldivmod>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4613      	mov	r3, r2
 8003234:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003238:	4b41      	ldr	r3, [pc, #260]	; (8003340 <HAL_RCC_GetSysClockFreq+0x354>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	0c1b      	lsrs	r3, r3, #16
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	3301      	adds	r3, #1
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800324a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800324e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003252:	fbb2 f3f3 	udiv	r3, r2, r3
 8003256:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800325a:	e0eb      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800325c:	4b38      	ldr	r3, [pc, #224]	; (8003340 <HAL_RCC_GetSysClockFreq+0x354>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003264:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003268:	4b35      	ldr	r3, [pc, #212]	; (8003340 <HAL_RCC_GetSysClockFreq+0x354>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d06b      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003274:	4b32      	ldr	r3, [pc, #200]	; (8003340 <HAL_RCC_GetSysClockFreq+0x354>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	099b      	lsrs	r3, r3, #6
 800327a:	2200      	movs	r2, #0
 800327c:	66bb      	str	r3, [r7, #104]	; 0x68
 800327e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003280:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003286:	663b      	str	r3, [r7, #96]	; 0x60
 8003288:	2300      	movs	r3, #0
 800328a:	667b      	str	r3, [r7, #100]	; 0x64
 800328c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003290:	4622      	mov	r2, r4
 8003292:	462b      	mov	r3, r5
 8003294:	f04f 0000 	mov.w	r0, #0
 8003298:	f04f 0100 	mov.w	r1, #0
 800329c:	0159      	lsls	r1, r3, #5
 800329e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032a2:	0150      	lsls	r0, r2, #5
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4621      	mov	r1, r4
 80032aa:	1a51      	subs	r1, r2, r1
 80032ac:	61b9      	str	r1, [r7, #24]
 80032ae:	4629      	mov	r1, r5
 80032b0:	eb63 0301 	sbc.w	r3, r3, r1
 80032b4:	61fb      	str	r3, [r7, #28]
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80032c2:	4659      	mov	r1, fp
 80032c4:	018b      	lsls	r3, r1, #6
 80032c6:	4651      	mov	r1, sl
 80032c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032cc:	4651      	mov	r1, sl
 80032ce:	018a      	lsls	r2, r1, #6
 80032d0:	4651      	mov	r1, sl
 80032d2:	ebb2 0801 	subs.w	r8, r2, r1
 80032d6:	4659      	mov	r1, fp
 80032d8:	eb63 0901 	sbc.w	r9, r3, r1
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032f0:	4690      	mov	r8, r2
 80032f2:	4699      	mov	r9, r3
 80032f4:	4623      	mov	r3, r4
 80032f6:	eb18 0303 	adds.w	r3, r8, r3
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	462b      	mov	r3, r5
 80032fe:	eb49 0303 	adc.w	r3, r9, r3
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003310:	4629      	mov	r1, r5
 8003312:	024b      	lsls	r3, r1, #9
 8003314:	4621      	mov	r1, r4
 8003316:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800331a:	4621      	mov	r1, r4
 800331c:	024a      	lsls	r2, r1, #9
 800331e:	4610      	mov	r0, r2
 8003320:	4619      	mov	r1, r3
 8003322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003326:	2200      	movs	r2, #0
 8003328:	65bb      	str	r3, [r7, #88]	; 0x58
 800332a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800332c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003330:	f7fc ff6e 	bl	8000210 <__aeabi_uldivmod>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4613      	mov	r3, r2
 800333a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800333e:	e065      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x420>
 8003340:	40023800 	.word	0x40023800
 8003344:	00f42400 	.word	0x00f42400
 8003348:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800334c:	4b3d      	ldr	r3, [pc, #244]	; (8003444 <HAL_RCC_GetSysClockFreq+0x458>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	099b      	lsrs	r3, r3, #6
 8003352:	2200      	movs	r2, #0
 8003354:	4618      	mov	r0, r3
 8003356:	4611      	mov	r1, r2
 8003358:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800335c:	653b      	str	r3, [r7, #80]	; 0x50
 800335e:	2300      	movs	r3, #0
 8003360:	657b      	str	r3, [r7, #84]	; 0x54
 8003362:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003366:	4642      	mov	r2, r8
 8003368:	464b      	mov	r3, r9
 800336a:	f04f 0000 	mov.w	r0, #0
 800336e:	f04f 0100 	mov.w	r1, #0
 8003372:	0159      	lsls	r1, r3, #5
 8003374:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003378:	0150      	lsls	r0, r2, #5
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4641      	mov	r1, r8
 8003380:	1a51      	subs	r1, r2, r1
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	4649      	mov	r1, r9
 8003386:	eb63 0301 	sbc.w	r3, r3, r1
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003398:	4659      	mov	r1, fp
 800339a:	018b      	lsls	r3, r1, #6
 800339c:	4651      	mov	r1, sl
 800339e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033a2:	4651      	mov	r1, sl
 80033a4:	018a      	lsls	r2, r1, #6
 80033a6:	4651      	mov	r1, sl
 80033a8:	1a54      	subs	r4, r2, r1
 80033aa:	4659      	mov	r1, fp
 80033ac:	eb63 0501 	sbc.w	r5, r3, r1
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	00eb      	lsls	r3, r5, #3
 80033ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033be:	00e2      	lsls	r2, r4, #3
 80033c0:	4614      	mov	r4, r2
 80033c2:	461d      	mov	r5, r3
 80033c4:	4643      	mov	r3, r8
 80033c6:	18e3      	adds	r3, r4, r3
 80033c8:	603b      	str	r3, [r7, #0]
 80033ca:	464b      	mov	r3, r9
 80033cc:	eb45 0303 	adc.w	r3, r5, r3
 80033d0:	607b      	str	r3, [r7, #4]
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033de:	4629      	mov	r1, r5
 80033e0:	028b      	lsls	r3, r1, #10
 80033e2:	4621      	mov	r1, r4
 80033e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033e8:	4621      	mov	r1, r4
 80033ea:	028a      	lsls	r2, r1, #10
 80033ec:	4610      	mov	r0, r2
 80033ee:	4619      	mov	r1, r3
 80033f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033f4:	2200      	movs	r2, #0
 80033f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80033f8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80033fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033fe:	f7fc ff07 	bl	8000210 <__aeabi_uldivmod>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4613      	mov	r3, r2
 8003408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800340c:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <HAL_RCC_GetSysClockFreq+0x458>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	0f1b      	lsrs	r3, r3, #28
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800341a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800341e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003422:	fbb2 f3f3 	udiv	r3, r2, r3
 8003426:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800342a:	e003      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <HAL_RCC_GetSysClockFreq+0x45c>)
 800342e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003432:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003434:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003438:	4618      	mov	r0, r3
 800343a:	37b8      	adds	r7, #184	; 0xb8
 800343c:	46bd      	mov	sp, r7
 800343e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003442:	bf00      	nop
 8003444:	40023800 	.word	0x40023800
 8003448:	00f42400 	.word	0x00f42400

0800344c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e28d      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 8083 	beq.w	8003572 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800346c:	4b94      	ldr	r3, [pc, #592]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 030c 	and.w	r3, r3, #12
 8003474:	2b04      	cmp	r3, #4
 8003476:	d019      	beq.n	80034ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003478:	4b91      	ldr	r3, [pc, #580]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003480:	2b08      	cmp	r3, #8
 8003482:	d106      	bne.n	8003492 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003484:	4b8e      	ldr	r3, [pc, #568]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800348c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003490:	d00c      	beq.n	80034ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003492:	4b8b      	ldr	r3, [pc, #556]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800349a:	2b0c      	cmp	r3, #12
 800349c:	d112      	bne.n	80034c4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800349e:	4b88      	ldr	r3, [pc, #544]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034aa:	d10b      	bne.n	80034c4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ac:	4b84      	ldr	r3, [pc, #528]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d05b      	beq.n	8003570 <HAL_RCC_OscConfig+0x124>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d157      	bne.n	8003570 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e25a      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034cc:	d106      	bne.n	80034dc <HAL_RCC_OscConfig+0x90>
 80034ce:	4b7c      	ldr	r3, [pc, #496]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a7b      	ldr	r2, [pc, #492]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80034d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	e01d      	b.n	8003518 <HAL_RCC_OscConfig+0xcc>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034e4:	d10c      	bne.n	8003500 <HAL_RCC_OscConfig+0xb4>
 80034e6:	4b76      	ldr	r3, [pc, #472]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a75      	ldr	r2, [pc, #468]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80034ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	4b73      	ldr	r3, [pc, #460]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a72      	ldr	r2, [pc, #456]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80034f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	e00b      	b.n	8003518 <HAL_RCC_OscConfig+0xcc>
 8003500:	4b6f      	ldr	r3, [pc, #444]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a6e      	ldr	r2, [pc, #440]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	4b6c      	ldr	r3, [pc, #432]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a6b      	ldr	r2, [pc, #428]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d013      	beq.n	8003548 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003520:	f7fe fb5a 	bl	8001bd8 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003528:	f7fe fb56 	bl	8001bd8 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b64      	cmp	r3, #100	; 0x64
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e21f      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	4b61      	ldr	r3, [pc, #388]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0f0      	beq.n	8003528 <HAL_RCC_OscConfig+0xdc>
 8003546:	e014      	b.n	8003572 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003548:	f7fe fb46 	bl	8001bd8 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003550:	f7fe fb42 	bl	8001bd8 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b64      	cmp	r3, #100	; 0x64
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e20b      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003562:	4b57      	ldr	r3, [pc, #348]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f0      	bne.n	8003550 <HAL_RCC_OscConfig+0x104>
 800356e:	e000      	b.n	8003572 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d06f      	beq.n	800365e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800357e:	4b50      	ldr	r3, [pc, #320]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b00      	cmp	r3, #0
 8003588:	d017      	beq.n	80035ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800358a:	4b4d      	ldr	r3, [pc, #308]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003592:	2b08      	cmp	r3, #8
 8003594:	d105      	bne.n	80035a2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003596:	4b4a      	ldr	r3, [pc, #296]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00b      	beq.n	80035ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035a2:	4b47      	ldr	r3, [pc, #284]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035aa:	2b0c      	cmp	r3, #12
 80035ac:	d11c      	bne.n	80035e8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ae:	4b44      	ldr	r3, [pc, #272]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d116      	bne.n	80035e8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ba:	4b41      	ldr	r3, [pc, #260]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <HAL_RCC_OscConfig+0x186>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d001      	beq.n	80035d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e1d3      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d2:	4b3b      	ldr	r3, [pc, #236]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4937      	ldr	r1, [pc, #220]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035e6:	e03a      	b.n	800365e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d020      	beq.n	8003632 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035f0:	4b34      	ldr	r3, [pc, #208]	; (80036c4 <HAL_RCC_OscConfig+0x278>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f6:	f7fe faef 	bl	8001bd8 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035fe:	f7fe faeb 	bl	8001bd8 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e1b4      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003610:	4b2b      	ldr	r3, [pc, #172]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361c:	4b28      	ldr	r3, [pc, #160]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	4925      	ldr	r1, [pc, #148]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 800362c:	4313      	orrs	r3, r2
 800362e:	600b      	str	r3, [r1, #0]
 8003630:	e015      	b.n	800365e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003632:	4b24      	ldr	r3, [pc, #144]	; (80036c4 <HAL_RCC_OscConfig+0x278>)
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fe face 	bl	8001bd8 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003640:	f7fe faca 	bl	8001bd8 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e193      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003652:	4b1b      	ldr	r3, [pc, #108]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d036      	beq.n	80036d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d016      	beq.n	80036a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003672:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 8003674:	2201      	movs	r2, #1
 8003676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003678:	f7fe faae 	bl	8001bd8 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003680:	f7fe faaa 	bl	8001bd8 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e173      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003692:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0x234>
 800369e:	e01b      	b.n	80036d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036a0:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a6:	f7fe fa97 	bl	8001bd8 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ac:	e00e      	b.n	80036cc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036ae:	f7fe fa93 	bl	8001bd8 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d907      	bls.n	80036cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e15c      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
 80036c0:	40023800 	.word	0x40023800
 80036c4:	42470000 	.word	0x42470000
 80036c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036cc:	4b8a      	ldr	r3, [pc, #552]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 80036ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1ea      	bne.n	80036ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 8097 	beq.w	8003814 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036e6:	2300      	movs	r3, #0
 80036e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ea:	4b83      	ldr	r3, [pc, #524]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10f      	bne.n	8003716 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	4b7f      	ldr	r3, [pc, #508]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	4a7e      	ldr	r2, [pc, #504]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 8003700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003704:	6413      	str	r3, [r2, #64]	; 0x40
 8003706:	4b7c      	ldr	r3, [pc, #496]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370e:	60bb      	str	r3, [r7, #8]
 8003710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003712:	2301      	movs	r3, #1
 8003714:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003716:	4b79      	ldr	r3, [pc, #484]	; (80038fc <HAL_RCC_OscConfig+0x4b0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371e:	2b00      	cmp	r3, #0
 8003720:	d118      	bne.n	8003754 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003722:	4b76      	ldr	r3, [pc, #472]	; (80038fc <HAL_RCC_OscConfig+0x4b0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a75      	ldr	r2, [pc, #468]	; (80038fc <HAL_RCC_OscConfig+0x4b0>)
 8003728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800372c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800372e:	f7fe fa53 	bl	8001bd8 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003736:	f7fe fa4f 	bl	8001bd8 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e118      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003748:	4b6c      	ldr	r3, [pc, #432]	; (80038fc <HAL_RCC_OscConfig+0x4b0>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0f0      	beq.n	8003736 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d106      	bne.n	800376a <HAL_RCC_OscConfig+0x31e>
 800375c:	4b66      	ldr	r3, [pc, #408]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 800375e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003760:	4a65      	ldr	r2, [pc, #404]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 8003762:	f043 0301 	orr.w	r3, r3, #1
 8003766:	6713      	str	r3, [r2, #112]	; 0x70
 8003768:	e01c      	b.n	80037a4 <HAL_RCC_OscConfig+0x358>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2b05      	cmp	r3, #5
 8003770:	d10c      	bne.n	800378c <HAL_RCC_OscConfig+0x340>
 8003772:	4b61      	ldr	r3, [pc, #388]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 8003774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003776:	4a60      	ldr	r2, [pc, #384]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 8003778:	f043 0304 	orr.w	r3, r3, #4
 800377c:	6713      	str	r3, [r2, #112]	; 0x70
 800377e:	4b5e      	ldr	r3, [pc, #376]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 8003780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003782:	4a5d      	ldr	r2, [pc, #372]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	6713      	str	r3, [r2, #112]	; 0x70
 800378a:	e00b      	b.n	80037a4 <HAL_RCC_OscConfig+0x358>
 800378c:	4b5a      	ldr	r3, [pc, #360]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 800378e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003790:	4a59      	ldr	r2, [pc, #356]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 8003792:	f023 0301 	bic.w	r3, r3, #1
 8003796:	6713      	str	r3, [r2, #112]	; 0x70
 8003798:	4b57      	ldr	r3, [pc, #348]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 800379a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379c:	4a56      	ldr	r2, [pc, #344]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 800379e:	f023 0304 	bic.w	r3, r3, #4
 80037a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d015      	beq.n	80037d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ac:	f7fe fa14 	bl	8001bd8 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b2:	e00a      	b.n	80037ca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037b4:	f7fe fa10 	bl	8001bd8 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e0d7      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ca:	4b4b      	ldr	r3, [pc, #300]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0ee      	beq.n	80037b4 <HAL_RCC_OscConfig+0x368>
 80037d6:	e014      	b.n	8003802 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d8:	f7fe f9fe 	bl	8001bd8 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037de:	e00a      	b.n	80037f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037e0:	f7fe f9fa 	bl	8001bd8 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e0c1      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f6:	4b40      	ldr	r3, [pc, #256]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 80037f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1ee      	bne.n	80037e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003802:	7dfb      	ldrb	r3, [r7, #23]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d105      	bne.n	8003814 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003808:	4b3b      	ldr	r3, [pc, #236]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	4a3a      	ldr	r2, [pc, #232]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 800380e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003812:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 80ad 	beq.w	8003978 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800381e:	4b36      	ldr	r3, [pc, #216]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
 8003826:	2b08      	cmp	r3, #8
 8003828:	d060      	beq.n	80038ec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d145      	bne.n	80038be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003832:	4b33      	ldr	r3, [pc, #204]	; (8003900 <HAL_RCC_OscConfig+0x4b4>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003838:	f7fe f9ce 	bl	8001bd8 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003840:	f7fe f9ca 	bl	8001bd8 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e093      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003852:	4b29      	ldr	r3, [pc, #164]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f0      	bne.n	8003840 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69da      	ldr	r2, [r3, #28]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	019b      	lsls	r3, r3, #6
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003874:	085b      	lsrs	r3, r3, #1
 8003876:	3b01      	subs	r3, #1
 8003878:	041b      	lsls	r3, r3, #16
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	061b      	lsls	r3, r3, #24
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	071b      	lsls	r3, r3, #28
 800388a:	491b      	ldr	r1, [pc, #108]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 800388c:	4313      	orrs	r3, r2
 800388e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003890:	4b1b      	ldr	r3, [pc, #108]	; (8003900 <HAL_RCC_OscConfig+0x4b4>)
 8003892:	2201      	movs	r2, #1
 8003894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003896:	f7fe f99f 	bl	8001bd8 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800389e:	f7fe f99b 	bl	8001bd8 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e064      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b0:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0f0      	beq.n	800389e <HAL_RCC_OscConfig+0x452>
 80038bc:	e05c      	b.n	8003978 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038be:	4b10      	ldr	r3, [pc, #64]	; (8003900 <HAL_RCC_OscConfig+0x4b4>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c4:	f7fe f988 	bl	8001bd8 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038cc:	f7fe f984 	bl	8001bd8 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e04d      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038de:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_RCC_OscConfig+0x4ac>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x480>
 80038ea:	e045      	b.n	8003978 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d107      	bne.n	8003904 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e040      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
 80038f8:	40023800 	.word	0x40023800
 80038fc:	40007000 	.word	0x40007000
 8003900:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003904:	4b1f      	ldr	r3, [pc, #124]	; (8003984 <HAL_RCC_OscConfig+0x538>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d030      	beq.n	8003974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800391c:	429a      	cmp	r2, r3
 800391e:	d129      	bne.n	8003974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392a:	429a      	cmp	r2, r3
 800392c:	d122      	bne.n	8003974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003934:	4013      	ands	r3, r2
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800393a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800393c:	4293      	cmp	r3, r2
 800393e:	d119      	bne.n	8003974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	085b      	lsrs	r3, r3, #1
 800394c:	3b01      	subs	r3, #1
 800394e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003950:	429a      	cmp	r2, r3
 8003952:	d10f      	bne.n	8003974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003960:	429a      	cmp	r2, r3
 8003962:	d107      	bne.n	8003974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d001      	beq.n	8003978 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40023800 	.word	0x40023800

08003988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e041      	b.n	8003a1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d106      	bne.n	80039b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f839 	bl	8003a26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3304      	adds	r3, #4
 80039c4:	4619      	mov	r1, r3
 80039c6:	4610      	mov	r0, r2
 80039c8:	f000 f9c0 	bl	8003d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d001      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e04e      	b.n	8003af2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a23      	ldr	r2, [pc, #140]	; (8003b00 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d022      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x80>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a7e:	d01d      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x80>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a1f      	ldr	r2, [pc, #124]	; (8003b04 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d018      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x80>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a1e      	ldr	r2, [pc, #120]	; (8003b08 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d013      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x80>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a1c      	ldr	r2, [pc, #112]	; (8003b0c <HAL_TIM_Base_Start_IT+0xd0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00e      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x80>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a1b      	ldr	r2, [pc, #108]	; (8003b10 <HAL_TIM_Base_Start_IT+0xd4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d009      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x80>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a19      	ldr	r2, [pc, #100]	; (8003b14 <HAL_TIM_Base_Start_IT+0xd8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d004      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x80>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a18      	ldr	r2, [pc, #96]	; (8003b18 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d111      	bne.n	8003ae0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2b06      	cmp	r3, #6
 8003acc:	d010      	beq.n	8003af0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ade:	e007      	b.n	8003af0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	40010000 	.word	0x40010000
 8003b04:	40000400 	.word	0x40000400
 8003b08:	40000800 	.word	0x40000800
 8003b0c:	40000c00 	.word	0x40000c00
 8003b10:	40010400 	.word	0x40010400
 8003b14:	40014000 	.word	0x40014000
 8003b18:	40001800 	.word	0x40001800

08003b1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d020      	beq.n	8003b80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d01b      	beq.n	8003b80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0202 	mvn.w	r2, #2
 8003b50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f8d2 	bl	8003d10 <HAL_TIM_IC_CaptureCallback>
 8003b6c:	e005      	b.n	8003b7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f8c4 	bl	8003cfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f8d5 	bl	8003d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d020      	beq.n	8003bcc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01b      	beq.n	8003bcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f06f 0204 	mvn.w	r2, #4
 8003b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f8ac 	bl	8003d10 <HAL_TIM_IC_CaptureCallback>
 8003bb8:	e005      	b.n	8003bc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f89e 	bl	8003cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f8af 	bl	8003d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d020      	beq.n	8003c18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d01b      	beq.n	8003c18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0208 	mvn.w	r2, #8
 8003be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2204      	movs	r2, #4
 8003bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f886 	bl	8003d10 <HAL_TIM_IC_CaptureCallback>
 8003c04:	e005      	b.n	8003c12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f878 	bl	8003cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f889 	bl	8003d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f003 0310 	and.w	r3, r3, #16
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d020      	beq.n	8003c64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01b      	beq.n	8003c64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0210 	mvn.w	r2, #16
 8003c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2208      	movs	r2, #8
 8003c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f860 	bl	8003d10 <HAL_TIM_IC_CaptureCallback>
 8003c50:	e005      	b.n	8003c5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f852 	bl	8003cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f863 	bl	8003d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00c      	beq.n	8003c88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d007      	beq.n	8003c88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0201 	mvn.w	r2, #1
 8003c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fd fa5a 	bl	800113c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00c      	beq.n	8003cac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d007      	beq.n	8003cac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f906 	bl	8003eb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00c      	beq.n	8003cd0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d007      	beq.n	8003cd0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f834 	bl	8003d38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f003 0320 	and.w	r3, r3, #32
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00c      	beq.n	8003cf4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f003 0320 	and.w	r3, r3, #32
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d007      	beq.n	8003cf4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f06f 0220 	mvn.w	r2, #32
 8003cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f8d8 	bl	8003ea4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cf4:	bf00      	nop
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a46      	ldr	r2, [pc, #280]	; (8003e78 <TIM_Base_SetConfig+0x12c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d013      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6a:	d00f      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a43      	ldr	r2, [pc, #268]	; (8003e7c <TIM_Base_SetConfig+0x130>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00b      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a42      	ldr	r2, [pc, #264]	; (8003e80 <TIM_Base_SetConfig+0x134>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d007      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a41      	ldr	r2, [pc, #260]	; (8003e84 <TIM_Base_SetConfig+0x138>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d003      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a40      	ldr	r2, [pc, #256]	; (8003e88 <TIM_Base_SetConfig+0x13c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d108      	bne.n	8003d9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a35      	ldr	r2, [pc, #212]	; (8003e78 <TIM_Base_SetConfig+0x12c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d02b      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dac:	d027      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a32      	ldr	r2, [pc, #200]	; (8003e7c <TIM_Base_SetConfig+0x130>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d023      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a31      	ldr	r2, [pc, #196]	; (8003e80 <TIM_Base_SetConfig+0x134>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d01f      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a30      	ldr	r2, [pc, #192]	; (8003e84 <TIM_Base_SetConfig+0x138>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d01b      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a2f      	ldr	r2, [pc, #188]	; (8003e88 <TIM_Base_SetConfig+0x13c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d017      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a2e      	ldr	r2, [pc, #184]	; (8003e8c <TIM_Base_SetConfig+0x140>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d013      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a2d      	ldr	r2, [pc, #180]	; (8003e90 <TIM_Base_SetConfig+0x144>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00f      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a2c      	ldr	r2, [pc, #176]	; (8003e94 <TIM_Base_SetConfig+0x148>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00b      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a2b      	ldr	r2, [pc, #172]	; (8003e98 <TIM_Base_SetConfig+0x14c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d007      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a2a      	ldr	r2, [pc, #168]	; (8003e9c <TIM_Base_SetConfig+0x150>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d003      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a29      	ldr	r2, [pc, #164]	; (8003ea0 <TIM_Base_SetConfig+0x154>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d108      	bne.n	8003e10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a10      	ldr	r2, [pc, #64]	; (8003e78 <TIM_Base_SetConfig+0x12c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d003      	beq.n	8003e44 <TIM_Base_SetConfig+0xf8>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a12      	ldr	r2, [pc, #72]	; (8003e88 <TIM_Base_SetConfig+0x13c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d103      	bne.n	8003e4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d105      	bne.n	8003e6a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f023 0201 	bic.w	r2, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	611a      	str	r2, [r3, #16]
  }
}
 8003e6a:	bf00      	nop
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40010000 	.word	0x40010000
 8003e7c:	40000400 	.word	0x40000400
 8003e80:	40000800 	.word	0x40000800
 8003e84:	40000c00 	.word	0x40000c00
 8003e88:	40010400 	.word	0x40010400
 8003e8c:	40014000 	.word	0x40014000
 8003e90:	40014400 	.word	0x40014400
 8003e94:	40014800 	.word	0x40014800
 8003e98:	40001800 	.word	0x40001800
 8003e9c:	40001c00 	.word	0x40001c00
 8003ea0:	40002000 	.word	0x40002000

08003ea4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e042      	b.n	8003f64 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fd fc76 	bl	80017e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2224      	movs	r2, #36	; 0x24
 8003efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f973 	bl	80041fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695a      	ldr	r2, [r3, #20]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08a      	sub	sp, #40	; 0x28
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	603b      	str	r3, [r7, #0]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b20      	cmp	r3, #32
 8003f8a:	d175      	bne.n	8004078 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <HAL_UART_Transmit+0x2c>
 8003f92:	88fb      	ldrh	r3, [r7, #6]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e06e      	b.n	800407a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2221      	movs	r2, #33	; 0x21
 8003fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003faa:	f7fd fe15 	bl	8001bd8 <HAL_GetTick>
 8003fae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	88fa      	ldrh	r2, [r7, #6]
 8003fb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	88fa      	ldrh	r2, [r7, #6]
 8003fba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc4:	d108      	bne.n	8003fd8 <HAL_UART_Transmit+0x6c>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d104      	bne.n	8003fd8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	61bb      	str	r3, [r7, #24]
 8003fd6:	e003      	b.n	8003fe0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fe0:	e02e      	b.n	8004040 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2180      	movs	r1, #128	; 0x80
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 f848 	bl	8004082 <UART_WaitOnFlagUntilTimeout>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e03a      	b.n	800407a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10b      	bne.n	8004022 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004018:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	3302      	adds	r3, #2
 800401e:	61bb      	str	r3, [r7, #24]
 8004020:	e007      	b.n	8004032 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	781a      	ldrb	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	3301      	adds	r3, #1
 8004030:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004036:	b29b      	uxth	r3, r3
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1cb      	bne.n	8003fe2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2200      	movs	r2, #0
 8004052:	2140      	movs	r1, #64	; 0x40
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f814 	bl	8004082 <UART_WaitOnFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e006      	b.n	800407a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	e000      	b.n	800407a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004078:	2302      	movs	r3, #2
  }
}
 800407a:	4618      	mov	r0, r3
 800407c:	3720      	adds	r7, #32
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b086      	sub	sp, #24
 8004086:	af00      	add	r7, sp, #0
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	603b      	str	r3, [r7, #0]
 800408e:	4613      	mov	r3, r2
 8004090:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004092:	e03b      	b.n	800410c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409a:	d037      	beq.n	800410c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800409c:	f7fd fd9c 	bl	8001bd8 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	6a3a      	ldr	r2, [r7, #32]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d302      	bcc.n	80040b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e03a      	b.n	800412c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d023      	beq.n	800410c <UART_WaitOnFlagUntilTimeout+0x8a>
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b80      	cmp	r3, #128	; 0x80
 80040c8:	d020      	beq.n	800410c <UART_WaitOnFlagUntilTimeout+0x8a>
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b40      	cmp	r3, #64	; 0x40
 80040ce:	d01d      	beq.n	800410c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d116      	bne.n	800410c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80040de:	2300      	movs	r3, #0
 80040e0:	617b      	str	r3, [r7, #20]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f81d 	bl	8004134 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2208      	movs	r2, #8
 80040fe:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e00f      	b.n	800412c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	4013      	ands	r3, r2
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	429a      	cmp	r2, r3
 800411a:	bf0c      	ite	eq
 800411c:	2301      	moveq	r3, #1
 800411e:	2300      	movne	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	461a      	mov	r2, r3
 8004124:	79fb      	ldrb	r3, [r7, #7]
 8004126:	429a      	cmp	r2, r3
 8004128:	d0b4      	beq.n	8004094 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004134:	b480      	push	{r7}
 8004136:	b095      	sub	sp, #84	; 0x54
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	330c      	adds	r3, #12
 8004142:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004146:	e853 3f00 	ldrex	r3, [r3]
 800414a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800414c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	330c      	adds	r3, #12
 800415a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800415c:	643a      	str	r2, [r7, #64]	; 0x40
 800415e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004160:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004162:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004164:	e841 2300 	strex	r3, r2, [r1]
 8004168:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e5      	bne.n	800413c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3314      	adds	r3, #20
 8004176:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f023 0301 	bic.w	r3, r3, #1
 8004186:	64bb      	str	r3, [r7, #72]	; 0x48
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3314      	adds	r3, #20
 800418e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004190:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004192:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004194:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004198:	e841 2300 	strex	r3, r2, [r1]
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e5      	bne.n	8004170 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d119      	bne.n	80041e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	330c      	adds	r3, #12
 80041b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	e853 3f00 	ldrex	r3, [r3]
 80041ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f023 0310 	bic.w	r3, r3, #16
 80041c2:	647b      	str	r3, [r7, #68]	; 0x44
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	330c      	adds	r3, #12
 80041ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041cc:	61ba      	str	r2, [r7, #24]
 80041ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d0:	6979      	ldr	r1, [r7, #20]
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	e841 2300 	strex	r3, r2, [r1]
 80041d8:	613b      	str	r3, [r7, #16]
   return(result);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1e5      	bne.n	80041ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041ee:	bf00      	nop
 80041f0:	3754      	adds	r7, #84	; 0x54
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
	...

080041fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004200:	b0c0      	sub	sp, #256	; 0x100
 8004202:	af00      	add	r7, sp, #0
 8004204:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004218:	68d9      	ldr	r1, [r3, #12]
 800421a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	ea40 0301 	orr.w	r3, r0, r1
 8004224:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	431a      	orrs	r2, r3
 8004234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	431a      	orrs	r2, r3
 800423c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	4313      	orrs	r3, r2
 8004244:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004254:	f021 010c 	bic.w	r1, r1, #12
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004262:	430b      	orrs	r3, r1
 8004264:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004276:	6999      	ldr	r1, [r3, #24]
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	ea40 0301 	orr.w	r3, r0, r1
 8004282:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4b8f      	ldr	r3, [pc, #572]	; (80044c8 <UART_SetConfig+0x2cc>)
 800428c:	429a      	cmp	r2, r3
 800428e:	d005      	beq.n	800429c <UART_SetConfig+0xa0>
 8004290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	4b8d      	ldr	r3, [pc, #564]	; (80044cc <UART_SetConfig+0x2d0>)
 8004298:	429a      	cmp	r2, r3
 800429a:	d104      	bne.n	80042a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800429c:	f7fe fe60 	bl	8002f60 <HAL_RCC_GetPCLK2Freq>
 80042a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80042a4:	e003      	b.n	80042ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042a6:	f7fe fe47 	bl	8002f38 <HAL_RCC_GetPCLK1Freq>
 80042aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042b8:	f040 810c 	bne.w	80044d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042c0:	2200      	movs	r2, #0
 80042c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80042ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80042ce:	4622      	mov	r2, r4
 80042d0:	462b      	mov	r3, r5
 80042d2:	1891      	adds	r1, r2, r2
 80042d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80042d6:	415b      	adcs	r3, r3
 80042d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042de:	4621      	mov	r1, r4
 80042e0:	eb12 0801 	adds.w	r8, r2, r1
 80042e4:	4629      	mov	r1, r5
 80042e6:	eb43 0901 	adc.w	r9, r3, r1
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042fe:	4690      	mov	r8, r2
 8004300:	4699      	mov	r9, r3
 8004302:	4623      	mov	r3, r4
 8004304:	eb18 0303 	adds.w	r3, r8, r3
 8004308:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800430c:	462b      	mov	r3, r5
 800430e:	eb49 0303 	adc.w	r3, r9, r3
 8004312:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004322:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004326:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800432a:	460b      	mov	r3, r1
 800432c:	18db      	adds	r3, r3, r3
 800432e:	653b      	str	r3, [r7, #80]	; 0x50
 8004330:	4613      	mov	r3, r2
 8004332:	eb42 0303 	adc.w	r3, r2, r3
 8004336:	657b      	str	r3, [r7, #84]	; 0x54
 8004338:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800433c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004340:	f7fb ff66 	bl	8000210 <__aeabi_uldivmod>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4b61      	ldr	r3, [pc, #388]	; (80044d0 <UART_SetConfig+0x2d4>)
 800434a:	fba3 2302 	umull	r2, r3, r3, r2
 800434e:	095b      	lsrs	r3, r3, #5
 8004350:	011c      	lsls	r4, r3, #4
 8004352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004356:	2200      	movs	r2, #0
 8004358:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800435c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004360:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004364:	4642      	mov	r2, r8
 8004366:	464b      	mov	r3, r9
 8004368:	1891      	adds	r1, r2, r2
 800436a:	64b9      	str	r1, [r7, #72]	; 0x48
 800436c:	415b      	adcs	r3, r3
 800436e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004370:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004374:	4641      	mov	r1, r8
 8004376:	eb12 0a01 	adds.w	sl, r2, r1
 800437a:	4649      	mov	r1, r9
 800437c:	eb43 0b01 	adc.w	fp, r3, r1
 8004380:	f04f 0200 	mov.w	r2, #0
 8004384:	f04f 0300 	mov.w	r3, #0
 8004388:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800438c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004390:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004394:	4692      	mov	sl, r2
 8004396:	469b      	mov	fp, r3
 8004398:	4643      	mov	r3, r8
 800439a:	eb1a 0303 	adds.w	r3, sl, r3
 800439e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043a2:	464b      	mov	r3, r9
 80043a4:	eb4b 0303 	adc.w	r3, fp, r3
 80043a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80043ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80043bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80043c0:	460b      	mov	r3, r1
 80043c2:	18db      	adds	r3, r3, r3
 80043c4:	643b      	str	r3, [r7, #64]	; 0x40
 80043c6:	4613      	mov	r3, r2
 80043c8:	eb42 0303 	adc.w	r3, r2, r3
 80043cc:	647b      	str	r3, [r7, #68]	; 0x44
 80043ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80043d6:	f7fb ff1b 	bl	8000210 <__aeabi_uldivmod>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4611      	mov	r1, r2
 80043e0:	4b3b      	ldr	r3, [pc, #236]	; (80044d0 <UART_SetConfig+0x2d4>)
 80043e2:	fba3 2301 	umull	r2, r3, r3, r1
 80043e6:	095b      	lsrs	r3, r3, #5
 80043e8:	2264      	movs	r2, #100	; 0x64
 80043ea:	fb02 f303 	mul.w	r3, r2, r3
 80043ee:	1acb      	subs	r3, r1, r3
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043f6:	4b36      	ldr	r3, [pc, #216]	; (80044d0 <UART_SetConfig+0x2d4>)
 80043f8:	fba3 2302 	umull	r2, r3, r3, r2
 80043fc:	095b      	lsrs	r3, r3, #5
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004404:	441c      	add	r4, r3
 8004406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800440a:	2200      	movs	r2, #0
 800440c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004410:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004414:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004418:	4642      	mov	r2, r8
 800441a:	464b      	mov	r3, r9
 800441c:	1891      	adds	r1, r2, r2
 800441e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004420:	415b      	adcs	r3, r3
 8004422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004424:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004428:	4641      	mov	r1, r8
 800442a:	1851      	adds	r1, r2, r1
 800442c:	6339      	str	r1, [r7, #48]	; 0x30
 800442e:	4649      	mov	r1, r9
 8004430:	414b      	adcs	r3, r1
 8004432:	637b      	str	r3, [r7, #52]	; 0x34
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	f04f 0300 	mov.w	r3, #0
 800443c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004440:	4659      	mov	r1, fp
 8004442:	00cb      	lsls	r3, r1, #3
 8004444:	4651      	mov	r1, sl
 8004446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800444a:	4651      	mov	r1, sl
 800444c:	00ca      	lsls	r2, r1, #3
 800444e:	4610      	mov	r0, r2
 8004450:	4619      	mov	r1, r3
 8004452:	4603      	mov	r3, r0
 8004454:	4642      	mov	r2, r8
 8004456:	189b      	adds	r3, r3, r2
 8004458:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800445c:	464b      	mov	r3, r9
 800445e:	460a      	mov	r2, r1
 8004460:	eb42 0303 	adc.w	r3, r2, r3
 8004464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004474:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004478:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800447c:	460b      	mov	r3, r1
 800447e:	18db      	adds	r3, r3, r3
 8004480:	62bb      	str	r3, [r7, #40]	; 0x28
 8004482:	4613      	mov	r3, r2
 8004484:	eb42 0303 	adc.w	r3, r2, r3
 8004488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800448a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800448e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004492:	f7fb febd 	bl	8000210 <__aeabi_uldivmod>
 8004496:	4602      	mov	r2, r0
 8004498:	460b      	mov	r3, r1
 800449a:	4b0d      	ldr	r3, [pc, #52]	; (80044d0 <UART_SetConfig+0x2d4>)
 800449c:	fba3 1302 	umull	r1, r3, r3, r2
 80044a0:	095b      	lsrs	r3, r3, #5
 80044a2:	2164      	movs	r1, #100	; 0x64
 80044a4:	fb01 f303 	mul.w	r3, r1, r3
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	3332      	adds	r3, #50	; 0x32
 80044ae:	4a08      	ldr	r2, [pc, #32]	; (80044d0 <UART_SetConfig+0x2d4>)
 80044b0:	fba2 2303 	umull	r2, r3, r2, r3
 80044b4:	095b      	lsrs	r3, r3, #5
 80044b6:	f003 0207 	and.w	r2, r3, #7
 80044ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4422      	add	r2, r4
 80044c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044c4:	e106      	b.n	80046d4 <UART_SetConfig+0x4d8>
 80044c6:	bf00      	nop
 80044c8:	40011000 	.word	0x40011000
 80044cc:	40011400 	.word	0x40011400
 80044d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044d8:	2200      	movs	r2, #0
 80044da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80044e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80044e6:	4642      	mov	r2, r8
 80044e8:	464b      	mov	r3, r9
 80044ea:	1891      	adds	r1, r2, r2
 80044ec:	6239      	str	r1, [r7, #32]
 80044ee:	415b      	adcs	r3, r3
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
 80044f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044f6:	4641      	mov	r1, r8
 80044f8:	1854      	adds	r4, r2, r1
 80044fa:	4649      	mov	r1, r9
 80044fc:	eb43 0501 	adc.w	r5, r3, r1
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	f04f 0300 	mov.w	r3, #0
 8004508:	00eb      	lsls	r3, r5, #3
 800450a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800450e:	00e2      	lsls	r2, r4, #3
 8004510:	4614      	mov	r4, r2
 8004512:	461d      	mov	r5, r3
 8004514:	4643      	mov	r3, r8
 8004516:	18e3      	adds	r3, r4, r3
 8004518:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800451c:	464b      	mov	r3, r9
 800451e:	eb45 0303 	adc.w	r3, r5, r3
 8004522:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004532:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004536:	f04f 0200 	mov.w	r2, #0
 800453a:	f04f 0300 	mov.w	r3, #0
 800453e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004542:	4629      	mov	r1, r5
 8004544:	008b      	lsls	r3, r1, #2
 8004546:	4621      	mov	r1, r4
 8004548:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800454c:	4621      	mov	r1, r4
 800454e:	008a      	lsls	r2, r1, #2
 8004550:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004554:	f7fb fe5c 	bl	8000210 <__aeabi_uldivmod>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4b60      	ldr	r3, [pc, #384]	; (80046e0 <UART_SetConfig+0x4e4>)
 800455e:	fba3 2302 	umull	r2, r3, r3, r2
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	011c      	lsls	r4, r3, #4
 8004566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800456a:	2200      	movs	r2, #0
 800456c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004570:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004574:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004578:	4642      	mov	r2, r8
 800457a:	464b      	mov	r3, r9
 800457c:	1891      	adds	r1, r2, r2
 800457e:	61b9      	str	r1, [r7, #24]
 8004580:	415b      	adcs	r3, r3
 8004582:	61fb      	str	r3, [r7, #28]
 8004584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004588:	4641      	mov	r1, r8
 800458a:	1851      	adds	r1, r2, r1
 800458c:	6139      	str	r1, [r7, #16]
 800458e:	4649      	mov	r1, r9
 8004590:	414b      	adcs	r3, r1
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045a0:	4659      	mov	r1, fp
 80045a2:	00cb      	lsls	r3, r1, #3
 80045a4:	4651      	mov	r1, sl
 80045a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045aa:	4651      	mov	r1, sl
 80045ac:	00ca      	lsls	r2, r1, #3
 80045ae:	4610      	mov	r0, r2
 80045b0:	4619      	mov	r1, r3
 80045b2:	4603      	mov	r3, r0
 80045b4:	4642      	mov	r2, r8
 80045b6:	189b      	adds	r3, r3, r2
 80045b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045bc:	464b      	mov	r3, r9
 80045be:	460a      	mov	r2, r1
 80045c0:	eb42 0303 	adc.w	r3, r2, r3
 80045c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80045d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	f04f 0300 	mov.w	r3, #0
 80045dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80045e0:	4649      	mov	r1, r9
 80045e2:	008b      	lsls	r3, r1, #2
 80045e4:	4641      	mov	r1, r8
 80045e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045ea:	4641      	mov	r1, r8
 80045ec:	008a      	lsls	r2, r1, #2
 80045ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80045f2:	f7fb fe0d 	bl	8000210 <__aeabi_uldivmod>
 80045f6:	4602      	mov	r2, r0
 80045f8:	460b      	mov	r3, r1
 80045fa:	4611      	mov	r1, r2
 80045fc:	4b38      	ldr	r3, [pc, #224]	; (80046e0 <UART_SetConfig+0x4e4>)
 80045fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004602:	095b      	lsrs	r3, r3, #5
 8004604:	2264      	movs	r2, #100	; 0x64
 8004606:	fb02 f303 	mul.w	r3, r2, r3
 800460a:	1acb      	subs	r3, r1, r3
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	3332      	adds	r3, #50	; 0x32
 8004610:	4a33      	ldr	r2, [pc, #204]	; (80046e0 <UART_SetConfig+0x4e4>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800461c:	441c      	add	r4, r3
 800461e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004622:	2200      	movs	r2, #0
 8004624:	673b      	str	r3, [r7, #112]	; 0x70
 8004626:	677a      	str	r2, [r7, #116]	; 0x74
 8004628:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800462c:	4642      	mov	r2, r8
 800462e:	464b      	mov	r3, r9
 8004630:	1891      	adds	r1, r2, r2
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	415b      	adcs	r3, r3
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800463c:	4641      	mov	r1, r8
 800463e:	1851      	adds	r1, r2, r1
 8004640:	6039      	str	r1, [r7, #0]
 8004642:	4649      	mov	r1, r9
 8004644:	414b      	adcs	r3, r1
 8004646:	607b      	str	r3, [r7, #4]
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004654:	4659      	mov	r1, fp
 8004656:	00cb      	lsls	r3, r1, #3
 8004658:	4651      	mov	r1, sl
 800465a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800465e:	4651      	mov	r1, sl
 8004660:	00ca      	lsls	r2, r1, #3
 8004662:	4610      	mov	r0, r2
 8004664:	4619      	mov	r1, r3
 8004666:	4603      	mov	r3, r0
 8004668:	4642      	mov	r2, r8
 800466a:	189b      	adds	r3, r3, r2
 800466c:	66bb      	str	r3, [r7, #104]	; 0x68
 800466e:	464b      	mov	r3, r9
 8004670:	460a      	mov	r2, r1
 8004672:	eb42 0303 	adc.w	r3, r2, r3
 8004676:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	663b      	str	r3, [r7, #96]	; 0x60
 8004682:	667a      	str	r2, [r7, #100]	; 0x64
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004690:	4649      	mov	r1, r9
 8004692:	008b      	lsls	r3, r1, #2
 8004694:	4641      	mov	r1, r8
 8004696:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800469a:	4641      	mov	r1, r8
 800469c:	008a      	lsls	r2, r1, #2
 800469e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80046a2:	f7fb fdb5 	bl	8000210 <__aeabi_uldivmod>
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <UART_SetConfig+0x4e4>)
 80046ac:	fba3 1302 	umull	r1, r3, r3, r2
 80046b0:	095b      	lsrs	r3, r3, #5
 80046b2:	2164      	movs	r1, #100	; 0x64
 80046b4:	fb01 f303 	mul.w	r3, r1, r3
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	3332      	adds	r3, #50	; 0x32
 80046be:	4a08      	ldr	r2, [pc, #32]	; (80046e0 <UART_SetConfig+0x4e4>)
 80046c0:	fba2 2303 	umull	r2, r3, r2, r3
 80046c4:	095b      	lsrs	r3, r3, #5
 80046c6:	f003 020f 	and.w	r2, r3, #15
 80046ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4422      	add	r2, r4
 80046d2:	609a      	str	r2, [r3, #8]
}
 80046d4:	bf00      	nop
 80046d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80046da:	46bd      	mov	sp, r7
 80046dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046e0:	51eb851f 	.word	0x51eb851f

080046e4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	4603      	mov	r3, r0
 80046ec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80046ee:	2300      	movs	r3, #0
 80046f0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80046f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046f6:	2b84      	cmp	r3, #132	; 0x84
 80046f8:	d005      	beq.n	8004706 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80046fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4413      	add	r3, r2
 8004702:	3303      	adds	r3, #3
 8004704:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004706:	68fb      	ldr	r3, [r7, #12]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004718:	f000 ff30 	bl	800557c <vTaskStartScheduler>
  
  return osOK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	bd80      	pop	{r7, pc}

08004722 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004722:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004724:	b089      	sub	sp, #36	; 0x24
 8004726:	af04      	add	r7, sp, #16
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d020      	beq.n	8004776 <osThreadCreate+0x54>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d01c      	beq.n	8004776 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685c      	ldr	r4, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691e      	ldr	r6, [r3, #16]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff ffc8 	bl	80046e4 <makeFreeRtosPriority>
 8004754:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800475e:	9202      	str	r2, [sp, #8]
 8004760:	9301      	str	r3, [sp, #4]
 8004762:	9100      	str	r1, [sp, #0]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	4632      	mov	r2, r6
 8004768:	4629      	mov	r1, r5
 800476a:	4620      	mov	r0, r4
 800476c:	f000 fd3e 	bl	80051ec <xTaskCreateStatic>
 8004770:	4603      	mov	r3, r0
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	e01c      	b.n	80047b0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685c      	ldr	r4, [r3, #4]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004782:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff ffaa 	bl	80046e4 <makeFreeRtosPriority>
 8004790:	4602      	mov	r2, r0
 8004792:	f107 030c 	add.w	r3, r7, #12
 8004796:	9301      	str	r3, [sp, #4]
 8004798:	9200      	str	r2, [sp, #0]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	4632      	mov	r2, r6
 800479e:	4629      	mov	r1, r5
 80047a0:	4620      	mov	r0, r4
 80047a2:	f000 fd80 	bl	80052a6 <xTaskCreate>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d001      	beq.n	80047b0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80047ac:	2300      	movs	r3, #0
 80047ae:	e000      	b.n	80047b2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80047b0:	68fb      	ldr	r3, [r7, #12]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047ba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b084      	sub	sp, #16
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <osDelay+0x16>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	e000      	b.n	80047d2 <osDelay+0x18>
 80047d0:	2301      	movs	r3, #1
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fe9e 	bl	8005514 <vTaskDelay>
  
  return osOK;
 80047d8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80047e2:	b590      	push	{r4, r7, lr}
 80047e4:	b085      	sub	sp, #20
 80047e6:	af02      	add	r7, sp, #8
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d011      	beq.n	8004818 <osMessageCreate+0x36>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00d      	beq.n	8004818 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6818      	ldr	r0, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6859      	ldr	r1, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	2400      	movs	r4, #0
 800480e:	9400      	str	r4, [sp, #0]
 8004810:	f000 f92c 	bl	8004a6c <xQueueGenericCreateStatic>
 8004814:	4603      	mov	r3, r0
 8004816:	e008      	b.n	800482a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	4619      	mov	r1, r3
 8004824:	f000 f99a 	bl	8004b5c <xQueueGenericCreate>
 8004828:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800482a:	4618      	mov	r0, r3
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	bd90      	pop	{r4, r7, pc}

08004832 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f103 0208 	add.w	r2, r3, #8
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f04f 32ff 	mov.w	r2, #4294967295
 800484a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f103 0208 	add.w	r2, r3, #8
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f103 0208 	add.w	r2, r3, #8
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	689a      	ldr	r2, [r3, #8]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	601a      	str	r2, [r3, #0]
}
 80048c8:	bf00      	nop
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ea:	d103      	bne.n	80048f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	e00c      	b.n	800490e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3308      	adds	r3, #8
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	e002      	b.n	8004902 <vListInsert+0x2e>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	429a      	cmp	r2, r3
 800490c:	d2f6      	bcs.n	80048fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	601a      	str	r2, [r3, #0]
}
 800493a:	bf00      	nop
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004946:	b480      	push	{r7}
 8004948:	b085      	sub	sp, #20
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6892      	ldr	r2, [r2, #8]
 800495c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6852      	ldr	r2, [r2, #4]
 8004966:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	429a      	cmp	r2, r3
 8004970:	d103      	bne.n	800497a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	1e5a      	subs	r2, r3, #1
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80049c6:	f001 fc0d 	bl	80061e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d2:	68f9      	ldr	r1, [r7, #12]
 80049d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049d6:	fb01 f303 	mul.w	r3, r1, r3
 80049da:	441a      	add	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f6:	3b01      	subs	r3, #1
 80049f8:	68f9      	ldr	r1, [r7, #12]
 80049fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	441a      	add	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	22ff      	movs	r2, #255	; 0xff
 8004a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	22ff      	movs	r2, #255	; 0xff
 8004a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d114      	bne.n	8004a46 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d01a      	beq.n	8004a5a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	3310      	adds	r3, #16
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 ffe9 	bl	8005a00 <xTaskRemoveFromEventList>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d012      	beq.n	8004a5a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a34:	4b0c      	ldr	r3, [pc, #48]	; (8004a68 <xQueueGenericReset+0xcc>)
 8004a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	e009      	b.n	8004a5a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	3310      	adds	r3, #16
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff fef1 	bl	8004832 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	3324      	adds	r3, #36	; 0x24
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff feec 	bl	8004832 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a5a:	f001 fbf3 	bl	8006244 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a5e:	2301      	movs	r3, #1
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	e000ed04 	.word	0xe000ed04

08004a6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b08e      	sub	sp, #56	; 0x38
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10a      	bne.n	8004a96 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a92:	bf00      	nop
 8004a94:	e7fe      	b.n	8004a94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10a      	bne.n	8004ab2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004aae:	bf00      	nop
 8004ab0:	e7fe      	b.n	8004ab0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d002      	beq.n	8004abe <xQueueGenericCreateStatic+0x52>
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <xQueueGenericCreateStatic+0x56>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e000      	b.n	8004ac4 <xQueueGenericCreateStatic+0x58>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10a      	bne.n	8004ade <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	623b      	str	r3, [r7, #32]
}
 8004ada:	bf00      	nop
 8004adc:	e7fe      	b.n	8004adc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d102      	bne.n	8004aea <xQueueGenericCreateStatic+0x7e>
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <xQueueGenericCreateStatic+0x82>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <xQueueGenericCreateStatic+0x84>
 8004aee:	2300      	movs	r3, #0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10a      	bne.n	8004b0a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	61fb      	str	r3, [r7, #28]
}
 8004b06:	bf00      	nop
 8004b08:	e7fe      	b.n	8004b08 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b0a:	2348      	movs	r3, #72	; 0x48
 8004b0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2b48      	cmp	r3, #72	; 0x48
 8004b12:	d00a      	beq.n	8004b2a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	61bb      	str	r3, [r7, #24]
}
 8004b26:	bf00      	nop
 8004b28:	e7fe      	b.n	8004b28 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b2a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00d      	beq.n	8004b52 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b3e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	4613      	mov	r3, r2
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	68b9      	ldr	r1, [r7, #8]
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 f83f 	bl	8004bd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3730      	adds	r7, #48	; 0x30
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b08a      	sub	sp, #40	; 0x28
 8004b60:	af02      	add	r7, sp, #8
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	4613      	mov	r3, r2
 8004b68:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10a      	bne.n	8004b86 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	613b      	str	r3, [r7, #16]
}
 8004b82:	bf00      	nop
 8004b84:	e7fe      	b.n	8004b84 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	fb02 f303 	mul.w	r3, r2, r3
 8004b8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	3348      	adds	r3, #72	; 0x48
 8004b94:	4618      	mov	r0, r3
 8004b96:	f001 fc07 	bl	80063a8 <pvPortMalloc>
 8004b9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d011      	beq.n	8004bc6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	3348      	adds	r3, #72	; 0x48
 8004baa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bb4:	79fa      	ldrb	r2, [r7, #7]
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	68b9      	ldr	r1, [r7, #8]
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f805 	bl	8004bd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004bc6:	69bb      	ldr	r3, [r7, #24]
	}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3720      	adds	r7, #32
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
 8004bdc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d103      	bne.n	8004bec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	e002      	b.n	8004bf2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004bfe:	2101      	movs	r1, #1
 8004c00:	69b8      	ldr	r0, [r7, #24]
 8004c02:	f7ff fecb 	bl	800499c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c06:	bf00      	nop
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08e      	sub	sp, #56	; 0x38
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10a      	bne.n	8004c42 <xQueueGenericSend+0x32>
	__asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c3e:	bf00      	nop
 8004c40:	e7fe      	b.n	8004c40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d103      	bne.n	8004c50 <xQueueGenericSend+0x40>
 8004c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <xQueueGenericSend+0x44>
 8004c50:	2301      	movs	r3, #1
 8004c52:	e000      	b.n	8004c56 <xQueueGenericSend+0x46>
 8004c54:	2300      	movs	r3, #0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10a      	bne.n	8004c70 <xQueueGenericSend+0x60>
	__asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c6c:	bf00      	nop
 8004c6e:	e7fe      	b.n	8004c6e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d103      	bne.n	8004c7e <xQueueGenericSend+0x6e>
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <xQueueGenericSend+0x72>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <xQueueGenericSend+0x74>
 8004c82:	2300      	movs	r3, #0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10a      	bne.n	8004c9e <xQueueGenericSend+0x8e>
	__asm volatile
 8004c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	623b      	str	r3, [r7, #32]
}
 8004c9a:	bf00      	nop
 8004c9c:	e7fe      	b.n	8004c9c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c9e:	f001 f86b 	bl	8005d78 <xTaskGetSchedulerState>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d102      	bne.n	8004cae <xQueueGenericSend+0x9e>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <xQueueGenericSend+0xa2>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <xQueueGenericSend+0xa4>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10a      	bne.n	8004cce <xQueueGenericSend+0xbe>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	61fb      	str	r3, [r7, #28]
}
 8004cca:	bf00      	nop
 8004ccc:	e7fe      	b.n	8004ccc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cce:	f001 fa89 	bl	80061e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d302      	bcc.n	8004ce4 <xQueueGenericSend+0xd4>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d129      	bne.n	8004d38 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	68b9      	ldr	r1, [r7, #8]
 8004ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cea:	f000 f96f 	bl	8004fcc <prvCopyDataToQueue>
 8004cee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d010      	beq.n	8004d1a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfa:	3324      	adds	r3, #36	; 0x24
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 fe7f 	bl	8005a00 <xTaskRemoveFromEventList>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d013      	beq.n	8004d30 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d08:	4b3f      	ldr	r3, [pc, #252]	; (8004e08 <xQueueGenericSend+0x1f8>)
 8004d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	e00a      	b.n	8004d30 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d007      	beq.n	8004d30 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d20:	4b39      	ldr	r3, [pc, #228]	; (8004e08 <xQueueGenericSend+0x1f8>)
 8004d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d30:	f001 fa88 	bl	8006244 <vPortExitCritical>
				return pdPASS;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e063      	b.n	8004e00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d103      	bne.n	8004d46 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d3e:	f001 fa81 	bl	8006244 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d42:	2300      	movs	r3, #0
 8004d44:	e05c      	b.n	8004e00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d106      	bne.n	8004d5a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d4c:	f107 0314 	add.w	r3, r7, #20
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 feb7 	bl	8005ac4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d56:	2301      	movs	r3, #1
 8004d58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d5a:	f001 fa73 	bl	8006244 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d5e:	f000 fc6d 	bl	800563c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d62:	f001 fa3f 	bl	80061e4 <vPortEnterCritical>
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d6c:	b25b      	sxtb	r3, r3
 8004d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d72:	d103      	bne.n	8004d7c <xQueueGenericSend+0x16c>
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d82:	b25b      	sxtb	r3, r3
 8004d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d88:	d103      	bne.n	8004d92 <xQueueGenericSend+0x182>
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d92:	f001 fa57 	bl	8006244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d96:	1d3a      	adds	r2, r7, #4
 8004d98:	f107 0314 	add.w	r3, r7, #20
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fea6 	bl	8005af0 <xTaskCheckForTimeOut>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d124      	bne.n	8004df4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004daa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dac:	f000 fa06 	bl	80051bc <prvIsQueueFull>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d018      	beq.n	8004de8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	3310      	adds	r3, #16
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fdfa 	bl	80059b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dc6:	f000 f991 	bl	80050ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004dca:	f000 fc45 	bl	8005658 <xTaskResumeAll>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f47f af7c 	bne.w	8004cce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004dd6:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <xQueueGenericSend+0x1f8>)
 8004dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	e772      	b.n	8004cce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dea:	f000 f97f 	bl	80050ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dee:	f000 fc33 	bl	8005658 <xTaskResumeAll>
 8004df2:	e76c      	b.n	8004cce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004df6:	f000 f979 	bl	80050ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dfa:	f000 fc2d 	bl	8005658 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004dfe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3738      	adds	r7, #56	; 0x38
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	e000ed04 	.word	0xe000ed04

08004e0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08c      	sub	sp, #48	; 0x30
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10a      	bne.n	8004e3c <xQueueReceive+0x30>
	__asm volatile
 8004e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	623b      	str	r3, [r7, #32]
}
 8004e38:	bf00      	nop
 8004e3a:	e7fe      	b.n	8004e3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d103      	bne.n	8004e4a <xQueueReceive+0x3e>
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <xQueueReceive+0x42>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e000      	b.n	8004e50 <xQueueReceive+0x44>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10a      	bne.n	8004e6a <xQueueReceive+0x5e>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	61fb      	str	r3, [r7, #28]
}
 8004e66:	bf00      	nop
 8004e68:	e7fe      	b.n	8004e68 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e6a:	f000 ff85 	bl	8005d78 <xTaskGetSchedulerState>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d102      	bne.n	8004e7a <xQueueReceive+0x6e>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <xQueueReceive+0x72>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <xQueueReceive+0x74>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10a      	bne.n	8004e9a <xQueueReceive+0x8e>
	__asm volatile
 8004e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e88:	f383 8811 	msr	BASEPRI, r3
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	61bb      	str	r3, [r7, #24]
}
 8004e96:	bf00      	nop
 8004e98:	e7fe      	b.n	8004e98 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e9a:	f001 f9a3 	bl	80061e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d01f      	beq.n	8004eea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004eaa:	68b9      	ldr	r1, [r7, #8]
 8004eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eae:	f000 f8f7 	bl	80050a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	1e5a      	subs	r2, r3, #1
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00f      	beq.n	8004ee2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec4:	3310      	adds	r3, #16
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 fd9a 	bl	8005a00 <xTaskRemoveFromEventList>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d007      	beq.n	8004ee2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ed2:	4b3d      	ldr	r3, [pc, #244]	; (8004fc8 <xQueueReceive+0x1bc>)
 8004ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ee2:	f001 f9af 	bl	8006244 <vPortExitCritical>
				return pdPASS;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e069      	b.n	8004fbe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d103      	bne.n	8004ef8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ef0:	f001 f9a8 	bl	8006244 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	e062      	b.n	8004fbe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d106      	bne.n	8004f0c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004efe:	f107 0310 	add.w	r3, r7, #16
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fdde 	bl	8005ac4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f0c:	f001 f99a 	bl	8006244 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f10:	f000 fb94 	bl	800563c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f14:	f001 f966 	bl	80061e4 <vPortEnterCritical>
 8004f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f1e:	b25b      	sxtb	r3, r3
 8004f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f24:	d103      	bne.n	8004f2e <xQueueReceive+0x122>
 8004f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f34:	b25b      	sxtb	r3, r3
 8004f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3a:	d103      	bne.n	8004f44 <xQueueReceive+0x138>
 8004f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f44:	f001 f97e 	bl	8006244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f48:	1d3a      	adds	r2, r7, #4
 8004f4a:	f107 0310 	add.w	r3, r7, #16
 8004f4e:	4611      	mov	r1, r2
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fdcd 	bl	8005af0 <xTaskCheckForTimeOut>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d123      	bne.n	8004fa4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f5e:	f000 f917 	bl	8005190 <prvIsQueueEmpty>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d017      	beq.n	8004f98 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6a:	3324      	adds	r3, #36	; 0x24
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	4611      	mov	r1, r2
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 fd21 	bl	80059b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f78:	f000 f8b8 	bl	80050ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f7c:	f000 fb6c 	bl	8005658 <xTaskResumeAll>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d189      	bne.n	8004e9a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004f86:	4b10      	ldr	r3, [pc, #64]	; (8004fc8 <xQueueReceive+0x1bc>)
 8004f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	e780      	b.n	8004e9a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f9a:	f000 f8a7 	bl	80050ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f9e:	f000 fb5b 	bl	8005658 <xTaskResumeAll>
 8004fa2:	e77a      	b.n	8004e9a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fa6:	f000 f8a1 	bl	80050ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004faa:	f000 fb55 	bl	8005658 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fb0:	f000 f8ee 	bl	8005190 <prvIsQueueEmpty>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f43f af6f 	beq.w	8004e9a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004fbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3730      	adds	r7, #48	; 0x30
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	e000ed04 	.word	0xe000ed04

08004fcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10d      	bne.n	8005006 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d14d      	bne.n	800508e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 fedc 	bl	8005db4 <xTaskPriorityDisinherit>
 8004ffc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	609a      	str	r2, [r3, #8]
 8005004:	e043      	b.n	800508e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d119      	bne.n	8005040 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6858      	ldr	r0, [r3, #4]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	461a      	mov	r2, r3
 8005016:	68b9      	ldr	r1, [r7, #8]
 8005018:	f001 fe47 	bl	8006caa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005024:	441a      	add	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	429a      	cmp	r2, r3
 8005034:	d32b      	bcc.n	800508e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	605a      	str	r2, [r3, #4]
 800503e:	e026      	b.n	800508e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	68d8      	ldr	r0, [r3, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005048:	461a      	mov	r2, r3
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	f001 fe2d 	bl	8006caa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005058:	425b      	negs	r3, r3
 800505a:	441a      	add	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d207      	bcs.n	800507c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005074:	425b      	negs	r3, r3
 8005076:	441a      	add	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b02      	cmp	r3, #2
 8005080:	d105      	bne.n	800508e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	3b01      	subs	r3, #1
 800508c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005096:	697b      	ldr	r3, [r7, #20]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d018      	beq.n	80050e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	441a      	add	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d303      	bcc.n	80050d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68d9      	ldr	r1, [r3, #12]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050dc:	461a      	mov	r2, r3
 80050de:	6838      	ldr	r0, [r7, #0]
 80050e0:	f001 fde3 	bl	8006caa <memcpy>
	}
}
 80050e4:	bf00      	nop
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050f4:	f001 f876 	bl	80061e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005100:	e011      	b.n	8005126 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	2b00      	cmp	r3, #0
 8005108:	d012      	beq.n	8005130 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	3324      	adds	r3, #36	; 0x24
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fc76 	bl	8005a00 <xTaskRemoveFromEventList>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800511a:	f000 fd4b 	bl	8005bb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800511e:	7bfb      	ldrb	r3, [r7, #15]
 8005120:	3b01      	subs	r3, #1
 8005122:	b2db      	uxtb	r3, r3
 8005124:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800512a:	2b00      	cmp	r3, #0
 800512c:	dce9      	bgt.n	8005102 <prvUnlockQueue+0x16>
 800512e:	e000      	b.n	8005132 <prvUnlockQueue+0x46>
					break;
 8005130:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	22ff      	movs	r2, #255	; 0xff
 8005136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800513a:	f001 f883 	bl	8006244 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800513e:	f001 f851 	bl	80061e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005148:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800514a:	e011      	b.n	8005170 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d012      	beq.n	800517a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3310      	adds	r3, #16
 8005158:	4618      	mov	r0, r3
 800515a:	f000 fc51 	bl	8005a00 <xTaskRemoveFromEventList>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005164:	f000 fd26 	bl	8005bb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005168:	7bbb      	ldrb	r3, [r7, #14]
 800516a:	3b01      	subs	r3, #1
 800516c:	b2db      	uxtb	r3, r3
 800516e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005174:	2b00      	cmp	r3, #0
 8005176:	dce9      	bgt.n	800514c <prvUnlockQueue+0x60>
 8005178:	e000      	b.n	800517c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800517a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	22ff      	movs	r2, #255	; 0xff
 8005180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005184:	f001 f85e 	bl	8006244 <vPortExitCritical>
}
 8005188:	bf00      	nop
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005198:	f001 f824 	bl	80061e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d102      	bne.n	80051aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80051a4:	2301      	movs	r3, #1
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	e001      	b.n	80051ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80051aa:	2300      	movs	r3, #0
 80051ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051ae:	f001 f849 	bl	8006244 <vPortExitCritical>

	return xReturn;
 80051b2:	68fb      	ldr	r3, [r7, #12]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051c4:	f001 f80e 	bl	80061e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d102      	bne.n	80051da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80051d4:	2301      	movs	r3, #1
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	e001      	b.n	80051de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051de:	f001 f831 	bl	8006244 <vPortExitCritical>

	return xReturn;
 80051e2:	68fb      	ldr	r3, [r7, #12]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08e      	sub	sp, #56	; 0x38
 80051f0:	af04      	add	r7, sp, #16
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
 80051f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10a      	bne.n	8005216 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	623b      	str	r3, [r7, #32]
}
 8005212:	bf00      	nop
 8005214:	e7fe      	b.n	8005214 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10a      	bne.n	8005232 <xTaskCreateStatic+0x46>
	__asm volatile
 800521c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	61fb      	str	r3, [r7, #28]
}
 800522e:	bf00      	nop
 8005230:	e7fe      	b.n	8005230 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005232:	2354      	movs	r3, #84	; 0x54
 8005234:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	2b54      	cmp	r3, #84	; 0x54
 800523a:	d00a      	beq.n	8005252 <xTaskCreateStatic+0x66>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	61bb      	str	r3, [r7, #24]
}
 800524e:	bf00      	nop
 8005250:	e7fe      	b.n	8005250 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005252:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005256:	2b00      	cmp	r3, #0
 8005258:	d01e      	beq.n	8005298 <xTaskCreateStatic+0xac>
 800525a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525c:	2b00      	cmp	r3, #0
 800525e:	d01b      	beq.n	8005298 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005262:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005268:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	2202      	movs	r2, #2
 800526e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005272:	2300      	movs	r3, #0
 8005274:	9303      	str	r3, [sp, #12]
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	9302      	str	r3, [sp, #8]
 800527a:	f107 0314 	add.w	r3, r7, #20
 800527e:	9301      	str	r3, [sp, #4]
 8005280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	68b9      	ldr	r1, [r7, #8]
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 f850 	bl	8005330 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005290:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005292:	f000 f8d5 	bl	8005440 <prvAddNewTaskToReadyList>
 8005296:	e001      	b.n	800529c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005298:	2300      	movs	r3, #0
 800529a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800529c:	697b      	ldr	r3, [r7, #20]
	}
 800529e:	4618      	mov	r0, r3
 80052a0:	3728      	adds	r7, #40	; 0x28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b08c      	sub	sp, #48	; 0x30
 80052aa:	af04      	add	r7, sp, #16
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	603b      	str	r3, [r7, #0]
 80052b2:	4613      	mov	r3, r2
 80052b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052b6:	88fb      	ldrh	r3, [r7, #6]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4618      	mov	r0, r3
 80052bc:	f001 f874 	bl	80063a8 <pvPortMalloc>
 80052c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00e      	beq.n	80052e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052c8:	2054      	movs	r0, #84	; 0x54
 80052ca:	f001 f86d 	bl	80063a8 <pvPortMalloc>
 80052ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	631a      	str	r2, [r3, #48]	; 0x30
 80052dc:	e005      	b.n	80052ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052de:	6978      	ldr	r0, [r7, #20]
 80052e0:	f001 f92e 	bl	8006540 <vPortFree>
 80052e4:	e001      	b.n	80052ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052e6:	2300      	movs	r3, #0
 80052e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d017      	beq.n	8005320 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052f8:	88fa      	ldrh	r2, [r7, #6]
 80052fa:	2300      	movs	r3, #0
 80052fc:	9303      	str	r3, [sp, #12]
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	9302      	str	r3, [sp, #8]
 8005302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005304:	9301      	str	r3, [sp, #4]
 8005306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68b9      	ldr	r1, [r7, #8]
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 f80e 	bl	8005330 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005314:	69f8      	ldr	r0, [r7, #28]
 8005316:	f000 f893 	bl	8005440 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800531a:	2301      	movs	r3, #1
 800531c:	61bb      	str	r3, [r7, #24]
 800531e:	e002      	b.n	8005326 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005320:	f04f 33ff 	mov.w	r3, #4294967295
 8005324:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005326:	69bb      	ldr	r3, [r7, #24]
	}
 8005328:	4618      	mov	r0, r3
 800532a:	3720      	adds	r7, #32
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
 800533c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005348:	3b01      	subs	r3, #1
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	f023 0307 	bic.w	r3, r3, #7
 8005356:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00a      	beq.n	8005378 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	617b      	str	r3, [r7, #20]
}
 8005374:	bf00      	nop
 8005376:	e7fe      	b.n	8005376 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d01f      	beq.n	80053be <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800537e:	2300      	movs	r3, #0
 8005380:	61fb      	str	r3, [r7, #28]
 8005382:	e012      	b.n	80053aa <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	7819      	ldrb	r1, [r3, #0]
 800538c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	4413      	add	r3, r2
 8005392:	3334      	adds	r3, #52	; 0x34
 8005394:	460a      	mov	r2, r1
 8005396:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	4413      	add	r3, r2
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d006      	beq.n	80053b2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	3301      	adds	r3, #1
 80053a8:	61fb      	str	r3, [r7, #28]
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	2b0f      	cmp	r3, #15
 80053ae:	d9e9      	bls.n	8005384 <prvInitialiseNewTask+0x54>
 80053b0:	e000      	b.n	80053b4 <prvInitialiseNewTask+0x84>
			{
				break;
 80053b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053bc:	e003      	b.n	80053c6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c8:	2b06      	cmp	r3, #6
 80053ca:	d901      	bls.n	80053d0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053cc:	2306      	movs	r3, #6
 80053ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053de:	2200      	movs	r2, #0
 80053e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e4:	3304      	adds	r3, #4
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7ff fa43 	bl	8004872 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ee:	3318      	adds	r3, #24
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7ff fa3e 	bl	8004872 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fe:	f1c3 0207 	rsb	r2, r3, #7
 8005402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005404:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800540a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	2200      	movs	r2, #0
 8005410:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	68f9      	ldr	r1, [r7, #12]
 800541e:	69b8      	ldr	r0, [r7, #24]
 8005420:	f000 fdb4 	bl	8005f8c <pxPortInitialiseStack>
 8005424:	4602      	mov	r2, r0
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005436:	bf00      	nop
 8005438:	3720      	adds	r7, #32
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
	...

08005440 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005448:	f000 fecc 	bl	80061e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800544c:	4b2a      	ldr	r3, [pc, #168]	; (80054f8 <prvAddNewTaskToReadyList+0xb8>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3301      	adds	r3, #1
 8005452:	4a29      	ldr	r2, [pc, #164]	; (80054f8 <prvAddNewTaskToReadyList+0xb8>)
 8005454:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005456:	4b29      	ldr	r3, [pc, #164]	; (80054fc <prvAddNewTaskToReadyList+0xbc>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d109      	bne.n	8005472 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800545e:	4a27      	ldr	r2, [pc, #156]	; (80054fc <prvAddNewTaskToReadyList+0xbc>)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005464:	4b24      	ldr	r3, [pc, #144]	; (80054f8 <prvAddNewTaskToReadyList+0xb8>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d110      	bne.n	800548e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800546c:	f000 fbc6 	bl	8005bfc <prvInitialiseTaskLists>
 8005470:	e00d      	b.n	800548e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005472:	4b23      	ldr	r3, [pc, #140]	; (8005500 <prvAddNewTaskToReadyList+0xc0>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d109      	bne.n	800548e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800547a:	4b20      	ldr	r3, [pc, #128]	; (80054fc <prvAddNewTaskToReadyList+0xbc>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005484:	429a      	cmp	r2, r3
 8005486:	d802      	bhi.n	800548e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005488:	4a1c      	ldr	r2, [pc, #112]	; (80054fc <prvAddNewTaskToReadyList+0xbc>)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800548e:	4b1d      	ldr	r3, [pc, #116]	; (8005504 <prvAddNewTaskToReadyList+0xc4>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3301      	adds	r3, #1
 8005494:	4a1b      	ldr	r2, [pc, #108]	; (8005504 <prvAddNewTaskToReadyList+0xc4>)
 8005496:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549c:	2201      	movs	r2, #1
 800549e:	409a      	lsls	r2, r3
 80054a0:	4b19      	ldr	r3, [pc, #100]	; (8005508 <prvAddNewTaskToReadyList+0xc8>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	4a18      	ldr	r2, [pc, #96]	; (8005508 <prvAddNewTaskToReadyList+0xc8>)
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4a15      	ldr	r2, [pc, #84]	; (800550c <prvAddNewTaskToReadyList+0xcc>)
 80054b8:	441a      	add	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	3304      	adds	r3, #4
 80054be:	4619      	mov	r1, r3
 80054c0:	4610      	mov	r0, r2
 80054c2:	f7ff f9e3 	bl	800488c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054c6:	f000 febd 	bl	8006244 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054ca:	4b0d      	ldr	r3, [pc, #52]	; (8005500 <prvAddNewTaskToReadyList+0xc0>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00e      	beq.n	80054f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054d2:	4b0a      	ldr	r3, [pc, #40]	; (80054fc <prvAddNewTaskToReadyList+0xbc>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	429a      	cmp	r2, r3
 80054de:	d207      	bcs.n	80054f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054e0:	4b0b      	ldr	r3, [pc, #44]	; (8005510 <prvAddNewTaskToReadyList+0xd0>)
 80054e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054f0:	bf00      	nop
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	200008f8 	.word	0x200008f8
 80054fc:	200007f8 	.word	0x200007f8
 8005500:	20000904 	.word	0x20000904
 8005504:	20000914 	.word	0x20000914
 8005508:	20000900 	.word	0x20000900
 800550c:	200007fc 	.word	0x200007fc
 8005510:	e000ed04 	.word	0xe000ed04

08005514 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800551c:	2300      	movs	r3, #0
 800551e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d017      	beq.n	8005556 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005526:	4b13      	ldr	r3, [pc, #76]	; (8005574 <vTaskDelay+0x60>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <vTaskDelay+0x30>
	__asm volatile
 800552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	60bb      	str	r3, [r7, #8]
}
 8005540:	bf00      	nop
 8005542:	e7fe      	b.n	8005542 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005544:	f000 f87a 	bl	800563c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005548:	2100      	movs	r1, #0
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fcb8 	bl	8005ec0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005550:	f000 f882 	bl	8005658 <xTaskResumeAll>
 8005554:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d107      	bne.n	800556c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800555c:	4b06      	ldr	r3, [pc, #24]	; (8005578 <vTaskDelay+0x64>)
 800555e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800556c:	bf00      	nop
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	20000920 	.word	0x20000920
 8005578:	e000ed04 	.word	0xe000ed04

0800557c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08a      	sub	sp, #40	; 0x28
 8005580:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005582:	2300      	movs	r3, #0
 8005584:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005586:	2300      	movs	r3, #0
 8005588:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800558a:	463a      	mov	r2, r7
 800558c:	1d39      	adds	r1, r7, #4
 800558e:	f107 0308 	add.w	r3, r7, #8
 8005592:	4618      	mov	r0, r3
 8005594:	f7fb f96e 	bl	8000874 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005598:	6839      	ldr	r1, [r7, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	9202      	str	r2, [sp, #8]
 80055a0:	9301      	str	r3, [sp, #4]
 80055a2:	2300      	movs	r3, #0
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	2300      	movs	r3, #0
 80055a8:	460a      	mov	r2, r1
 80055aa:	491e      	ldr	r1, [pc, #120]	; (8005624 <vTaskStartScheduler+0xa8>)
 80055ac:	481e      	ldr	r0, [pc, #120]	; (8005628 <vTaskStartScheduler+0xac>)
 80055ae:	f7ff fe1d 	bl	80051ec <xTaskCreateStatic>
 80055b2:	4603      	mov	r3, r0
 80055b4:	4a1d      	ldr	r2, [pc, #116]	; (800562c <vTaskStartScheduler+0xb0>)
 80055b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055b8:	4b1c      	ldr	r3, [pc, #112]	; (800562c <vTaskStartScheduler+0xb0>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055c0:	2301      	movs	r3, #1
 80055c2:	617b      	str	r3, [r7, #20]
 80055c4:	e001      	b.n	80055ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d116      	bne.n	80055fe <vTaskStartScheduler+0x82>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	613b      	str	r3, [r7, #16]
}
 80055e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055e4:	4b12      	ldr	r3, [pc, #72]	; (8005630 <vTaskStartScheduler+0xb4>)
 80055e6:	f04f 32ff 	mov.w	r2, #4294967295
 80055ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055ec:	4b11      	ldr	r3, [pc, #68]	; (8005634 <vTaskStartScheduler+0xb8>)
 80055ee:	2201      	movs	r2, #1
 80055f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055f2:	4b11      	ldr	r3, [pc, #68]	; (8005638 <vTaskStartScheduler+0xbc>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055f8:	f000 fd52 	bl	80060a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055fc:	e00e      	b.n	800561c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005604:	d10a      	bne.n	800561c <vTaskStartScheduler+0xa0>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	60fb      	str	r3, [r7, #12]
}
 8005618:	bf00      	nop
 800561a:	e7fe      	b.n	800561a <vTaskStartScheduler+0x9e>
}
 800561c:	bf00      	nop
 800561e:	3718      	adds	r7, #24
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	08007308 	.word	0x08007308
 8005628:	08005bcd 	.word	0x08005bcd
 800562c:	2000091c 	.word	0x2000091c
 8005630:	20000918 	.word	0x20000918
 8005634:	20000904 	.word	0x20000904
 8005638:	200008fc 	.word	0x200008fc

0800563c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005640:	4b04      	ldr	r3, [pc, #16]	; (8005654 <vTaskSuspendAll+0x18>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3301      	adds	r3, #1
 8005646:	4a03      	ldr	r2, [pc, #12]	; (8005654 <vTaskSuspendAll+0x18>)
 8005648:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800564a:	bf00      	nop
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	20000920 	.word	0x20000920

08005658 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005662:	2300      	movs	r3, #0
 8005664:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005666:	4b41      	ldr	r3, [pc, #260]	; (800576c <xTaskResumeAll+0x114>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10a      	bne.n	8005684 <xTaskResumeAll+0x2c>
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	603b      	str	r3, [r7, #0]
}
 8005680:	bf00      	nop
 8005682:	e7fe      	b.n	8005682 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005684:	f000 fdae 	bl	80061e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005688:	4b38      	ldr	r3, [pc, #224]	; (800576c <xTaskResumeAll+0x114>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	3b01      	subs	r3, #1
 800568e:	4a37      	ldr	r2, [pc, #220]	; (800576c <xTaskResumeAll+0x114>)
 8005690:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005692:	4b36      	ldr	r3, [pc, #216]	; (800576c <xTaskResumeAll+0x114>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d161      	bne.n	800575e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800569a:	4b35      	ldr	r3, [pc, #212]	; (8005770 <xTaskResumeAll+0x118>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d05d      	beq.n	800575e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056a2:	e02e      	b.n	8005702 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056a4:	4b33      	ldr	r3, [pc, #204]	; (8005774 <xTaskResumeAll+0x11c>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	3318      	adds	r3, #24
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff f948 	bl	8004946 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3304      	adds	r3, #4
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff f943 	bl	8004946 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	2201      	movs	r2, #1
 80056c6:	409a      	lsls	r2, r3
 80056c8:	4b2b      	ldr	r3, [pc, #172]	; (8005778 <xTaskResumeAll+0x120>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	4a2a      	ldr	r2, [pc, #168]	; (8005778 <xTaskResumeAll+0x120>)
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d6:	4613      	mov	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4a27      	ldr	r2, [pc, #156]	; (800577c <xTaskResumeAll+0x124>)
 80056e0:	441a      	add	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	3304      	adds	r3, #4
 80056e6:	4619      	mov	r1, r3
 80056e8:	4610      	mov	r0, r2
 80056ea:	f7ff f8cf 	bl	800488c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f2:	4b23      	ldr	r3, [pc, #140]	; (8005780 <xTaskResumeAll+0x128>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d302      	bcc.n	8005702 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80056fc:	4b21      	ldr	r3, [pc, #132]	; (8005784 <xTaskResumeAll+0x12c>)
 80056fe:	2201      	movs	r2, #1
 8005700:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005702:	4b1c      	ldr	r3, [pc, #112]	; (8005774 <xTaskResumeAll+0x11c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1cc      	bne.n	80056a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005710:	f000 fb12 	bl	8005d38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005714:	4b1c      	ldr	r3, [pc, #112]	; (8005788 <xTaskResumeAll+0x130>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d010      	beq.n	8005742 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005720:	f000 f836 	bl	8005790 <xTaskIncrementTick>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d002      	beq.n	8005730 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800572a:	4b16      	ldr	r3, [pc, #88]	; (8005784 <xTaskResumeAll+0x12c>)
 800572c:	2201      	movs	r2, #1
 800572e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3b01      	subs	r3, #1
 8005734:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1f1      	bne.n	8005720 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800573c:	4b12      	ldr	r3, [pc, #72]	; (8005788 <xTaskResumeAll+0x130>)
 800573e:	2200      	movs	r2, #0
 8005740:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005742:	4b10      	ldr	r3, [pc, #64]	; (8005784 <xTaskResumeAll+0x12c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d009      	beq.n	800575e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800574a:	2301      	movs	r3, #1
 800574c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800574e:	4b0f      	ldr	r3, [pc, #60]	; (800578c <xTaskResumeAll+0x134>)
 8005750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800575e:	f000 fd71 	bl	8006244 <vPortExitCritical>

	return xAlreadyYielded;
 8005762:	68bb      	ldr	r3, [r7, #8]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	20000920 	.word	0x20000920
 8005770:	200008f8 	.word	0x200008f8
 8005774:	200008b8 	.word	0x200008b8
 8005778:	20000900 	.word	0x20000900
 800577c:	200007fc 	.word	0x200007fc
 8005780:	200007f8 	.word	0x200007f8
 8005784:	2000090c 	.word	0x2000090c
 8005788:	20000908 	.word	0x20000908
 800578c:	e000ed04 	.word	0xe000ed04

08005790 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005796:	2300      	movs	r3, #0
 8005798:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800579a:	4b4e      	ldr	r3, [pc, #312]	; (80058d4 <xTaskIncrementTick+0x144>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f040 808e 	bne.w	80058c0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057a4:	4b4c      	ldr	r3, [pc, #304]	; (80058d8 <xTaskIncrementTick+0x148>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3301      	adds	r3, #1
 80057aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057ac:	4a4a      	ldr	r2, [pc, #296]	; (80058d8 <xTaskIncrementTick+0x148>)
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d120      	bne.n	80057fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80057b8:	4b48      	ldr	r3, [pc, #288]	; (80058dc <xTaskIncrementTick+0x14c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80057c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	603b      	str	r3, [r7, #0]
}
 80057d4:	bf00      	nop
 80057d6:	e7fe      	b.n	80057d6 <xTaskIncrementTick+0x46>
 80057d8:	4b40      	ldr	r3, [pc, #256]	; (80058dc <xTaskIncrementTick+0x14c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	4b40      	ldr	r3, [pc, #256]	; (80058e0 <xTaskIncrementTick+0x150>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a3e      	ldr	r2, [pc, #248]	; (80058dc <xTaskIncrementTick+0x14c>)
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	4a3e      	ldr	r2, [pc, #248]	; (80058e0 <xTaskIncrementTick+0x150>)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6013      	str	r3, [r2, #0]
 80057ec:	4b3d      	ldr	r3, [pc, #244]	; (80058e4 <xTaskIncrementTick+0x154>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3301      	adds	r3, #1
 80057f2:	4a3c      	ldr	r2, [pc, #240]	; (80058e4 <xTaskIncrementTick+0x154>)
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	f000 fa9f 	bl	8005d38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057fa:	4b3b      	ldr	r3, [pc, #236]	; (80058e8 <xTaskIncrementTick+0x158>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	429a      	cmp	r2, r3
 8005802:	d348      	bcc.n	8005896 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005804:	4b35      	ldr	r3, [pc, #212]	; (80058dc <xTaskIncrementTick+0x14c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d104      	bne.n	8005818 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800580e:	4b36      	ldr	r3, [pc, #216]	; (80058e8 <xTaskIncrementTick+0x158>)
 8005810:	f04f 32ff 	mov.w	r2, #4294967295
 8005814:	601a      	str	r2, [r3, #0]
					break;
 8005816:	e03e      	b.n	8005896 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005818:	4b30      	ldr	r3, [pc, #192]	; (80058dc <xTaskIncrementTick+0x14c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	429a      	cmp	r2, r3
 800582e:	d203      	bcs.n	8005838 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005830:	4a2d      	ldr	r2, [pc, #180]	; (80058e8 <xTaskIncrementTick+0x158>)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005836:	e02e      	b.n	8005896 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	3304      	adds	r3, #4
 800583c:	4618      	mov	r0, r3
 800583e:	f7ff f882 	bl	8004946 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005846:	2b00      	cmp	r3, #0
 8005848:	d004      	beq.n	8005854 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	3318      	adds	r3, #24
 800584e:	4618      	mov	r0, r3
 8005850:	f7ff f879 	bl	8004946 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005858:	2201      	movs	r2, #1
 800585a:	409a      	lsls	r2, r3
 800585c:	4b23      	ldr	r3, [pc, #140]	; (80058ec <xTaskIncrementTick+0x15c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4313      	orrs	r3, r2
 8005862:	4a22      	ldr	r2, [pc, #136]	; (80058ec <xTaskIncrementTick+0x15c>)
 8005864:	6013      	str	r3, [r2, #0]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586a:	4613      	mov	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4a1f      	ldr	r2, [pc, #124]	; (80058f0 <xTaskIncrementTick+0x160>)
 8005874:	441a      	add	r2, r3
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	3304      	adds	r3, #4
 800587a:	4619      	mov	r1, r3
 800587c:	4610      	mov	r0, r2
 800587e:	f7ff f805 	bl	800488c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005886:	4b1b      	ldr	r3, [pc, #108]	; (80058f4 <xTaskIncrementTick+0x164>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	429a      	cmp	r2, r3
 800588e:	d3b9      	bcc.n	8005804 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005890:	2301      	movs	r3, #1
 8005892:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005894:	e7b6      	b.n	8005804 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005896:	4b17      	ldr	r3, [pc, #92]	; (80058f4 <xTaskIncrementTick+0x164>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589c:	4914      	ldr	r1, [pc, #80]	; (80058f0 <xTaskIncrementTick+0x160>)
 800589e:	4613      	mov	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	440b      	add	r3, r1
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d901      	bls.n	80058b2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80058ae:	2301      	movs	r3, #1
 80058b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80058b2:	4b11      	ldr	r3, [pc, #68]	; (80058f8 <xTaskIncrementTick+0x168>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d007      	beq.n	80058ca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80058ba:	2301      	movs	r3, #1
 80058bc:	617b      	str	r3, [r7, #20]
 80058be:	e004      	b.n	80058ca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058c0:	4b0e      	ldr	r3, [pc, #56]	; (80058fc <xTaskIncrementTick+0x16c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3301      	adds	r3, #1
 80058c6:	4a0d      	ldr	r2, [pc, #52]	; (80058fc <xTaskIncrementTick+0x16c>)
 80058c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80058ca:	697b      	ldr	r3, [r7, #20]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3718      	adds	r7, #24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	20000920 	.word	0x20000920
 80058d8:	200008fc 	.word	0x200008fc
 80058dc:	200008b0 	.word	0x200008b0
 80058e0:	200008b4 	.word	0x200008b4
 80058e4:	20000910 	.word	0x20000910
 80058e8:	20000918 	.word	0x20000918
 80058ec:	20000900 	.word	0x20000900
 80058f0:	200007fc 	.word	0x200007fc
 80058f4:	200007f8 	.word	0x200007f8
 80058f8:	2000090c 	.word	0x2000090c
 80058fc:	20000908 	.word	0x20000908

08005900 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005906:	4b27      	ldr	r3, [pc, #156]	; (80059a4 <vTaskSwitchContext+0xa4>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800590e:	4b26      	ldr	r3, [pc, #152]	; (80059a8 <vTaskSwitchContext+0xa8>)
 8005910:	2201      	movs	r2, #1
 8005912:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005914:	e03f      	b.n	8005996 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005916:	4b24      	ldr	r3, [pc, #144]	; (80059a8 <vTaskSwitchContext+0xa8>)
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800591c:	4b23      	ldr	r3, [pc, #140]	; (80059ac <vTaskSwitchContext+0xac>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	fab3 f383 	clz	r3, r3
 8005928:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800592a:	7afb      	ldrb	r3, [r7, #11]
 800592c:	f1c3 031f 	rsb	r3, r3, #31
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	491f      	ldr	r1, [pc, #124]	; (80059b0 <vTaskSwitchContext+0xb0>)
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4613      	mov	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	440b      	add	r3, r1
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10a      	bne.n	800595c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	607b      	str	r3, [r7, #4]
}
 8005958:	bf00      	nop
 800595a:	e7fe      	b.n	800595a <vTaskSwitchContext+0x5a>
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	4613      	mov	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4a12      	ldr	r2, [pc, #72]	; (80059b0 <vTaskSwitchContext+0xb0>)
 8005968:	4413      	add	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	605a      	str	r2, [r3, #4]
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	3308      	adds	r3, #8
 800597e:	429a      	cmp	r2, r3
 8005980:	d104      	bne.n	800598c <vTaskSwitchContext+0x8c>
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	605a      	str	r2, [r3, #4]
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	4a08      	ldr	r2, [pc, #32]	; (80059b4 <vTaskSwitchContext+0xb4>)
 8005994:	6013      	str	r3, [r2, #0]
}
 8005996:	bf00      	nop
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	20000920 	.word	0x20000920
 80059a8:	2000090c 	.word	0x2000090c
 80059ac:	20000900 	.word	0x20000900
 80059b0:	200007fc 	.word	0x200007fc
 80059b4:	200007f8 	.word	0x200007f8

080059b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10a      	bne.n	80059de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80059c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	60fb      	str	r3, [r7, #12]
}
 80059da:	bf00      	nop
 80059dc:	e7fe      	b.n	80059dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059de:	4b07      	ldr	r3, [pc, #28]	; (80059fc <vTaskPlaceOnEventList+0x44>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3318      	adds	r3, #24
 80059e4:	4619      	mov	r1, r3
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fe ff74 	bl	80048d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059ec:	2101      	movs	r1, #1
 80059ee:	6838      	ldr	r0, [r7, #0]
 80059f0:	f000 fa66 	bl	8005ec0 <prvAddCurrentTaskToDelayedList>
}
 80059f4:	bf00      	nop
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	200007f8 	.word	0x200007f8

08005a00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10a      	bne.n	8005a2c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	60fb      	str	r3, [r7, #12]
}
 8005a28:	bf00      	nop
 8005a2a:	e7fe      	b.n	8005a2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	3318      	adds	r3, #24
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fe ff88 	bl	8004946 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a36:	4b1d      	ldr	r3, [pc, #116]	; (8005aac <xTaskRemoveFromEventList+0xac>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d11c      	bne.n	8005a78 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	3304      	adds	r3, #4
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fe ff7f 	bl	8004946 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	409a      	lsls	r2, r3
 8005a50:	4b17      	ldr	r3, [pc, #92]	; (8005ab0 <xTaskRemoveFromEventList+0xb0>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	4a16      	ldr	r2, [pc, #88]	; (8005ab0 <xTaskRemoveFromEventList+0xb0>)
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4a13      	ldr	r2, [pc, #76]	; (8005ab4 <xTaskRemoveFromEventList+0xb4>)
 8005a68:	441a      	add	r2, r3
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4610      	mov	r0, r2
 8005a72:	f7fe ff0b 	bl	800488c <vListInsertEnd>
 8005a76:	e005      	b.n	8005a84 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	3318      	adds	r3, #24
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	480e      	ldr	r0, [pc, #56]	; (8005ab8 <xTaskRemoveFromEventList+0xb8>)
 8005a80:	f7fe ff04 	bl	800488c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a88:	4b0c      	ldr	r3, [pc, #48]	; (8005abc <xTaskRemoveFromEventList+0xbc>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d905      	bls.n	8005a9e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a92:	2301      	movs	r3, #1
 8005a94:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a96:	4b0a      	ldr	r3, [pc, #40]	; (8005ac0 <xTaskRemoveFromEventList+0xc0>)
 8005a98:	2201      	movs	r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	e001      	b.n	8005aa2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005aa2:	697b      	ldr	r3, [r7, #20]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	20000920 	.word	0x20000920
 8005ab0:	20000900 	.word	0x20000900
 8005ab4:	200007fc 	.word	0x200007fc
 8005ab8:	200008b8 	.word	0x200008b8
 8005abc:	200007f8 	.word	0x200007f8
 8005ac0:	2000090c 	.word	0x2000090c

08005ac4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005acc:	4b06      	ldr	r3, [pc, #24]	; (8005ae8 <vTaskInternalSetTimeOutState+0x24>)
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ad4:	4b05      	ldr	r3, [pc, #20]	; (8005aec <vTaskInternalSetTimeOutState+0x28>)
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	605a      	str	r2, [r3, #4]
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	20000910 	.word	0x20000910
 8005aec:	200008fc 	.word	0x200008fc

08005af0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10a      	bne.n	8005b16 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	613b      	str	r3, [r7, #16]
}
 8005b12:	bf00      	nop
 8005b14:	e7fe      	b.n	8005b14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10a      	bne.n	8005b32 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	60fb      	str	r3, [r7, #12]
}
 8005b2e:	bf00      	nop
 8005b30:	e7fe      	b.n	8005b30 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005b32:	f000 fb57 	bl	80061e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b36:	4b1d      	ldr	r3, [pc, #116]	; (8005bac <xTaskCheckForTimeOut+0xbc>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4e:	d102      	bne.n	8005b56 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b50:	2300      	movs	r3, #0
 8005b52:	61fb      	str	r3, [r7, #28]
 8005b54:	e023      	b.n	8005b9e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	4b15      	ldr	r3, [pc, #84]	; (8005bb0 <xTaskCheckForTimeOut+0xc0>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d007      	beq.n	8005b72 <xTaskCheckForTimeOut+0x82>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d302      	bcc.n	8005b72 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	61fb      	str	r3, [r7, #28]
 8005b70:	e015      	b.n	8005b9e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d20b      	bcs.n	8005b94 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	1ad2      	subs	r2, r2, r3
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7ff ff9b 	bl	8005ac4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	61fb      	str	r3, [r7, #28]
 8005b92:	e004      	b.n	8005b9e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2200      	movs	r2, #0
 8005b98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b9e:	f000 fb51 	bl	8006244 <vPortExitCritical>

	return xReturn;
 8005ba2:	69fb      	ldr	r3, [r7, #28]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3720      	adds	r7, #32
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	200008fc 	.word	0x200008fc
 8005bb0:	20000910 	.word	0x20000910

08005bb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005bb8:	4b03      	ldr	r3, [pc, #12]	; (8005bc8 <vTaskMissedYield+0x14>)
 8005bba:	2201      	movs	r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]
}
 8005bbe:	bf00      	nop
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	2000090c 	.word	0x2000090c

08005bcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005bd4:	f000 f852 	bl	8005c7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005bd8:	4b06      	ldr	r3, [pc, #24]	; (8005bf4 <prvIdleTask+0x28>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d9f9      	bls.n	8005bd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005be0:	4b05      	ldr	r3, [pc, #20]	; (8005bf8 <prvIdleTask+0x2c>)
 8005be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005bf0:	e7f0      	b.n	8005bd4 <prvIdleTask+0x8>
 8005bf2:	bf00      	nop
 8005bf4:	200007fc 	.word	0x200007fc
 8005bf8:	e000ed04 	.word	0xe000ed04

08005bfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c02:	2300      	movs	r3, #0
 8005c04:	607b      	str	r3, [r7, #4]
 8005c06:	e00c      	b.n	8005c22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4a12      	ldr	r2, [pc, #72]	; (8005c5c <prvInitialiseTaskLists+0x60>)
 8005c14:	4413      	add	r3, r2
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fe fe0b 	bl	8004832 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	607b      	str	r3, [r7, #4]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b06      	cmp	r3, #6
 8005c26:	d9ef      	bls.n	8005c08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c28:	480d      	ldr	r0, [pc, #52]	; (8005c60 <prvInitialiseTaskLists+0x64>)
 8005c2a:	f7fe fe02 	bl	8004832 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c2e:	480d      	ldr	r0, [pc, #52]	; (8005c64 <prvInitialiseTaskLists+0x68>)
 8005c30:	f7fe fdff 	bl	8004832 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c34:	480c      	ldr	r0, [pc, #48]	; (8005c68 <prvInitialiseTaskLists+0x6c>)
 8005c36:	f7fe fdfc 	bl	8004832 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c3a:	480c      	ldr	r0, [pc, #48]	; (8005c6c <prvInitialiseTaskLists+0x70>)
 8005c3c:	f7fe fdf9 	bl	8004832 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c40:	480b      	ldr	r0, [pc, #44]	; (8005c70 <prvInitialiseTaskLists+0x74>)
 8005c42:	f7fe fdf6 	bl	8004832 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c46:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <prvInitialiseTaskLists+0x78>)
 8005c48:	4a05      	ldr	r2, [pc, #20]	; (8005c60 <prvInitialiseTaskLists+0x64>)
 8005c4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	; (8005c78 <prvInitialiseTaskLists+0x7c>)
 8005c4e:	4a05      	ldr	r2, [pc, #20]	; (8005c64 <prvInitialiseTaskLists+0x68>)
 8005c50:	601a      	str	r2, [r3, #0]
}
 8005c52:	bf00      	nop
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	200007fc 	.word	0x200007fc
 8005c60:	20000888 	.word	0x20000888
 8005c64:	2000089c 	.word	0x2000089c
 8005c68:	200008b8 	.word	0x200008b8
 8005c6c:	200008cc 	.word	0x200008cc
 8005c70:	200008e4 	.word	0x200008e4
 8005c74:	200008b0 	.word	0x200008b0
 8005c78:	200008b4 	.word	0x200008b4

08005c7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c82:	e019      	b.n	8005cb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c84:	f000 faae 	bl	80061e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c88:	4b10      	ldr	r3, [pc, #64]	; (8005ccc <prvCheckTasksWaitingTermination+0x50>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3304      	adds	r3, #4
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fe fe56 	bl	8004946 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c9a:	4b0d      	ldr	r3, [pc, #52]	; (8005cd0 <prvCheckTasksWaitingTermination+0x54>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	4a0b      	ldr	r2, [pc, #44]	; (8005cd0 <prvCheckTasksWaitingTermination+0x54>)
 8005ca2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ca4:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <prvCheckTasksWaitingTermination+0x58>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	4a0a      	ldr	r2, [pc, #40]	; (8005cd4 <prvCheckTasksWaitingTermination+0x58>)
 8005cac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005cae:	f000 fac9 	bl	8006244 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f810 	bl	8005cd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cb8:	4b06      	ldr	r3, [pc, #24]	; (8005cd4 <prvCheckTasksWaitingTermination+0x58>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1e1      	bne.n	8005c84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005cc0:	bf00      	nop
 8005cc2:	bf00      	nop
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	200008cc 	.word	0x200008cc
 8005cd0:	200008f8 	.word	0x200008f8
 8005cd4:	200008e0 	.word	0x200008e0

08005cd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d108      	bne.n	8005cfc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 fc26 	bl	8006540 <vPortFree>
				vPortFree( pxTCB );
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fc23 	bl	8006540 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005cfa:	e018      	b.n	8005d2e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d103      	bne.n	8005d0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 fc1a 	bl	8006540 <vPortFree>
	}
 8005d0c:	e00f      	b.n	8005d2e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d00a      	beq.n	8005d2e <prvDeleteTCB+0x56>
	__asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	60fb      	str	r3, [r7, #12]
}
 8005d2a:	bf00      	nop
 8005d2c:	e7fe      	b.n	8005d2c <prvDeleteTCB+0x54>
	}
 8005d2e:	bf00      	nop
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d3e:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <prvResetNextTaskUnblockTime+0x38>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d104      	bne.n	8005d52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d48:	4b0a      	ldr	r3, [pc, #40]	; (8005d74 <prvResetNextTaskUnblockTime+0x3c>)
 8005d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d50:	e008      	b.n	8005d64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d52:	4b07      	ldr	r3, [pc, #28]	; (8005d70 <prvResetNextTaskUnblockTime+0x38>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	4a04      	ldr	r2, [pc, #16]	; (8005d74 <prvResetNextTaskUnblockTime+0x3c>)
 8005d62:	6013      	str	r3, [r2, #0]
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	200008b0 	.word	0x200008b0
 8005d74:	20000918 	.word	0x20000918

08005d78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d7e:	4b0b      	ldr	r3, [pc, #44]	; (8005dac <xTaskGetSchedulerState+0x34>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d102      	bne.n	8005d8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d86:	2301      	movs	r3, #1
 8005d88:	607b      	str	r3, [r7, #4]
 8005d8a:	e008      	b.n	8005d9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d8c:	4b08      	ldr	r3, [pc, #32]	; (8005db0 <xTaskGetSchedulerState+0x38>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d102      	bne.n	8005d9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d94:	2302      	movs	r3, #2
 8005d96:	607b      	str	r3, [r7, #4]
 8005d98:	e001      	b.n	8005d9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d9e:	687b      	ldr	r3, [r7, #4]
	}
 8005da0:	4618      	mov	r0, r3
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	20000904 	.word	0x20000904
 8005db0:	20000920 	.word	0x20000920

08005db4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d06e      	beq.n	8005ea8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005dca:	4b3a      	ldr	r3, [pc, #232]	; (8005eb4 <xTaskPriorityDisinherit+0x100>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d00a      	beq.n	8005dea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	60fb      	str	r3, [r7, #12]
}
 8005de6:	bf00      	nop
 8005de8:	e7fe      	b.n	8005de8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10a      	bne.n	8005e08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df6:	f383 8811 	msr	BASEPRI, r3
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	60bb      	str	r3, [r7, #8]
}
 8005e04:	bf00      	nop
 8005e06:	e7fe      	b.n	8005e06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e0c:	1e5a      	subs	r2, r3, #1
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d044      	beq.n	8005ea8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d140      	bne.n	8005ea8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	3304      	adds	r3, #4
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fe fd8b 	bl	8004946 <uxListRemove>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d115      	bne.n	8005e62 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e3a:	491f      	ldr	r1, [pc, #124]	; (8005eb8 <xTaskPriorityDisinherit+0x104>)
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	440b      	add	r3, r1
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10a      	bne.n	8005e62 <xTaskPriorityDisinherit+0xae>
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e50:	2201      	movs	r2, #1
 8005e52:	fa02 f303 	lsl.w	r3, r2, r3
 8005e56:	43da      	mvns	r2, r3
 8005e58:	4b18      	ldr	r3, [pc, #96]	; (8005ebc <xTaskPriorityDisinherit+0x108>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	4a17      	ldr	r2, [pc, #92]	; (8005ebc <xTaskPriorityDisinherit+0x108>)
 8005e60:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6e:	f1c3 0207 	rsb	r2, r3, #7
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	409a      	lsls	r2, r3
 8005e7e:	4b0f      	ldr	r3, [pc, #60]	; (8005ebc <xTaskPriorityDisinherit+0x108>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	4a0d      	ldr	r2, [pc, #52]	; (8005ebc <xTaskPriorityDisinherit+0x108>)
 8005e86:	6013      	str	r3, [r2, #0]
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4a08      	ldr	r2, [pc, #32]	; (8005eb8 <xTaskPriorityDisinherit+0x104>)
 8005e96:	441a      	add	r2, r3
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	f7fe fcf4 	bl	800488c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ea8:	697b      	ldr	r3, [r7, #20]
	}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3718      	adds	r7, #24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	200007f8 	.word	0x200007f8
 8005eb8:	200007fc 	.word	0x200007fc
 8005ebc:	20000900 	.word	0x20000900

08005ec0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005eca:	4b29      	ldr	r3, [pc, #164]	; (8005f70 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ed0:	4b28      	ldr	r3, [pc, #160]	; (8005f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fe fd35 	bl	8004946 <uxListRemove>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10b      	bne.n	8005efa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005ee2:	4b24      	ldr	r3, [pc, #144]	; (8005f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee8:	2201      	movs	r2, #1
 8005eea:	fa02 f303 	lsl.w	r3, r2, r3
 8005eee:	43da      	mvns	r2, r3
 8005ef0:	4b21      	ldr	r3, [pc, #132]	; (8005f78 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	4a20      	ldr	r2, [pc, #128]	; (8005f78 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ef8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f00:	d10a      	bne.n	8005f18 <prvAddCurrentTaskToDelayedList+0x58>
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d007      	beq.n	8005f18 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f08:	4b1a      	ldr	r3, [pc, #104]	; (8005f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	4619      	mov	r1, r3
 8005f10:	481a      	ldr	r0, [pc, #104]	; (8005f7c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005f12:	f7fe fcbb 	bl	800488c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f16:	e026      	b.n	8005f66 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f20:	4b14      	ldr	r3, [pc, #80]	; (8005f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d209      	bcs.n	8005f44 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f30:	4b13      	ldr	r3, [pc, #76]	; (8005f80 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	4b0f      	ldr	r3, [pc, #60]	; (8005f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	f7fe fcc9 	bl	80048d4 <vListInsert>
}
 8005f42:	e010      	b.n	8005f66 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f44:	4b0f      	ldr	r3, [pc, #60]	; (8005f84 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	4b0a      	ldr	r3, [pc, #40]	; (8005f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4610      	mov	r0, r2
 8005f52:	f7fe fcbf 	bl	80048d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f56:	4b0c      	ldr	r3, [pc, #48]	; (8005f88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d202      	bcs.n	8005f66 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f60:	4a09      	ldr	r2, [pc, #36]	; (8005f88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	6013      	str	r3, [r2, #0]
}
 8005f66:	bf00      	nop
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	200008fc 	.word	0x200008fc
 8005f74:	200007f8 	.word	0x200007f8
 8005f78:	20000900 	.word	0x20000900
 8005f7c:	200008e4 	.word	0x200008e4
 8005f80:	200008b4 	.word	0x200008b4
 8005f84:	200008b0 	.word	0x200008b0
 8005f88:	20000918 	.word	0x20000918

08005f8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3b04      	subs	r3, #4
 8005f9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	3b04      	subs	r3, #4
 8005faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f023 0201 	bic.w	r2, r3, #1
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3b04      	subs	r3, #4
 8005fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fbc:	4a0c      	ldr	r2, [pc, #48]	; (8005ff0 <pxPortInitialiseStack+0x64>)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3b14      	subs	r3, #20
 8005fc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3b04      	subs	r3, #4
 8005fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f06f 0202 	mvn.w	r2, #2
 8005fda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3b20      	subs	r3, #32
 8005fe0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	08005ff5 	.word	0x08005ff5

08005ff4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ffe:	4b12      	ldr	r3, [pc, #72]	; (8006048 <prvTaskExitError+0x54>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006006:	d00a      	beq.n	800601e <prvTaskExitError+0x2a>
	__asm volatile
 8006008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600c:	f383 8811 	msr	BASEPRI, r3
 8006010:	f3bf 8f6f 	isb	sy
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	60fb      	str	r3, [r7, #12]
}
 800601a:	bf00      	nop
 800601c:	e7fe      	b.n	800601c <prvTaskExitError+0x28>
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	60bb      	str	r3, [r7, #8]
}
 8006030:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006032:	bf00      	nop
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d0fc      	beq.n	8006034 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800603a:	bf00      	nop
 800603c:	bf00      	nop
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	20000014 	.word	0x20000014
 800604c:	00000000 	.word	0x00000000

08006050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006050:	4b07      	ldr	r3, [pc, #28]	; (8006070 <pxCurrentTCBConst2>)
 8006052:	6819      	ldr	r1, [r3, #0]
 8006054:	6808      	ldr	r0, [r1, #0]
 8006056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605a:	f380 8809 	msr	PSP, r0
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f04f 0000 	mov.w	r0, #0
 8006066:	f380 8811 	msr	BASEPRI, r0
 800606a:	4770      	bx	lr
 800606c:	f3af 8000 	nop.w

08006070 <pxCurrentTCBConst2>:
 8006070:	200007f8 	.word	0x200007f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006074:	bf00      	nop
 8006076:	bf00      	nop

08006078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006078:	4808      	ldr	r0, [pc, #32]	; (800609c <prvPortStartFirstTask+0x24>)
 800607a:	6800      	ldr	r0, [r0, #0]
 800607c:	6800      	ldr	r0, [r0, #0]
 800607e:	f380 8808 	msr	MSP, r0
 8006082:	f04f 0000 	mov.w	r0, #0
 8006086:	f380 8814 	msr	CONTROL, r0
 800608a:	b662      	cpsie	i
 800608c:	b661      	cpsie	f
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	df00      	svc	0
 8006098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800609a:	bf00      	nop
 800609c:	e000ed08 	.word	0xe000ed08

080060a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060a6:	4b46      	ldr	r3, [pc, #280]	; (80061c0 <xPortStartScheduler+0x120>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a46      	ldr	r2, [pc, #280]	; (80061c4 <xPortStartScheduler+0x124>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d10a      	bne.n	80060c6 <xPortStartScheduler+0x26>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	613b      	str	r3, [r7, #16]
}
 80060c2:	bf00      	nop
 80060c4:	e7fe      	b.n	80060c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060c6:	4b3e      	ldr	r3, [pc, #248]	; (80061c0 <xPortStartScheduler+0x120>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a3f      	ldr	r2, [pc, #252]	; (80061c8 <xPortStartScheduler+0x128>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d10a      	bne.n	80060e6 <xPortStartScheduler+0x46>
	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	60fb      	str	r3, [r7, #12]
}
 80060e2:	bf00      	nop
 80060e4:	e7fe      	b.n	80060e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060e6:	4b39      	ldr	r3, [pc, #228]	; (80061cc <xPortStartScheduler+0x12c>)
 80060e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	22ff      	movs	r2, #255	; 0xff
 80060f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006100:	78fb      	ldrb	r3, [r7, #3]
 8006102:	b2db      	uxtb	r3, r3
 8006104:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006108:	b2da      	uxtb	r2, r3
 800610a:	4b31      	ldr	r3, [pc, #196]	; (80061d0 <xPortStartScheduler+0x130>)
 800610c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800610e:	4b31      	ldr	r3, [pc, #196]	; (80061d4 <xPortStartScheduler+0x134>)
 8006110:	2207      	movs	r2, #7
 8006112:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006114:	e009      	b.n	800612a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006116:	4b2f      	ldr	r3, [pc, #188]	; (80061d4 <xPortStartScheduler+0x134>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3b01      	subs	r3, #1
 800611c:	4a2d      	ldr	r2, [pc, #180]	; (80061d4 <xPortStartScheduler+0x134>)
 800611e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006120:	78fb      	ldrb	r3, [r7, #3]
 8006122:	b2db      	uxtb	r3, r3
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	b2db      	uxtb	r3, r3
 8006128:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800612a:	78fb      	ldrb	r3, [r7, #3]
 800612c:	b2db      	uxtb	r3, r3
 800612e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006132:	2b80      	cmp	r3, #128	; 0x80
 8006134:	d0ef      	beq.n	8006116 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006136:	4b27      	ldr	r3, [pc, #156]	; (80061d4 <xPortStartScheduler+0x134>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f1c3 0307 	rsb	r3, r3, #7
 800613e:	2b04      	cmp	r3, #4
 8006140:	d00a      	beq.n	8006158 <xPortStartScheduler+0xb8>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	60bb      	str	r3, [r7, #8]
}
 8006154:	bf00      	nop
 8006156:	e7fe      	b.n	8006156 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006158:	4b1e      	ldr	r3, [pc, #120]	; (80061d4 <xPortStartScheduler+0x134>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	021b      	lsls	r3, r3, #8
 800615e:	4a1d      	ldr	r2, [pc, #116]	; (80061d4 <xPortStartScheduler+0x134>)
 8006160:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006162:	4b1c      	ldr	r3, [pc, #112]	; (80061d4 <xPortStartScheduler+0x134>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800616a:	4a1a      	ldr	r2, [pc, #104]	; (80061d4 <xPortStartScheduler+0x134>)
 800616c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	b2da      	uxtb	r2, r3
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006176:	4b18      	ldr	r3, [pc, #96]	; (80061d8 <xPortStartScheduler+0x138>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a17      	ldr	r2, [pc, #92]	; (80061d8 <xPortStartScheduler+0x138>)
 800617c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006180:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006182:	4b15      	ldr	r3, [pc, #84]	; (80061d8 <xPortStartScheduler+0x138>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a14      	ldr	r2, [pc, #80]	; (80061d8 <xPortStartScheduler+0x138>)
 8006188:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800618c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800618e:	f000 f8dd 	bl	800634c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006192:	4b12      	ldr	r3, [pc, #72]	; (80061dc <xPortStartScheduler+0x13c>)
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006198:	f000 f8fc 	bl	8006394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800619c:	4b10      	ldr	r3, [pc, #64]	; (80061e0 <xPortStartScheduler+0x140>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a0f      	ldr	r2, [pc, #60]	; (80061e0 <xPortStartScheduler+0x140>)
 80061a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061a8:	f7ff ff66 	bl	8006078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061ac:	f7ff fba8 	bl	8005900 <vTaskSwitchContext>
	prvTaskExitError();
 80061b0:	f7ff ff20 	bl	8005ff4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3718      	adds	r7, #24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	e000ed00 	.word	0xe000ed00
 80061c4:	410fc271 	.word	0x410fc271
 80061c8:	410fc270 	.word	0x410fc270
 80061cc:	e000e400 	.word	0xe000e400
 80061d0:	20000924 	.word	0x20000924
 80061d4:	20000928 	.word	0x20000928
 80061d8:	e000ed20 	.word	0xe000ed20
 80061dc:	20000014 	.word	0x20000014
 80061e0:	e000ef34 	.word	0xe000ef34

080061e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
	__asm volatile
 80061ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	607b      	str	r3, [r7, #4]
}
 80061fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061fe:	4b0f      	ldr	r3, [pc, #60]	; (800623c <vPortEnterCritical+0x58>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3301      	adds	r3, #1
 8006204:	4a0d      	ldr	r2, [pc, #52]	; (800623c <vPortEnterCritical+0x58>)
 8006206:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006208:	4b0c      	ldr	r3, [pc, #48]	; (800623c <vPortEnterCritical+0x58>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d10f      	bne.n	8006230 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006210:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <vPortEnterCritical+0x5c>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00a      	beq.n	8006230 <vPortEnterCritical+0x4c>
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	603b      	str	r3, [r7, #0]
}
 800622c:	bf00      	nop
 800622e:	e7fe      	b.n	800622e <vPortEnterCritical+0x4a>
	}
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	20000014 	.word	0x20000014
 8006240:	e000ed04 	.word	0xe000ed04

08006244 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800624a:	4b12      	ldr	r3, [pc, #72]	; (8006294 <vPortExitCritical+0x50>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10a      	bne.n	8006268 <vPortExitCritical+0x24>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	607b      	str	r3, [r7, #4]
}
 8006264:	bf00      	nop
 8006266:	e7fe      	b.n	8006266 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006268:	4b0a      	ldr	r3, [pc, #40]	; (8006294 <vPortExitCritical+0x50>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3b01      	subs	r3, #1
 800626e:	4a09      	ldr	r2, [pc, #36]	; (8006294 <vPortExitCritical+0x50>)
 8006270:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006272:	4b08      	ldr	r3, [pc, #32]	; (8006294 <vPortExitCritical+0x50>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d105      	bne.n	8006286 <vPortExitCritical+0x42>
 800627a:	2300      	movs	r3, #0
 800627c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006284:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006286:	bf00      	nop
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	20000014 	.word	0x20000014
	...

080062a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062a0:	f3ef 8009 	mrs	r0, PSP
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	4b15      	ldr	r3, [pc, #84]	; (8006300 <pxCurrentTCBConst>)
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	f01e 0f10 	tst.w	lr, #16
 80062b0:	bf08      	it	eq
 80062b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ba:	6010      	str	r0, [r2, #0]
 80062bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062c4:	f380 8811 	msr	BASEPRI, r0
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f7ff fb16 	bl	8005900 <vTaskSwitchContext>
 80062d4:	f04f 0000 	mov.w	r0, #0
 80062d8:	f380 8811 	msr	BASEPRI, r0
 80062dc:	bc09      	pop	{r0, r3}
 80062de:	6819      	ldr	r1, [r3, #0]
 80062e0:	6808      	ldr	r0, [r1, #0]
 80062e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e6:	f01e 0f10 	tst.w	lr, #16
 80062ea:	bf08      	it	eq
 80062ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062f0:	f380 8809 	msr	PSP, r0
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	f3af 8000 	nop.w

08006300 <pxCurrentTCBConst>:
 8006300:	200007f8 	.word	0x200007f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop

08006308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	607b      	str	r3, [r7, #4]
}
 8006320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006322:	f7ff fa35 	bl	8005790 <xTaskIncrementTick>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800632c:	4b06      	ldr	r3, [pc, #24]	; (8006348 <SysTick_Handler+0x40>)
 800632e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	2300      	movs	r3, #0
 8006336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	f383 8811 	msr	BASEPRI, r3
}
 800633e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006340:	bf00      	nop
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	e000ed04 	.word	0xe000ed04

0800634c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800634c:	b480      	push	{r7}
 800634e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006350:	4b0b      	ldr	r3, [pc, #44]	; (8006380 <vPortSetupTimerInterrupt+0x34>)
 8006352:	2200      	movs	r2, #0
 8006354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006356:	4b0b      	ldr	r3, [pc, #44]	; (8006384 <vPortSetupTimerInterrupt+0x38>)
 8006358:	2200      	movs	r2, #0
 800635a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800635c:	4b0a      	ldr	r3, [pc, #40]	; (8006388 <vPortSetupTimerInterrupt+0x3c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a0a      	ldr	r2, [pc, #40]	; (800638c <vPortSetupTimerInterrupt+0x40>)
 8006362:	fba2 2303 	umull	r2, r3, r2, r3
 8006366:	099b      	lsrs	r3, r3, #6
 8006368:	4a09      	ldr	r2, [pc, #36]	; (8006390 <vPortSetupTimerInterrupt+0x44>)
 800636a:	3b01      	subs	r3, #1
 800636c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800636e:	4b04      	ldr	r3, [pc, #16]	; (8006380 <vPortSetupTimerInterrupt+0x34>)
 8006370:	2207      	movs	r2, #7
 8006372:	601a      	str	r2, [r3, #0]
}
 8006374:	bf00      	nop
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	e000e010 	.word	0xe000e010
 8006384:	e000e018 	.word	0xe000e018
 8006388:	20000008 	.word	0x20000008
 800638c:	10624dd3 	.word	0x10624dd3
 8006390:	e000e014 	.word	0xe000e014

08006394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006394:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80063a4 <vPortEnableVFP+0x10>
 8006398:	6801      	ldr	r1, [r0, #0]
 800639a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800639e:	6001      	str	r1, [r0, #0]
 80063a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063a2:	bf00      	nop
 80063a4:	e000ed88 	.word	0xe000ed88

080063a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b08a      	sub	sp, #40	; 0x28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063b0:	2300      	movs	r3, #0
 80063b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063b4:	f7ff f942 	bl	800563c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063b8:	4b5b      	ldr	r3, [pc, #364]	; (8006528 <pvPortMalloc+0x180>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d101      	bne.n	80063c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063c0:	f000 f920 	bl	8006604 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063c4:	4b59      	ldr	r3, [pc, #356]	; (800652c <pvPortMalloc+0x184>)
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4013      	ands	r3, r2
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f040 8093 	bne.w	80064f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d01d      	beq.n	8006414 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80063d8:	2208      	movs	r2, #8
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4413      	add	r3, r2
 80063de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f003 0307 	and.w	r3, r3, #7
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d014      	beq.n	8006414 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f023 0307 	bic.w	r3, r3, #7
 80063f0:	3308      	adds	r3, #8
 80063f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <pvPortMalloc+0x6c>
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	617b      	str	r3, [r7, #20]
}
 8006410:	bf00      	nop
 8006412:	e7fe      	b.n	8006412 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d06e      	beq.n	80064f8 <pvPortMalloc+0x150>
 800641a:	4b45      	ldr	r3, [pc, #276]	; (8006530 <pvPortMalloc+0x188>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	429a      	cmp	r2, r3
 8006422:	d869      	bhi.n	80064f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006424:	4b43      	ldr	r3, [pc, #268]	; (8006534 <pvPortMalloc+0x18c>)
 8006426:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006428:	4b42      	ldr	r3, [pc, #264]	; (8006534 <pvPortMalloc+0x18c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800642e:	e004      	b.n	800643a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	429a      	cmp	r2, r3
 8006442:	d903      	bls.n	800644c <pvPortMalloc+0xa4>
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1f1      	bne.n	8006430 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800644c:	4b36      	ldr	r3, [pc, #216]	; (8006528 <pvPortMalloc+0x180>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006452:	429a      	cmp	r2, r3
 8006454:	d050      	beq.n	80064f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2208      	movs	r2, #8
 800645c:	4413      	add	r3, r2
 800645e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	1ad2      	subs	r2, r2, r3
 8006470:	2308      	movs	r3, #8
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	429a      	cmp	r2, r3
 8006476:	d91f      	bls.n	80064b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4413      	add	r3, r2
 800647e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <pvPortMalloc+0xf8>
	__asm volatile
 800648a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	613b      	str	r3, [r7, #16]
}
 800649c:	bf00      	nop
 800649e:	e7fe      	b.n	800649e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	1ad2      	subs	r2, r2, r3
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064b2:	69b8      	ldr	r0, [r7, #24]
 80064b4:	f000 f908 	bl	80066c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064b8:	4b1d      	ldr	r3, [pc, #116]	; (8006530 <pvPortMalloc+0x188>)
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	4a1b      	ldr	r2, [pc, #108]	; (8006530 <pvPortMalloc+0x188>)
 80064c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064c6:	4b1a      	ldr	r3, [pc, #104]	; (8006530 <pvPortMalloc+0x188>)
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	4b1b      	ldr	r3, [pc, #108]	; (8006538 <pvPortMalloc+0x190>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d203      	bcs.n	80064da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064d2:	4b17      	ldr	r3, [pc, #92]	; (8006530 <pvPortMalloc+0x188>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a18      	ldr	r2, [pc, #96]	; (8006538 <pvPortMalloc+0x190>)
 80064d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	4b13      	ldr	r3, [pc, #76]	; (800652c <pvPortMalloc+0x184>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	431a      	orrs	r2, r3
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	2200      	movs	r2, #0
 80064ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80064ee:	4b13      	ldr	r3, [pc, #76]	; (800653c <pvPortMalloc+0x194>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3301      	adds	r3, #1
 80064f4:	4a11      	ldr	r2, [pc, #68]	; (800653c <pvPortMalloc+0x194>)
 80064f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064f8:	f7ff f8ae 	bl	8005658 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	f003 0307 	and.w	r3, r3, #7
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00a      	beq.n	800651c <pvPortMalloc+0x174>
	__asm volatile
 8006506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650a:	f383 8811 	msr	BASEPRI, r3
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	60fb      	str	r3, [r7, #12]
}
 8006518:	bf00      	nop
 800651a:	e7fe      	b.n	800651a <pvPortMalloc+0x172>
	return pvReturn;
 800651c:	69fb      	ldr	r3, [r7, #28]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3728      	adds	r7, #40	; 0x28
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	20004534 	.word	0x20004534
 800652c:	20004548 	.word	0x20004548
 8006530:	20004538 	.word	0x20004538
 8006534:	2000452c 	.word	0x2000452c
 8006538:	2000453c 	.word	0x2000453c
 800653c:	20004540 	.word	0x20004540

08006540 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d04d      	beq.n	80065ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006552:	2308      	movs	r3, #8
 8006554:	425b      	negs	r3, r3
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	4413      	add	r3, r2
 800655a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	4b24      	ldr	r3, [pc, #144]	; (80065f8 <vPortFree+0xb8>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4013      	ands	r3, r2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10a      	bne.n	8006584 <vPortFree+0x44>
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	60fb      	str	r3, [r7, #12]
}
 8006580:	bf00      	nop
 8006582:	e7fe      	b.n	8006582 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <vPortFree+0x62>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	60bb      	str	r3, [r7, #8]
}
 800659e:	bf00      	nop
 80065a0:	e7fe      	b.n	80065a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	4b14      	ldr	r3, [pc, #80]	; (80065f8 <vPortFree+0xb8>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d01e      	beq.n	80065ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d11a      	bne.n	80065ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	4b0e      	ldr	r3, [pc, #56]	; (80065f8 <vPortFree+0xb8>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	43db      	mvns	r3, r3
 80065c2:	401a      	ands	r2, r3
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065c8:	f7ff f838 	bl	800563c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	4b0a      	ldr	r3, [pc, #40]	; (80065fc <vPortFree+0xbc>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4413      	add	r3, r2
 80065d6:	4a09      	ldr	r2, [pc, #36]	; (80065fc <vPortFree+0xbc>)
 80065d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065da:	6938      	ldr	r0, [r7, #16]
 80065dc:	f000 f874 	bl	80066c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80065e0:	4b07      	ldr	r3, [pc, #28]	; (8006600 <vPortFree+0xc0>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3301      	adds	r3, #1
 80065e6:	4a06      	ldr	r2, [pc, #24]	; (8006600 <vPortFree+0xc0>)
 80065e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80065ea:	f7ff f835 	bl	8005658 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80065ee:	bf00      	nop
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20004548 	.word	0x20004548
 80065fc:	20004538 	.word	0x20004538
 8006600:	20004544 	.word	0x20004544

08006604 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800660a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800660e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006610:	4b27      	ldr	r3, [pc, #156]	; (80066b0 <prvHeapInit+0xac>)
 8006612:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f003 0307 	and.w	r3, r3, #7
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00c      	beq.n	8006638 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3307      	adds	r3, #7
 8006622:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 0307 	bic.w	r3, r3, #7
 800662a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	4a1f      	ldr	r2, [pc, #124]	; (80066b0 <prvHeapInit+0xac>)
 8006634:	4413      	add	r3, r2
 8006636:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800663c:	4a1d      	ldr	r2, [pc, #116]	; (80066b4 <prvHeapInit+0xb0>)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006642:	4b1c      	ldr	r3, [pc, #112]	; (80066b4 <prvHeapInit+0xb0>)
 8006644:	2200      	movs	r2, #0
 8006646:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	4413      	add	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006650:	2208      	movs	r2, #8
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	1a9b      	subs	r3, r3, r2
 8006656:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 0307 	bic.w	r3, r3, #7
 800665e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	4a15      	ldr	r2, [pc, #84]	; (80066b8 <prvHeapInit+0xb4>)
 8006664:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006666:	4b14      	ldr	r3, [pc, #80]	; (80066b8 <prvHeapInit+0xb4>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2200      	movs	r2, #0
 800666c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800666e:	4b12      	ldr	r3, [pc, #72]	; (80066b8 <prvHeapInit+0xb4>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	1ad2      	subs	r2, r2, r3
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006684:	4b0c      	ldr	r3, [pc, #48]	; (80066b8 <prvHeapInit+0xb4>)
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	4a0a      	ldr	r2, [pc, #40]	; (80066bc <prvHeapInit+0xb8>)
 8006692:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	4a09      	ldr	r2, [pc, #36]	; (80066c0 <prvHeapInit+0xbc>)
 800669a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800669c:	4b09      	ldr	r3, [pc, #36]	; (80066c4 <prvHeapInit+0xc0>)
 800669e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80066a2:	601a      	str	r2, [r3, #0]
}
 80066a4:	bf00      	nop
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	2000092c 	.word	0x2000092c
 80066b4:	2000452c 	.word	0x2000452c
 80066b8:	20004534 	.word	0x20004534
 80066bc:	2000453c 	.word	0x2000453c
 80066c0:	20004538 	.word	0x20004538
 80066c4:	20004548 	.word	0x20004548

080066c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066d0:	4b28      	ldr	r3, [pc, #160]	; (8006774 <prvInsertBlockIntoFreeList+0xac>)
 80066d2:	60fb      	str	r3, [r7, #12]
 80066d4:	e002      	b.n	80066dc <prvInsertBlockIntoFreeList+0x14>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	60fb      	str	r3, [r7, #12]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d8f7      	bhi.n	80066d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	4413      	add	r3, r2
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d108      	bne.n	800670a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	441a      	add	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	441a      	add	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	d118      	bne.n	8006750 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	4b15      	ldr	r3, [pc, #84]	; (8006778 <prvInsertBlockIntoFreeList+0xb0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	429a      	cmp	r2, r3
 8006728:	d00d      	beq.n	8006746 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	441a      	add	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	601a      	str	r2, [r3, #0]
 8006744:	e008      	b.n	8006758 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006746:	4b0c      	ldr	r3, [pc, #48]	; (8006778 <prvInsertBlockIntoFreeList+0xb0>)
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	e003      	b.n	8006758 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	429a      	cmp	r2, r3
 800675e:	d002      	beq.n	8006766 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006766:	bf00      	nop
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	2000452c 	.word	0x2000452c
 8006778:	20004534 	.word	0x20004534

0800677c <std>:
 800677c:	2300      	movs	r3, #0
 800677e:	b510      	push	{r4, lr}
 8006780:	4604      	mov	r4, r0
 8006782:	e9c0 3300 	strd	r3, r3, [r0]
 8006786:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800678a:	6083      	str	r3, [r0, #8]
 800678c:	8181      	strh	r1, [r0, #12]
 800678e:	6643      	str	r3, [r0, #100]	; 0x64
 8006790:	81c2      	strh	r2, [r0, #14]
 8006792:	6183      	str	r3, [r0, #24]
 8006794:	4619      	mov	r1, r3
 8006796:	2208      	movs	r2, #8
 8006798:	305c      	adds	r0, #92	; 0x5c
 800679a:	f000 f9e5 	bl	8006b68 <memset>
 800679e:	4b0d      	ldr	r3, [pc, #52]	; (80067d4 <std+0x58>)
 80067a0:	6263      	str	r3, [r4, #36]	; 0x24
 80067a2:	4b0d      	ldr	r3, [pc, #52]	; (80067d8 <std+0x5c>)
 80067a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80067a6:	4b0d      	ldr	r3, [pc, #52]	; (80067dc <std+0x60>)
 80067a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80067aa:	4b0d      	ldr	r3, [pc, #52]	; (80067e0 <std+0x64>)
 80067ac:	6323      	str	r3, [r4, #48]	; 0x30
 80067ae:	4b0d      	ldr	r3, [pc, #52]	; (80067e4 <std+0x68>)
 80067b0:	6224      	str	r4, [r4, #32]
 80067b2:	429c      	cmp	r4, r3
 80067b4:	d006      	beq.n	80067c4 <std+0x48>
 80067b6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80067ba:	4294      	cmp	r4, r2
 80067bc:	d002      	beq.n	80067c4 <std+0x48>
 80067be:	33d0      	adds	r3, #208	; 0xd0
 80067c0:	429c      	cmp	r4, r3
 80067c2:	d105      	bne.n	80067d0 <std+0x54>
 80067c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80067c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067cc:	f000 ba6a 	b.w	8006ca4 <__retarget_lock_init_recursive>
 80067d0:	bd10      	pop	{r4, pc}
 80067d2:	bf00      	nop
 80067d4:	080069b9 	.word	0x080069b9
 80067d8:	080069db 	.word	0x080069db
 80067dc:	08006a13 	.word	0x08006a13
 80067e0:	08006a37 	.word	0x08006a37
 80067e4:	2000454c 	.word	0x2000454c

080067e8 <stdio_exit_handler>:
 80067e8:	4a02      	ldr	r2, [pc, #8]	; (80067f4 <stdio_exit_handler+0xc>)
 80067ea:	4903      	ldr	r1, [pc, #12]	; (80067f8 <stdio_exit_handler+0x10>)
 80067ec:	4803      	ldr	r0, [pc, #12]	; (80067fc <stdio_exit_handler+0x14>)
 80067ee:	f000 b869 	b.w	80068c4 <_fwalk_sglue>
 80067f2:	bf00      	nop
 80067f4:	20000018 	.word	0x20000018
 80067f8:	08006fc5 	.word	0x08006fc5
 80067fc:	20000024 	.word	0x20000024

08006800 <cleanup_stdio>:
 8006800:	6841      	ldr	r1, [r0, #4]
 8006802:	4b0c      	ldr	r3, [pc, #48]	; (8006834 <cleanup_stdio+0x34>)
 8006804:	4299      	cmp	r1, r3
 8006806:	b510      	push	{r4, lr}
 8006808:	4604      	mov	r4, r0
 800680a:	d001      	beq.n	8006810 <cleanup_stdio+0x10>
 800680c:	f000 fbda 	bl	8006fc4 <_fflush_r>
 8006810:	68a1      	ldr	r1, [r4, #8]
 8006812:	4b09      	ldr	r3, [pc, #36]	; (8006838 <cleanup_stdio+0x38>)
 8006814:	4299      	cmp	r1, r3
 8006816:	d002      	beq.n	800681e <cleanup_stdio+0x1e>
 8006818:	4620      	mov	r0, r4
 800681a:	f000 fbd3 	bl	8006fc4 <_fflush_r>
 800681e:	68e1      	ldr	r1, [r4, #12]
 8006820:	4b06      	ldr	r3, [pc, #24]	; (800683c <cleanup_stdio+0x3c>)
 8006822:	4299      	cmp	r1, r3
 8006824:	d004      	beq.n	8006830 <cleanup_stdio+0x30>
 8006826:	4620      	mov	r0, r4
 8006828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800682c:	f000 bbca 	b.w	8006fc4 <_fflush_r>
 8006830:	bd10      	pop	{r4, pc}
 8006832:	bf00      	nop
 8006834:	2000454c 	.word	0x2000454c
 8006838:	200045b4 	.word	0x200045b4
 800683c:	2000461c 	.word	0x2000461c

08006840 <global_stdio_init.part.0>:
 8006840:	b510      	push	{r4, lr}
 8006842:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <global_stdio_init.part.0+0x30>)
 8006844:	4c0b      	ldr	r4, [pc, #44]	; (8006874 <global_stdio_init.part.0+0x34>)
 8006846:	4a0c      	ldr	r2, [pc, #48]	; (8006878 <global_stdio_init.part.0+0x38>)
 8006848:	601a      	str	r2, [r3, #0]
 800684a:	4620      	mov	r0, r4
 800684c:	2200      	movs	r2, #0
 800684e:	2104      	movs	r1, #4
 8006850:	f7ff ff94 	bl	800677c <std>
 8006854:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006858:	2201      	movs	r2, #1
 800685a:	2109      	movs	r1, #9
 800685c:	f7ff ff8e 	bl	800677c <std>
 8006860:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006864:	2202      	movs	r2, #2
 8006866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800686a:	2112      	movs	r1, #18
 800686c:	f7ff bf86 	b.w	800677c <std>
 8006870:	20004684 	.word	0x20004684
 8006874:	2000454c 	.word	0x2000454c
 8006878:	080067e9 	.word	0x080067e9

0800687c <__sfp_lock_acquire>:
 800687c:	4801      	ldr	r0, [pc, #4]	; (8006884 <__sfp_lock_acquire+0x8>)
 800687e:	f000 ba12 	b.w	8006ca6 <__retarget_lock_acquire_recursive>
 8006882:	bf00      	nop
 8006884:	2000468d 	.word	0x2000468d

08006888 <__sfp_lock_release>:
 8006888:	4801      	ldr	r0, [pc, #4]	; (8006890 <__sfp_lock_release+0x8>)
 800688a:	f000 ba0d 	b.w	8006ca8 <__retarget_lock_release_recursive>
 800688e:	bf00      	nop
 8006890:	2000468d 	.word	0x2000468d

08006894 <__sinit>:
 8006894:	b510      	push	{r4, lr}
 8006896:	4604      	mov	r4, r0
 8006898:	f7ff fff0 	bl	800687c <__sfp_lock_acquire>
 800689c:	6a23      	ldr	r3, [r4, #32]
 800689e:	b11b      	cbz	r3, 80068a8 <__sinit+0x14>
 80068a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068a4:	f7ff bff0 	b.w	8006888 <__sfp_lock_release>
 80068a8:	4b04      	ldr	r3, [pc, #16]	; (80068bc <__sinit+0x28>)
 80068aa:	6223      	str	r3, [r4, #32]
 80068ac:	4b04      	ldr	r3, [pc, #16]	; (80068c0 <__sinit+0x2c>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1f5      	bne.n	80068a0 <__sinit+0xc>
 80068b4:	f7ff ffc4 	bl	8006840 <global_stdio_init.part.0>
 80068b8:	e7f2      	b.n	80068a0 <__sinit+0xc>
 80068ba:	bf00      	nop
 80068bc:	08006801 	.word	0x08006801
 80068c0:	20004684 	.word	0x20004684

080068c4 <_fwalk_sglue>:
 80068c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068c8:	4607      	mov	r7, r0
 80068ca:	4688      	mov	r8, r1
 80068cc:	4614      	mov	r4, r2
 80068ce:	2600      	movs	r6, #0
 80068d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068d4:	f1b9 0901 	subs.w	r9, r9, #1
 80068d8:	d505      	bpl.n	80068e6 <_fwalk_sglue+0x22>
 80068da:	6824      	ldr	r4, [r4, #0]
 80068dc:	2c00      	cmp	r4, #0
 80068de:	d1f7      	bne.n	80068d0 <_fwalk_sglue+0xc>
 80068e0:	4630      	mov	r0, r6
 80068e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068e6:	89ab      	ldrh	r3, [r5, #12]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d907      	bls.n	80068fc <_fwalk_sglue+0x38>
 80068ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068f0:	3301      	adds	r3, #1
 80068f2:	d003      	beq.n	80068fc <_fwalk_sglue+0x38>
 80068f4:	4629      	mov	r1, r5
 80068f6:	4638      	mov	r0, r7
 80068f8:	47c0      	blx	r8
 80068fa:	4306      	orrs	r6, r0
 80068fc:	3568      	adds	r5, #104	; 0x68
 80068fe:	e7e9      	b.n	80068d4 <_fwalk_sglue+0x10>

08006900 <_puts_r>:
 8006900:	6a03      	ldr	r3, [r0, #32]
 8006902:	b570      	push	{r4, r5, r6, lr}
 8006904:	6884      	ldr	r4, [r0, #8]
 8006906:	4605      	mov	r5, r0
 8006908:	460e      	mov	r6, r1
 800690a:	b90b      	cbnz	r3, 8006910 <_puts_r+0x10>
 800690c:	f7ff ffc2 	bl	8006894 <__sinit>
 8006910:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006912:	07db      	lsls	r3, r3, #31
 8006914:	d405      	bmi.n	8006922 <_puts_r+0x22>
 8006916:	89a3      	ldrh	r3, [r4, #12]
 8006918:	0598      	lsls	r0, r3, #22
 800691a:	d402      	bmi.n	8006922 <_puts_r+0x22>
 800691c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800691e:	f000 f9c2 	bl	8006ca6 <__retarget_lock_acquire_recursive>
 8006922:	89a3      	ldrh	r3, [r4, #12]
 8006924:	0719      	lsls	r1, r3, #28
 8006926:	d513      	bpl.n	8006950 <_puts_r+0x50>
 8006928:	6923      	ldr	r3, [r4, #16]
 800692a:	b18b      	cbz	r3, 8006950 <_puts_r+0x50>
 800692c:	3e01      	subs	r6, #1
 800692e:	68a3      	ldr	r3, [r4, #8]
 8006930:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006934:	3b01      	subs	r3, #1
 8006936:	60a3      	str	r3, [r4, #8]
 8006938:	b9e9      	cbnz	r1, 8006976 <_puts_r+0x76>
 800693a:	2b00      	cmp	r3, #0
 800693c:	da2e      	bge.n	800699c <_puts_r+0x9c>
 800693e:	4622      	mov	r2, r4
 8006940:	210a      	movs	r1, #10
 8006942:	4628      	mov	r0, r5
 8006944:	f000 f87b 	bl	8006a3e <__swbuf_r>
 8006948:	3001      	adds	r0, #1
 800694a:	d007      	beq.n	800695c <_puts_r+0x5c>
 800694c:	250a      	movs	r5, #10
 800694e:	e007      	b.n	8006960 <_puts_r+0x60>
 8006950:	4621      	mov	r1, r4
 8006952:	4628      	mov	r0, r5
 8006954:	f000 f8b0 	bl	8006ab8 <__swsetup_r>
 8006958:	2800      	cmp	r0, #0
 800695a:	d0e7      	beq.n	800692c <_puts_r+0x2c>
 800695c:	f04f 35ff 	mov.w	r5, #4294967295
 8006960:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006962:	07da      	lsls	r2, r3, #31
 8006964:	d405      	bmi.n	8006972 <_puts_r+0x72>
 8006966:	89a3      	ldrh	r3, [r4, #12]
 8006968:	059b      	lsls	r3, r3, #22
 800696a:	d402      	bmi.n	8006972 <_puts_r+0x72>
 800696c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800696e:	f000 f99b 	bl	8006ca8 <__retarget_lock_release_recursive>
 8006972:	4628      	mov	r0, r5
 8006974:	bd70      	pop	{r4, r5, r6, pc}
 8006976:	2b00      	cmp	r3, #0
 8006978:	da04      	bge.n	8006984 <_puts_r+0x84>
 800697a:	69a2      	ldr	r2, [r4, #24]
 800697c:	429a      	cmp	r2, r3
 800697e:	dc06      	bgt.n	800698e <_puts_r+0x8e>
 8006980:	290a      	cmp	r1, #10
 8006982:	d004      	beq.n	800698e <_puts_r+0x8e>
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	6022      	str	r2, [r4, #0]
 800698a:	7019      	strb	r1, [r3, #0]
 800698c:	e7cf      	b.n	800692e <_puts_r+0x2e>
 800698e:	4622      	mov	r2, r4
 8006990:	4628      	mov	r0, r5
 8006992:	f000 f854 	bl	8006a3e <__swbuf_r>
 8006996:	3001      	adds	r0, #1
 8006998:	d1c9      	bne.n	800692e <_puts_r+0x2e>
 800699a:	e7df      	b.n	800695c <_puts_r+0x5c>
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	250a      	movs	r5, #10
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	6022      	str	r2, [r4, #0]
 80069a4:	701d      	strb	r5, [r3, #0]
 80069a6:	e7db      	b.n	8006960 <_puts_r+0x60>

080069a8 <puts>:
 80069a8:	4b02      	ldr	r3, [pc, #8]	; (80069b4 <puts+0xc>)
 80069aa:	4601      	mov	r1, r0
 80069ac:	6818      	ldr	r0, [r3, #0]
 80069ae:	f7ff bfa7 	b.w	8006900 <_puts_r>
 80069b2:	bf00      	nop
 80069b4:	20000070 	.word	0x20000070

080069b8 <__sread>:
 80069b8:	b510      	push	{r4, lr}
 80069ba:	460c      	mov	r4, r1
 80069bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069c0:	f000 f922 	bl	8006c08 <_read_r>
 80069c4:	2800      	cmp	r0, #0
 80069c6:	bfab      	itete	ge
 80069c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80069ca:	89a3      	ldrhlt	r3, [r4, #12]
 80069cc:	181b      	addge	r3, r3, r0
 80069ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80069d2:	bfac      	ite	ge
 80069d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80069d6:	81a3      	strhlt	r3, [r4, #12]
 80069d8:	bd10      	pop	{r4, pc}

080069da <__swrite>:
 80069da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069de:	461f      	mov	r7, r3
 80069e0:	898b      	ldrh	r3, [r1, #12]
 80069e2:	05db      	lsls	r3, r3, #23
 80069e4:	4605      	mov	r5, r0
 80069e6:	460c      	mov	r4, r1
 80069e8:	4616      	mov	r6, r2
 80069ea:	d505      	bpl.n	80069f8 <__swrite+0x1e>
 80069ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f0:	2302      	movs	r3, #2
 80069f2:	2200      	movs	r2, #0
 80069f4:	f000 f8f6 	bl	8006be4 <_lseek_r>
 80069f8:	89a3      	ldrh	r3, [r4, #12]
 80069fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a02:	81a3      	strh	r3, [r4, #12]
 8006a04:	4632      	mov	r2, r6
 8006a06:	463b      	mov	r3, r7
 8006a08:	4628      	mov	r0, r5
 8006a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a0e:	f000 b90d 	b.w	8006c2c <_write_r>

08006a12 <__sseek>:
 8006a12:	b510      	push	{r4, lr}
 8006a14:	460c      	mov	r4, r1
 8006a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a1a:	f000 f8e3 	bl	8006be4 <_lseek_r>
 8006a1e:	1c43      	adds	r3, r0, #1
 8006a20:	89a3      	ldrh	r3, [r4, #12]
 8006a22:	bf15      	itete	ne
 8006a24:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a2e:	81a3      	strheq	r3, [r4, #12]
 8006a30:	bf18      	it	ne
 8006a32:	81a3      	strhne	r3, [r4, #12]
 8006a34:	bd10      	pop	{r4, pc}

08006a36 <__sclose>:
 8006a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a3a:	f000 b8c3 	b.w	8006bc4 <_close_r>

08006a3e <__swbuf_r>:
 8006a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a40:	460e      	mov	r6, r1
 8006a42:	4614      	mov	r4, r2
 8006a44:	4605      	mov	r5, r0
 8006a46:	b118      	cbz	r0, 8006a50 <__swbuf_r+0x12>
 8006a48:	6a03      	ldr	r3, [r0, #32]
 8006a4a:	b90b      	cbnz	r3, 8006a50 <__swbuf_r+0x12>
 8006a4c:	f7ff ff22 	bl	8006894 <__sinit>
 8006a50:	69a3      	ldr	r3, [r4, #24]
 8006a52:	60a3      	str	r3, [r4, #8]
 8006a54:	89a3      	ldrh	r3, [r4, #12]
 8006a56:	071a      	lsls	r2, r3, #28
 8006a58:	d525      	bpl.n	8006aa6 <__swbuf_r+0x68>
 8006a5a:	6923      	ldr	r3, [r4, #16]
 8006a5c:	b31b      	cbz	r3, 8006aa6 <__swbuf_r+0x68>
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	6922      	ldr	r2, [r4, #16]
 8006a62:	1a98      	subs	r0, r3, r2
 8006a64:	6963      	ldr	r3, [r4, #20]
 8006a66:	b2f6      	uxtb	r6, r6
 8006a68:	4283      	cmp	r3, r0
 8006a6a:	4637      	mov	r7, r6
 8006a6c:	dc04      	bgt.n	8006a78 <__swbuf_r+0x3a>
 8006a6e:	4621      	mov	r1, r4
 8006a70:	4628      	mov	r0, r5
 8006a72:	f000 faa7 	bl	8006fc4 <_fflush_r>
 8006a76:	b9e0      	cbnz	r0, 8006ab2 <__swbuf_r+0x74>
 8006a78:	68a3      	ldr	r3, [r4, #8]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	60a3      	str	r3, [r4, #8]
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	6022      	str	r2, [r4, #0]
 8006a84:	701e      	strb	r6, [r3, #0]
 8006a86:	6962      	ldr	r2, [r4, #20]
 8006a88:	1c43      	adds	r3, r0, #1
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d004      	beq.n	8006a98 <__swbuf_r+0x5a>
 8006a8e:	89a3      	ldrh	r3, [r4, #12]
 8006a90:	07db      	lsls	r3, r3, #31
 8006a92:	d506      	bpl.n	8006aa2 <__swbuf_r+0x64>
 8006a94:	2e0a      	cmp	r6, #10
 8006a96:	d104      	bne.n	8006aa2 <__swbuf_r+0x64>
 8006a98:	4621      	mov	r1, r4
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	f000 fa92 	bl	8006fc4 <_fflush_r>
 8006aa0:	b938      	cbnz	r0, 8006ab2 <__swbuf_r+0x74>
 8006aa2:	4638      	mov	r0, r7
 8006aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	f000 f805 	bl	8006ab8 <__swsetup_r>
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	d0d5      	beq.n	8006a5e <__swbuf_r+0x20>
 8006ab2:	f04f 37ff 	mov.w	r7, #4294967295
 8006ab6:	e7f4      	b.n	8006aa2 <__swbuf_r+0x64>

08006ab8 <__swsetup_r>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	4b2a      	ldr	r3, [pc, #168]	; (8006b64 <__swsetup_r+0xac>)
 8006abc:	4605      	mov	r5, r0
 8006abe:	6818      	ldr	r0, [r3, #0]
 8006ac0:	460c      	mov	r4, r1
 8006ac2:	b118      	cbz	r0, 8006acc <__swsetup_r+0x14>
 8006ac4:	6a03      	ldr	r3, [r0, #32]
 8006ac6:	b90b      	cbnz	r3, 8006acc <__swsetup_r+0x14>
 8006ac8:	f7ff fee4 	bl	8006894 <__sinit>
 8006acc:	89a3      	ldrh	r3, [r4, #12]
 8006ace:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ad2:	0718      	lsls	r0, r3, #28
 8006ad4:	d422      	bmi.n	8006b1c <__swsetup_r+0x64>
 8006ad6:	06d9      	lsls	r1, r3, #27
 8006ad8:	d407      	bmi.n	8006aea <__swsetup_r+0x32>
 8006ada:	2309      	movs	r3, #9
 8006adc:	602b      	str	r3, [r5, #0]
 8006ade:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ae2:	81a3      	strh	r3, [r4, #12]
 8006ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae8:	e034      	b.n	8006b54 <__swsetup_r+0x9c>
 8006aea:	0758      	lsls	r0, r3, #29
 8006aec:	d512      	bpl.n	8006b14 <__swsetup_r+0x5c>
 8006aee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006af0:	b141      	cbz	r1, 8006b04 <__swsetup_r+0x4c>
 8006af2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006af6:	4299      	cmp	r1, r3
 8006af8:	d002      	beq.n	8006b00 <__swsetup_r+0x48>
 8006afa:	4628      	mov	r0, r5
 8006afc:	f000 f8e4 	bl	8006cc8 <_free_r>
 8006b00:	2300      	movs	r3, #0
 8006b02:	6363      	str	r3, [r4, #52]	; 0x34
 8006b04:	89a3      	ldrh	r3, [r4, #12]
 8006b06:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b0a:	81a3      	strh	r3, [r4, #12]
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	6063      	str	r3, [r4, #4]
 8006b10:	6923      	ldr	r3, [r4, #16]
 8006b12:	6023      	str	r3, [r4, #0]
 8006b14:	89a3      	ldrh	r3, [r4, #12]
 8006b16:	f043 0308 	orr.w	r3, r3, #8
 8006b1a:	81a3      	strh	r3, [r4, #12]
 8006b1c:	6923      	ldr	r3, [r4, #16]
 8006b1e:	b94b      	cbnz	r3, 8006b34 <__swsetup_r+0x7c>
 8006b20:	89a3      	ldrh	r3, [r4, #12]
 8006b22:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b2a:	d003      	beq.n	8006b34 <__swsetup_r+0x7c>
 8006b2c:	4621      	mov	r1, r4
 8006b2e:	4628      	mov	r0, r5
 8006b30:	f000 fa96 	bl	8007060 <__smakebuf_r>
 8006b34:	89a0      	ldrh	r0, [r4, #12]
 8006b36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b3a:	f010 0301 	ands.w	r3, r0, #1
 8006b3e:	d00a      	beq.n	8006b56 <__swsetup_r+0x9e>
 8006b40:	2300      	movs	r3, #0
 8006b42:	60a3      	str	r3, [r4, #8]
 8006b44:	6963      	ldr	r3, [r4, #20]
 8006b46:	425b      	negs	r3, r3
 8006b48:	61a3      	str	r3, [r4, #24]
 8006b4a:	6923      	ldr	r3, [r4, #16]
 8006b4c:	b943      	cbnz	r3, 8006b60 <__swsetup_r+0xa8>
 8006b4e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b52:	d1c4      	bne.n	8006ade <__swsetup_r+0x26>
 8006b54:	bd38      	pop	{r3, r4, r5, pc}
 8006b56:	0781      	lsls	r1, r0, #30
 8006b58:	bf58      	it	pl
 8006b5a:	6963      	ldrpl	r3, [r4, #20]
 8006b5c:	60a3      	str	r3, [r4, #8]
 8006b5e:	e7f4      	b.n	8006b4a <__swsetup_r+0x92>
 8006b60:	2000      	movs	r0, #0
 8006b62:	e7f7      	b.n	8006b54 <__swsetup_r+0x9c>
 8006b64:	20000070 	.word	0x20000070

08006b68 <memset>:
 8006b68:	4402      	add	r2, r0
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d100      	bne.n	8006b72 <memset+0xa>
 8006b70:	4770      	bx	lr
 8006b72:	f803 1b01 	strb.w	r1, [r3], #1
 8006b76:	e7f9      	b.n	8006b6c <memset+0x4>

08006b78 <strncmp>:
 8006b78:	b510      	push	{r4, lr}
 8006b7a:	b16a      	cbz	r2, 8006b98 <strncmp+0x20>
 8006b7c:	3901      	subs	r1, #1
 8006b7e:	1884      	adds	r4, r0, r2
 8006b80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d103      	bne.n	8006b94 <strncmp+0x1c>
 8006b8c:	42a0      	cmp	r0, r4
 8006b8e:	d001      	beq.n	8006b94 <strncmp+0x1c>
 8006b90:	2a00      	cmp	r2, #0
 8006b92:	d1f5      	bne.n	8006b80 <strncmp+0x8>
 8006b94:	1ad0      	subs	r0, r2, r3
 8006b96:	bd10      	pop	{r4, pc}
 8006b98:	4610      	mov	r0, r2
 8006b9a:	e7fc      	b.n	8006b96 <strncmp+0x1e>

08006b9c <strncpy>:
 8006b9c:	b510      	push	{r4, lr}
 8006b9e:	3901      	subs	r1, #1
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	b132      	cbz	r2, 8006bb2 <strncpy+0x16>
 8006ba4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006ba8:	f803 4b01 	strb.w	r4, [r3], #1
 8006bac:	3a01      	subs	r2, #1
 8006bae:	2c00      	cmp	r4, #0
 8006bb0:	d1f7      	bne.n	8006ba2 <strncpy+0x6>
 8006bb2:	441a      	add	r2, r3
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d100      	bne.n	8006bbc <strncpy+0x20>
 8006bba:	bd10      	pop	{r4, pc}
 8006bbc:	f803 1b01 	strb.w	r1, [r3], #1
 8006bc0:	e7f9      	b.n	8006bb6 <strncpy+0x1a>
	...

08006bc4 <_close_r>:
 8006bc4:	b538      	push	{r3, r4, r5, lr}
 8006bc6:	4d06      	ldr	r5, [pc, #24]	; (8006be0 <_close_r+0x1c>)
 8006bc8:	2300      	movs	r3, #0
 8006bca:	4604      	mov	r4, r0
 8006bcc:	4608      	mov	r0, r1
 8006bce:	602b      	str	r3, [r5, #0]
 8006bd0:	f7fa ff25 	bl	8001a1e <_close>
 8006bd4:	1c43      	adds	r3, r0, #1
 8006bd6:	d102      	bne.n	8006bde <_close_r+0x1a>
 8006bd8:	682b      	ldr	r3, [r5, #0]
 8006bda:	b103      	cbz	r3, 8006bde <_close_r+0x1a>
 8006bdc:	6023      	str	r3, [r4, #0]
 8006bde:	bd38      	pop	{r3, r4, r5, pc}
 8006be0:	20004688 	.word	0x20004688

08006be4 <_lseek_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	4d07      	ldr	r5, [pc, #28]	; (8006c04 <_lseek_r+0x20>)
 8006be8:	4604      	mov	r4, r0
 8006bea:	4608      	mov	r0, r1
 8006bec:	4611      	mov	r1, r2
 8006bee:	2200      	movs	r2, #0
 8006bf0:	602a      	str	r2, [r5, #0]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	f7fa ff3a 	bl	8001a6c <_lseek>
 8006bf8:	1c43      	adds	r3, r0, #1
 8006bfa:	d102      	bne.n	8006c02 <_lseek_r+0x1e>
 8006bfc:	682b      	ldr	r3, [r5, #0]
 8006bfe:	b103      	cbz	r3, 8006c02 <_lseek_r+0x1e>
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	bd38      	pop	{r3, r4, r5, pc}
 8006c04:	20004688 	.word	0x20004688

08006c08 <_read_r>:
 8006c08:	b538      	push	{r3, r4, r5, lr}
 8006c0a:	4d07      	ldr	r5, [pc, #28]	; (8006c28 <_read_r+0x20>)
 8006c0c:	4604      	mov	r4, r0
 8006c0e:	4608      	mov	r0, r1
 8006c10:	4611      	mov	r1, r2
 8006c12:	2200      	movs	r2, #0
 8006c14:	602a      	str	r2, [r5, #0]
 8006c16:	461a      	mov	r2, r3
 8006c18:	f7fa fec8 	bl	80019ac <_read>
 8006c1c:	1c43      	adds	r3, r0, #1
 8006c1e:	d102      	bne.n	8006c26 <_read_r+0x1e>
 8006c20:	682b      	ldr	r3, [r5, #0]
 8006c22:	b103      	cbz	r3, 8006c26 <_read_r+0x1e>
 8006c24:	6023      	str	r3, [r4, #0]
 8006c26:	bd38      	pop	{r3, r4, r5, pc}
 8006c28:	20004688 	.word	0x20004688

08006c2c <_write_r>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	4d07      	ldr	r5, [pc, #28]	; (8006c4c <_write_r+0x20>)
 8006c30:	4604      	mov	r4, r0
 8006c32:	4608      	mov	r0, r1
 8006c34:	4611      	mov	r1, r2
 8006c36:	2200      	movs	r2, #0
 8006c38:	602a      	str	r2, [r5, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	f7fa fed3 	bl	80019e6 <_write>
 8006c40:	1c43      	adds	r3, r0, #1
 8006c42:	d102      	bne.n	8006c4a <_write_r+0x1e>
 8006c44:	682b      	ldr	r3, [r5, #0]
 8006c46:	b103      	cbz	r3, 8006c4a <_write_r+0x1e>
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	bd38      	pop	{r3, r4, r5, pc}
 8006c4c:	20004688 	.word	0x20004688

08006c50 <__errno>:
 8006c50:	4b01      	ldr	r3, [pc, #4]	; (8006c58 <__errno+0x8>)
 8006c52:	6818      	ldr	r0, [r3, #0]
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	20000070 	.word	0x20000070

08006c5c <__libc_init_array>:
 8006c5c:	b570      	push	{r4, r5, r6, lr}
 8006c5e:	4d0d      	ldr	r5, [pc, #52]	; (8006c94 <__libc_init_array+0x38>)
 8006c60:	4c0d      	ldr	r4, [pc, #52]	; (8006c98 <__libc_init_array+0x3c>)
 8006c62:	1b64      	subs	r4, r4, r5
 8006c64:	10a4      	asrs	r4, r4, #2
 8006c66:	2600      	movs	r6, #0
 8006c68:	42a6      	cmp	r6, r4
 8006c6a:	d109      	bne.n	8006c80 <__libc_init_array+0x24>
 8006c6c:	4d0b      	ldr	r5, [pc, #44]	; (8006c9c <__libc_init_array+0x40>)
 8006c6e:	4c0c      	ldr	r4, [pc, #48]	; (8006ca0 <__libc_init_array+0x44>)
 8006c70:	f000 fa64 	bl	800713c <_init>
 8006c74:	1b64      	subs	r4, r4, r5
 8006c76:	10a4      	asrs	r4, r4, #2
 8006c78:	2600      	movs	r6, #0
 8006c7a:	42a6      	cmp	r6, r4
 8006c7c:	d105      	bne.n	8006c8a <__libc_init_array+0x2e>
 8006c7e:	bd70      	pop	{r4, r5, r6, pc}
 8006c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c84:	4798      	blx	r3
 8006c86:	3601      	adds	r6, #1
 8006c88:	e7ee      	b.n	8006c68 <__libc_init_array+0xc>
 8006c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c8e:	4798      	blx	r3
 8006c90:	3601      	adds	r6, #1
 8006c92:	e7f2      	b.n	8006c7a <__libc_init_array+0x1e>
 8006c94:	0800808c 	.word	0x0800808c
 8006c98:	0800808c 	.word	0x0800808c
 8006c9c:	0800808c 	.word	0x0800808c
 8006ca0:	08008090 	.word	0x08008090

08006ca4 <__retarget_lock_init_recursive>:
 8006ca4:	4770      	bx	lr

08006ca6 <__retarget_lock_acquire_recursive>:
 8006ca6:	4770      	bx	lr

08006ca8 <__retarget_lock_release_recursive>:
 8006ca8:	4770      	bx	lr

08006caa <memcpy>:
 8006caa:	440a      	add	r2, r1
 8006cac:	4291      	cmp	r1, r2
 8006cae:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cb2:	d100      	bne.n	8006cb6 <memcpy+0xc>
 8006cb4:	4770      	bx	lr
 8006cb6:	b510      	push	{r4, lr}
 8006cb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cc0:	4291      	cmp	r1, r2
 8006cc2:	d1f9      	bne.n	8006cb8 <memcpy+0xe>
 8006cc4:	bd10      	pop	{r4, pc}
	...

08006cc8 <_free_r>:
 8006cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cca:	2900      	cmp	r1, #0
 8006ccc:	d044      	beq.n	8006d58 <_free_r+0x90>
 8006cce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cd2:	9001      	str	r0, [sp, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f1a1 0404 	sub.w	r4, r1, #4
 8006cda:	bfb8      	it	lt
 8006cdc:	18e4      	addlt	r4, r4, r3
 8006cde:	f000 f8df 	bl	8006ea0 <__malloc_lock>
 8006ce2:	4a1e      	ldr	r2, [pc, #120]	; (8006d5c <_free_r+0x94>)
 8006ce4:	9801      	ldr	r0, [sp, #4]
 8006ce6:	6813      	ldr	r3, [r2, #0]
 8006ce8:	b933      	cbnz	r3, 8006cf8 <_free_r+0x30>
 8006cea:	6063      	str	r3, [r4, #4]
 8006cec:	6014      	str	r4, [r2, #0]
 8006cee:	b003      	add	sp, #12
 8006cf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cf4:	f000 b8da 	b.w	8006eac <__malloc_unlock>
 8006cf8:	42a3      	cmp	r3, r4
 8006cfa:	d908      	bls.n	8006d0e <_free_r+0x46>
 8006cfc:	6825      	ldr	r5, [r4, #0]
 8006cfe:	1961      	adds	r1, r4, r5
 8006d00:	428b      	cmp	r3, r1
 8006d02:	bf01      	itttt	eq
 8006d04:	6819      	ldreq	r1, [r3, #0]
 8006d06:	685b      	ldreq	r3, [r3, #4]
 8006d08:	1949      	addeq	r1, r1, r5
 8006d0a:	6021      	streq	r1, [r4, #0]
 8006d0c:	e7ed      	b.n	8006cea <_free_r+0x22>
 8006d0e:	461a      	mov	r2, r3
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	b10b      	cbz	r3, 8006d18 <_free_r+0x50>
 8006d14:	42a3      	cmp	r3, r4
 8006d16:	d9fa      	bls.n	8006d0e <_free_r+0x46>
 8006d18:	6811      	ldr	r1, [r2, #0]
 8006d1a:	1855      	adds	r5, r2, r1
 8006d1c:	42a5      	cmp	r5, r4
 8006d1e:	d10b      	bne.n	8006d38 <_free_r+0x70>
 8006d20:	6824      	ldr	r4, [r4, #0]
 8006d22:	4421      	add	r1, r4
 8006d24:	1854      	adds	r4, r2, r1
 8006d26:	42a3      	cmp	r3, r4
 8006d28:	6011      	str	r1, [r2, #0]
 8006d2a:	d1e0      	bne.n	8006cee <_free_r+0x26>
 8006d2c:	681c      	ldr	r4, [r3, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	6053      	str	r3, [r2, #4]
 8006d32:	440c      	add	r4, r1
 8006d34:	6014      	str	r4, [r2, #0]
 8006d36:	e7da      	b.n	8006cee <_free_r+0x26>
 8006d38:	d902      	bls.n	8006d40 <_free_r+0x78>
 8006d3a:	230c      	movs	r3, #12
 8006d3c:	6003      	str	r3, [r0, #0]
 8006d3e:	e7d6      	b.n	8006cee <_free_r+0x26>
 8006d40:	6825      	ldr	r5, [r4, #0]
 8006d42:	1961      	adds	r1, r4, r5
 8006d44:	428b      	cmp	r3, r1
 8006d46:	bf04      	itt	eq
 8006d48:	6819      	ldreq	r1, [r3, #0]
 8006d4a:	685b      	ldreq	r3, [r3, #4]
 8006d4c:	6063      	str	r3, [r4, #4]
 8006d4e:	bf04      	itt	eq
 8006d50:	1949      	addeq	r1, r1, r5
 8006d52:	6021      	streq	r1, [r4, #0]
 8006d54:	6054      	str	r4, [r2, #4]
 8006d56:	e7ca      	b.n	8006cee <_free_r+0x26>
 8006d58:	b003      	add	sp, #12
 8006d5a:	bd30      	pop	{r4, r5, pc}
 8006d5c:	20004690 	.word	0x20004690

08006d60 <sbrk_aligned>:
 8006d60:	b570      	push	{r4, r5, r6, lr}
 8006d62:	4e0e      	ldr	r6, [pc, #56]	; (8006d9c <sbrk_aligned+0x3c>)
 8006d64:	460c      	mov	r4, r1
 8006d66:	6831      	ldr	r1, [r6, #0]
 8006d68:	4605      	mov	r5, r0
 8006d6a:	b911      	cbnz	r1, 8006d72 <sbrk_aligned+0x12>
 8006d6c:	f000 f9d6 	bl	800711c <_sbrk_r>
 8006d70:	6030      	str	r0, [r6, #0]
 8006d72:	4621      	mov	r1, r4
 8006d74:	4628      	mov	r0, r5
 8006d76:	f000 f9d1 	bl	800711c <_sbrk_r>
 8006d7a:	1c43      	adds	r3, r0, #1
 8006d7c:	d00a      	beq.n	8006d94 <sbrk_aligned+0x34>
 8006d7e:	1cc4      	adds	r4, r0, #3
 8006d80:	f024 0403 	bic.w	r4, r4, #3
 8006d84:	42a0      	cmp	r0, r4
 8006d86:	d007      	beq.n	8006d98 <sbrk_aligned+0x38>
 8006d88:	1a21      	subs	r1, r4, r0
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	f000 f9c6 	bl	800711c <_sbrk_r>
 8006d90:	3001      	adds	r0, #1
 8006d92:	d101      	bne.n	8006d98 <sbrk_aligned+0x38>
 8006d94:	f04f 34ff 	mov.w	r4, #4294967295
 8006d98:	4620      	mov	r0, r4
 8006d9a:	bd70      	pop	{r4, r5, r6, pc}
 8006d9c:	20004694 	.word	0x20004694

08006da0 <_malloc_r>:
 8006da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006da4:	1ccd      	adds	r5, r1, #3
 8006da6:	f025 0503 	bic.w	r5, r5, #3
 8006daa:	3508      	adds	r5, #8
 8006dac:	2d0c      	cmp	r5, #12
 8006dae:	bf38      	it	cc
 8006db0:	250c      	movcc	r5, #12
 8006db2:	2d00      	cmp	r5, #0
 8006db4:	4607      	mov	r7, r0
 8006db6:	db01      	blt.n	8006dbc <_malloc_r+0x1c>
 8006db8:	42a9      	cmp	r1, r5
 8006dba:	d905      	bls.n	8006dc8 <_malloc_r+0x28>
 8006dbc:	230c      	movs	r3, #12
 8006dbe:	603b      	str	r3, [r7, #0]
 8006dc0:	2600      	movs	r6, #0
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dc8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006e9c <_malloc_r+0xfc>
 8006dcc:	f000 f868 	bl	8006ea0 <__malloc_lock>
 8006dd0:	f8d8 3000 	ldr.w	r3, [r8]
 8006dd4:	461c      	mov	r4, r3
 8006dd6:	bb5c      	cbnz	r4, 8006e30 <_malloc_r+0x90>
 8006dd8:	4629      	mov	r1, r5
 8006dda:	4638      	mov	r0, r7
 8006ddc:	f7ff ffc0 	bl	8006d60 <sbrk_aligned>
 8006de0:	1c43      	adds	r3, r0, #1
 8006de2:	4604      	mov	r4, r0
 8006de4:	d155      	bne.n	8006e92 <_malloc_r+0xf2>
 8006de6:	f8d8 4000 	ldr.w	r4, [r8]
 8006dea:	4626      	mov	r6, r4
 8006dec:	2e00      	cmp	r6, #0
 8006dee:	d145      	bne.n	8006e7c <_malloc_r+0xdc>
 8006df0:	2c00      	cmp	r4, #0
 8006df2:	d048      	beq.n	8006e86 <_malloc_r+0xe6>
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	4631      	mov	r1, r6
 8006df8:	4638      	mov	r0, r7
 8006dfa:	eb04 0903 	add.w	r9, r4, r3
 8006dfe:	f000 f98d 	bl	800711c <_sbrk_r>
 8006e02:	4581      	cmp	r9, r0
 8006e04:	d13f      	bne.n	8006e86 <_malloc_r+0xe6>
 8006e06:	6821      	ldr	r1, [r4, #0]
 8006e08:	1a6d      	subs	r5, r5, r1
 8006e0a:	4629      	mov	r1, r5
 8006e0c:	4638      	mov	r0, r7
 8006e0e:	f7ff ffa7 	bl	8006d60 <sbrk_aligned>
 8006e12:	3001      	adds	r0, #1
 8006e14:	d037      	beq.n	8006e86 <_malloc_r+0xe6>
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	442b      	add	r3, r5
 8006e1a:	6023      	str	r3, [r4, #0]
 8006e1c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d038      	beq.n	8006e96 <_malloc_r+0xf6>
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	42a2      	cmp	r2, r4
 8006e28:	d12b      	bne.n	8006e82 <_malloc_r+0xe2>
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	605a      	str	r2, [r3, #4]
 8006e2e:	e00f      	b.n	8006e50 <_malloc_r+0xb0>
 8006e30:	6822      	ldr	r2, [r4, #0]
 8006e32:	1b52      	subs	r2, r2, r5
 8006e34:	d41f      	bmi.n	8006e76 <_malloc_r+0xd6>
 8006e36:	2a0b      	cmp	r2, #11
 8006e38:	d917      	bls.n	8006e6a <_malloc_r+0xca>
 8006e3a:	1961      	adds	r1, r4, r5
 8006e3c:	42a3      	cmp	r3, r4
 8006e3e:	6025      	str	r5, [r4, #0]
 8006e40:	bf18      	it	ne
 8006e42:	6059      	strne	r1, [r3, #4]
 8006e44:	6863      	ldr	r3, [r4, #4]
 8006e46:	bf08      	it	eq
 8006e48:	f8c8 1000 	streq.w	r1, [r8]
 8006e4c:	5162      	str	r2, [r4, r5]
 8006e4e:	604b      	str	r3, [r1, #4]
 8006e50:	4638      	mov	r0, r7
 8006e52:	f104 060b 	add.w	r6, r4, #11
 8006e56:	f000 f829 	bl	8006eac <__malloc_unlock>
 8006e5a:	f026 0607 	bic.w	r6, r6, #7
 8006e5e:	1d23      	adds	r3, r4, #4
 8006e60:	1af2      	subs	r2, r6, r3
 8006e62:	d0ae      	beq.n	8006dc2 <_malloc_r+0x22>
 8006e64:	1b9b      	subs	r3, r3, r6
 8006e66:	50a3      	str	r3, [r4, r2]
 8006e68:	e7ab      	b.n	8006dc2 <_malloc_r+0x22>
 8006e6a:	42a3      	cmp	r3, r4
 8006e6c:	6862      	ldr	r2, [r4, #4]
 8006e6e:	d1dd      	bne.n	8006e2c <_malloc_r+0x8c>
 8006e70:	f8c8 2000 	str.w	r2, [r8]
 8006e74:	e7ec      	b.n	8006e50 <_malloc_r+0xb0>
 8006e76:	4623      	mov	r3, r4
 8006e78:	6864      	ldr	r4, [r4, #4]
 8006e7a:	e7ac      	b.n	8006dd6 <_malloc_r+0x36>
 8006e7c:	4634      	mov	r4, r6
 8006e7e:	6876      	ldr	r6, [r6, #4]
 8006e80:	e7b4      	b.n	8006dec <_malloc_r+0x4c>
 8006e82:	4613      	mov	r3, r2
 8006e84:	e7cc      	b.n	8006e20 <_malloc_r+0x80>
 8006e86:	230c      	movs	r3, #12
 8006e88:	603b      	str	r3, [r7, #0]
 8006e8a:	4638      	mov	r0, r7
 8006e8c:	f000 f80e 	bl	8006eac <__malloc_unlock>
 8006e90:	e797      	b.n	8006dc2 <_malloc_r+0x22>
 8006e92:	6025      	str	r5, [r4, #0]
 8006e94:	e7dc      	b.n	8006e50 <_malloc_r+0xb0>
 8006e96:	605b      	str	r3, [r3, #4]
 8006e98:	deff      	udf	#255	; 0xff
 8006e9a:	bf00      	nop
 8006e9c:	20004690 	.word	0x20004690

08006ea0 <__malloc_lock>:
 8006ea0:	4801      	ldr	r0, [pc, #4]	; (8006ea8 <__malloc_lock+0x8>)
 8006ea2:	f7ff bf00 	b.w	8006ca6 <__retarget_lock_acquire_recursive>
 8006ea6:	bf00      	nop
 8006ea8:	2000468c 	.word	0x2000468c

08006eac <__malloc_unlock>:
 8006eac:	4801      	ldr	r0, [pc, #4]	; (8006eb4 <__malloc_unlock+0x8>)
 8006eae:	f7ff befb 	b.w	8006ca8 <__retarget_lock_release_recursive>
 8006eb2:	bf00      	nop
 8006eb4:	2000468c 	.word	0x2000468c

08006eb8 <__sflush_r>:
 8006eb8:	898a      	ldrh	r2, [r1, #12]
 8006eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ebe:	4605      	mov	r5, r0
 8006ec0:	0710      	lsls	r0, r2, #28
 8006ec2:	460c      	mov	r4, r1
 8006ec4:	d458      	bmi.n	8006f78 <__sflush_r+0xc0>
 8006ec6:	684b      	ldr	r3, [r1, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	dc05      	bgt.n	8006ed8 <__sflush_r+0x20>
 8006ecc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	dc02      	bgt.n	8006ed8 <__sflush_r+0x20>
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ed8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006eda:	2e00      	cmp	r6, #0
 8006edc:	d0f9      	beq.n	8006ed2 <__sflush_r+0x1a>
 8006ede:	2300      	movs	r3, #0
 8006ee0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ee4:	682f      	ldr	r7, [r5, #0]
 8006ee6:	6a21      	ldr	r1, [r4, #32]
 8006ee8:	602b      	str	r3, [r5, #0]
 8006eea:	d032      	beq.n	8006f52 <__sflush_r+0x9a>
 8006eec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006eee:	89a3      	ldrh	r3, [r4, #12]
 8006ef0:	075a      	lsls	r2, r3, #29
 8006ef2:	d505      	bpl.n	8006f00 <__sflush_r+0x48>
 8006ef4:	6863      	ldr	r3, [r4, #4]
 8006ef6:	1ac0      	subs	r0, r0, r3
 8006ef8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006efa:	b10b      	cbz	r3, 8006f00 <__sflush_r+0x48>
 8006efc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006efe:	1ac0      	subs	r0, r0, r3
 8006f00:	2300      	movs	r3, #0
 8006f02:	4602      	mov	r2, r0
 8006f04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f06:	6a21      	ldr	r1, [r4, #32]
 8006f08:	4628      	mov	r0, r5
 8006f0a:	47b0      	blx	r6
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	89a3      	ldrh	r3, [r4, #12]
 8006f10:	d106      	bne.n	8006f20 <__sflush_r+0x68>
 8006f12:	6829      	ldr	r1, [r5, #0]
 8006f14:	291d      	cmp	r1, #29
 8006f16:	d82b      	bhi.n	8006f70 <__sflush_r+0xb8>
 8006f18:	4a29      	ldr	r2, [pc, #164]	; (8006fc0 <__sflush_r+0x108>)
 8006f1a:	410a      	asrs	r2, r1
 8006f1c:	07d6      	lsls	r6, r2, #31
 8006f1e:	d427      	bmi.n	8006f70 <__sflush_r+0xb8>
 8006f20:	2200      	movs	r2, #0
 8006f22:	6062      	str	r2, [r4, #4]
 8006f24:	04d9      	lsls	r1, r3, #19
 8006f26:	6922      	ldr	r2, [r4, #16]
 8006f28:	6022      	str	r2, [r4, #0]
 8006f2a:	d504      	bpl.n	8006f36 <__sflush_r+0x7e>
 8006f2c:	1c42      	adds	r2, r0, #1
 8006f2e:	d101      	bne.n	8006f34 <__sflush_r+0x7c>
 8006f30:	682b      	ldr	r3, [r5, #0]
 8006f32:	b903      	cbnz	r3, 8006f36 <__sflush_r+0x7e>
 8006f34:	6560      	str	r0, [r4, #84]	; 0x54
 8006f36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f38:	602f      	str	r7, [r5, #0]
 8006f3a:	2900      	cmp	r1, #0
 8006f3c:	d0c9      	beq.n	8006ed2 <__sflush_r+0x1a>
 8006f3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f42:	4299      	cmp	r1, r3
 8006f44:	d002      	beq.n	8006f4c <__sflush_r+0x94>
 8006f46:	4628      	mov	r0, r5
 8006f48:	f7ff febe 	bl	8006cc8 <_free_r>
 8006f4c:	2000      	movs	r0, #0
 8006f4e:	6360      	str	r0, [r4, #52]	; 0x34
 8006f50:	e7c0      	b.n	8006ed4 <__sflush_r+0x1c>
 8006f52:	2301      	movs	r3, #1
 8006f54:	4628      	mov	r0, r5
 8006f56:	47b0      	blx	r6
 8006f58:	1c41      	adds	r1, r0, #1
 8006f5a:	d1c8      	bne.n	8006eee <__sflush_r+0x36>
 8006f5c:	682b      	ldr	r3, [r5, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0c5      	beq.n	8006eee <__sflush_r+0x36>
 8006f62:	2b1d      	cmp	r3, #29
 8006f64:	d001      	beq.n	8006f6a <__sflush_r+0xb2>
 8006f66:	2b16      	cmp	r3, #22
 8006f68:	d101      	bne.n	8006f6e <__sflush_r+0xb6>
 8006f6a:	602f      	str	r7, [r5, #0]
 8006f6c:	e7b1      	b.n	8006ed2 <__sflush_r+0x1a>
 8006f6e:	89a3      	ldrh	r3, [r4, #12]
 8006f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f74:	81a3      	strh	r3, [r4, #12]
 8006f76:	e7ad      	b.n	8006ed4 <__sflush_r+0x1c>
 8006f78:	690f      	ldr	r7, [r1, #16]
 8006f7a:	2f00      	cmp	r7, #0
 8006f7c:	d0a9      	beq.n	8006ed2 <__sflush_r+0x1a>
 8006f7e:	0793      	lsls	r3, r2, #30
 8006f80:	680e      	ldr	r6, [r1, #0]
 8006f82:	bf08      	it	eq
 8006f84:	694b      	ldreq	r3, [r1, #20]
 8006f86:	600f      	str	r7, [r1, #0]
 8006f88:	bf18      	it	ne
 8006f8a:	2300      	movne	r3, #0
 8006f8c:	eba6 0807 	sub.w	r8, r6, r7
 8006f90:	608b      	str	r3, [r1, #8]
 8006f92:	f1b8 0f00 	cmp.w	r8, #0
 8006f96:	dd9c      	ble.n	8006ed2 <__sflush_r+0x1a>
 8006f98:	6a21      	ldr	r1, [r4, #32]
 8006f9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f9c:	4643      	mov	r3, r8
 8006f9e:	463a      	mov	r2, r7
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	47b0      	blx	r6
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	dc06      	bgt.n	8006fb6 <__sflush_r+0xfe>
 8006fa8:	89a3      	ldrh	r3, [r4, #12]
 8006faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fae:	81a3      	strh	r3, [r4, #12]
 8006fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb4:	e78e      	b.n	8006ed4 <__sflush_r+0x1c>
 8006fb6:	4407      	add	r7, r0
 8006fb8:	eba8 0800 	sub.w	r8, r8, r0
 8006fbc:	e7e9      	b.n	8006f92 <__sflush_r+0xda>
 8006fbe:	bf00      	nop
 8006fc0:	dfbffffe 	.word	0xdfbffffe

08006fc4 <_fflush_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	690b      	ldr	r3, [r1, #16]
 8006fc8:	4605      	mov	r5, r0
 8006fca:	460c      	mov	r4, r1
 8006fcc:	b913      	cbnz	r3, 8006fd4 <_fflush_r+0x10>
 8006fce:	2500      	movs	r5, #0
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	bd38      	pop	{r3, r4, r5, pc}
 8006fd4:	b118      	cbz	r0, 8006fde <_fflush_r+0x1a>
 8006fd6:	6a03      	ldr	r3, [r0, #32]
 8006fd8:	b90b      	cbnz	r3, 8006fde <_fflush_r+0x1a>
 8006fda:	f7ff fc5b 	bl	8006894 <__sinit>
 8006fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d0f3      	beq.n	8006fce <_fflush_r+0xa>
 8006fe6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006fe8:	07d0      	lsls	r0, r2, #31
 8006fea:	d404      	bmi.n	8006ff6 <_fflush_r+0x32>
 8006fec:	0599      	lsls	r1, r3, #22
 8006fee:	d402      	bmi.n	8006ff6 <_fflush_r+0x32>
 8006ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ff2:	f7ff fe58 	bl	8006ca6 <__retarget_lock_acquire_recursive>
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	f7ff ff5d 	bl	8006eb8 <__sflush_r>
 8006ffe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007000:	07da      	lsls	r2, r3, #31
 8007002:	4605      	mov	r5, r0
 8007004:	d4e4      	bmi.n	8006fd0 <_fflush_r+0xc>
 8007006:	89a3      	ldrh	r3, [r4, #12]
 8007008:	059b      	lsls	r3, r3, #22
 800700a:	d4e1      	bmi.n	8006fd0 <_fflush_r+0xc>
 800700c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800700e:	f7ff fe4b 	bl	8006ca8 <__retarget_lock_release_recursive>
 8007012:	e7dd      	b.n	8006fd0 <_fflush_r+0xc>

08007014 <__swhatbuf_r>:
 8007014:	b570      	push	{r4, r5, r6, lr}
 8007016:	460c      	mov	r4, r1
 8007018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800701c:	2900      	cmp	r1, #0
 800701e:	b096      	sub	sp, #88	; 0x58
 8007020:	4615      	mov	r5, r2
 8007022:	461e      	mov	r6, r3
 8007024:	da0d      	bge.n	8007042 <__swhatbuf_r+0x2e>
 8007026:	89a3      	ldrh	r3, [r4, #12]
 8007028:	f013 0f80 	tst.w	r3, #128	; 0x80
 800702c:	f04f 0100 	mov.w	r1, #0
 8007030:	bf0c      	ite	eq
 8007032:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007036:	2340      	movne	r3, #64	; 0x40
 8007038:	2000      	movs	r0, #0
 800703a:	6031      	str	r1, [r6, #0]
 800703c:	602b      	str	r3, [r5, #0]
 800703e:	b016      	add	sp, #88	; 0x58
 8007040:	bd70      	pop	{r4, r5, r6, pc}
 8007042:	466a      	mov	r2, sp
 8007044:	f000 f848 	bl	80070d8 <_fstat_r>
 8007048:	2800      	cmp	r0, #0
 800704a:	dbec      	blt.n	8007026 <__swhatbuf_r+0x12>
 800704c:	9901      	ldr	r1, [sp, #4]
 800704e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007052:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007056:	4259      	negs	r1, r3
 8007058:	4159      	adcs	r1, r3
 800705a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800705e:	e7eb      	b.n	8007038 <__swhatbuf_r+0x24>

08007060 <__smakebuf_r>:
 8007060:	898b      	ldrh	r3, [r1, #12]
 8007062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007064:	079d      	lsls	r5, r3, #30
 8007066:	4606      	mov	r6, r0
 8007068:	460c      	mov	r4, r1
 800706a:	d507      	bpl.n	800707c <__smakebuf_r+0x1c>
 800706c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	6123      	str	r3, [r4, #16]
 8007074:	2301      	movs	r3, #1
 8007076:	6163      	str	r3, [r4, #20]
 8007078:	b002      	add	sp, #8
 800707a:	bd70      	pop	{r4, r5, r6, pc}
 800707c:	ab01      	add	r3, sp, #4
 800707e:	466a      	mov	r2, sp
 8007080:	f7ff ffc8 	bl	8007014 <__swhatbuf_r>
 8007084:	9900      	ldr	r1, [sp, #0]
 8007086:	4605      	mov	r5, r0
 8007088:	4630      	mov	r0, r6
 800708a:	f7ff fe89 	bl	8006da0 <_malloc_r>
 800708e:	b948      	cbnz	r0, 80070a4 <__smakebuf_r+0x44>
 8007090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007094:	059a      	lsls	r2, r3, #22
 8007096:	d4ef      	bmi.n	8007078 <__smakebuf_r+0x18>
 8007098:	f023 0303 	bic.w	r3, r3, #3
 800709c:	f043 0302 	orr.w	r3, r3, #2
 80070a0:	81a3      	strh	r3, [r4, #12]
 80070a2:	e7e3      	b.n	800706c <__smakebuf_r+0xc>
 80070a4:	89a3      	ldrh	r3, [r4, #12]
 80070a6:	6020      	str	r0, [r4, #0]
 80070a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ac:	81a3      	strh	r3, [r4, #12]
 80070ae:	9b00      	ldr	r3, [sp, #0]
 80070b0:	6163      	str	r3, [r4, #20]
 80070b2:	9b01      	ldr	r3, [sp, #4]
 80070b4:	6120      	str	r0, [r4, #16]
 80070b6:	b15b      	cbz	r3, 80070d0 <__smakebuf_r+0x70>
 80070b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070bc:	4630      	mov	r0, r6
 80070be:	f000 f81d 	bl	80070fc <_isatty_r>
 80070c2:	b128      	cbz	r0, 80070d0 <__smakebuf_r+0x70>
 80070c4:	89a3      	ldrh	r3, [r4, #12]
 80070c6:	f023 0303 	bic.w	r3, r3, #3
 80070ca:	f043 0301 	orr.w	r3, r3, #1
 80070ce:	81a3      	strh	r3, [r4, #12]
 80070d0:	89a3      	ldrh	r3, [r4, #12]
 80070d2:	431d      	orrs	r5, r3
 80070d4:	81a5      	strh	r5, [r4, #12]
 80070d6:	e7cf      	b.n	8007078 <__smakebuf_r+0x18>

080070d8 <_fstat_r>:
 80070d8:	b538      	push	{r3, r4, r5, lr}
 80070da:	4d07      	ldr	r5, [pc, #28]	; (80070f8 <_fstat_r+0x20>)
 80070dc:	2300      	movs	r3, #0
 80070de:	4604      	mov	r4, r0
 80070e0:	4608      	mov	r0, r1
 80070e2:	4611      	mov	r1, r2
 80070e4:	602b      	str	r3, [r5, #0]
 80070e6:	f7fa fca6 	bl	8001a36 <_fstat>
 80070ea:	1c43      	adds	r3, r0, #1
 80070ec:	d102      	bne.n	80070f4 <_fstat_r+0x1c>
 80070ee:	682b      	ldr	r3, [r5, #0]
 80070f0:	b103      	cbz	r3, 80070f4 <_fstat_r+0x1c>
 80070f2:	6023      	str	r3, [r4, #0]
 80070f4:	bd38      	pop	{r3, r4, r5, pc}
 80070f6:	bf00      	nop
 80070f8:	20004688 	.word	0x20004688

080070fc <_isatty_r>:
 80070fc:	b538      	push	{r3, r4, r5, lr}
 80070fe:	4d06      	ldr	r5, [pc, #24]	; (8007118 <_isatty_r+0x1c>)
 8007100:	2300      	movs	r3, #0
 8007102:	4604      	mov	r4, r0
 8007104:	4608      	mov	r0, r1
 8007106:	602b      	str	r3, [r5, #0]
 8007108:	f7fa fca5 	bl	8001a56 <_isatty>
 800710c:	1c43      	adds	r3, r0, #1
 800710e:	d102      	bne.n	8007116 <_isatty_r+0x1a>
 8007110:	682b      	ldr	r3, [r5, #0]
 8007112:	b103      	cbz	r3, 8007116 <_isatty_r+0x1a>
 8007114:	6023      	str	r3, [r4, #0]
 8007116:	bd38      	pop	{r3, r4, r5, pc}
 8007118:	20004688 	.word	0x20004688

0800711c <_sbrk_r>:
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	4d06      	ldr	r5, [pc, #24]	; (8007138 <_sbrk_r+0x1c>)
 8007120:	2300      	movs	r3, #0
 8007122:	4604      	mov	r4, r0
 8007124:	4608      	mov	r0, r1
 8007126:	602b      	str	r3, [r5, #0]
 8007128:	f7fa fcae 	bl	8001a88 <_sbrk>
 800712c:	1c43      	adds	r3, r0, #1
 800712e:	d102      	bne.n	8007136 <_sbrk_r+0x1a>
 8007130:	682b      	ldr	r3, [r5, #0]
 8007132:	b103      	cbz	r3, 8007136 <_sbrk_r+0x1a>
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	bd38      	pop	{r3, r4, r5, pc}
 8007138:	20004688 	.word	0x20004688

0800713c <_init>:
 800713c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713e:	bf00      	nop
 8007140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007142:	bc08      	pop	{r3}
 8007144:	469e      	mov	lr, r3
 8007146:	4770      	bx	lr

08007148 <_fini>:
 8007148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800714a:	bf00      	nop
 800714c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800714e:	bc08      	pop	{r3}
 8007150:	469e      	mov	lr, r3
 8007152:	4770      	bx	lr
