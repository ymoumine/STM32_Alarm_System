
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007120  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e98  080072f0  080072f0  000172f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008188  08008188  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008188  08008188  00018188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008190  08008190  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008190  08008190  00018190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008194  08008194  00018194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000462c  20000078  08008210  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200046a4  08008210  000246a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001804e  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003943  00000000  00000000  00038139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001690  00000000  00000000  0003ba80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011a3  00000000  00000000  0003d110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000258dc  00000000  00000000  0003e2b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bfef  00000000  00000000  00063b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de645  00000000  00000000  0007fb7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000066cc  00000000  00000000  0015e1c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00164890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080072d8 	.word	0x080072d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	080072d8 	.word	0x080072d8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
	int done=1;
 80005b2:	2301      	movs	r3, #1
 80005b4:	607b      	str	r3, [r7, #4]
	while(done)
 80005b6:	e19b      	b.n	80008f0 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 80005b8:	2201      	movs	r2, #1
 80005ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005be:	48b3      	ldr	r0, [pc, #716]	; (800088c <Get_Key+0x2e0>)
 80005c0:	f001 fcf4 	bl	8001fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 80005c4:	2200      	movs	r2, #0
 80005c6:	2110      	movs	r1, #16
 80005c8:	48b0      	ldr	r0, [pc, #704]	; (800088c <Get_Key+0x2e0>)
 80005ca:	f001 fcef 	bl	8001fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80005ce:	2200      	movs	r2, #0
 80005d0:	2120      	movs	r1, #32
 80005d2:	48ae      	ldr	r0, [pc, #696]	; (800088c <Get_Key+0x2e0>)
 80005d4:	f001 fcea 	bl	8001fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80005d8:	2200      	movs	r2, #0
 80005da:	2108      	movs	r1, #8
 80005dc:	48ab      	ldr	r0, [pc, #684]	; (800088c <Get_Key+0x2e0>)
 80005de:	f001 fce5 	bl	8001fac <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80005e2:	2140      	movs	r1, #64	; 0x40
 80005e4:	48a9      	ldr	r0, [pc, #676]	; (800088c <Get_Key+0x2e0>)
 80005e6:	f001 fcc9 	bl	8001f7c <HAL_GPIO_ReadPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d00b      	beq.n	8000608 <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80005f0:	bf00      	nop
 80005f2:	2140      	movs	r1, #64	; 0x40
 80005f4:	48a5      	ldr	r0, [pc, #660]	; (800088c <Get_Key+0x2e0>)
 80005f6:	f001 fcc1 	bl	8001f7c <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1f8      	bne.n	80005f2 <Get_Key+0x46>
		key='1';
 8000600:	4ba3      	ldr	r3, [pc, #652]	; (8000890 <Get_Key+0x2e4>)
 8000602:	2231      	movs	r2, #49	; 0x31
 8000604:	701a      	strb	r2, [r3, #0]
		break;
 8000606:	e177      	b.n	80008f8 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000608:	2180      	movs	r1, #128	; 0x80
 800060a:	48a2      	ldr	r0, [pc, #648]	; (8000894 <Get_Key+0x2e8>)
 800060c:	f001 fcb6 	bl	8001f7c <HAL_GPIO_ReadPin>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d00b      	beq.n	800062e <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000616:	bf00      	nop
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	489e      	ldr	r0, [pc, #632]	; (8000894 <Get_Key+0x2e8>)
 800061c:	f001 fcae 	bl	8001f7c <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d1f8      	bne.n	8000618 <Get_Key+0x6c>
		key='4';
 8000626:	4b9a      	ldr	r3, [pc, #616]	; (8000890 <Get_Key+0x2e4>)
 8000628:	2234      	movs	r2, #52	; 0x34
 800062a:	701a      	strb	r2, [r3, #0]
		break;
 800062c:	e164      	b.n	80008f8 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800062e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000632:	4899      	ldr	r0, [pc, #612]	; (8000898 <Get_Key+0x2ec>)
 8000634:	f001 fca2 	bl	8001f7c <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d00c      	beq.n	8000658 <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800063e:	bf00      	nop
 8000640:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000644:	4894      	ldr	r0, [pc, #592]	; (8000898 <Get_Key+0x2ec>)
 8000646:	f001 fc99 	bl	8001f7c <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1f7      	bne.n	8000640 <Get_Key+0x94>
		key='7';
 8000650:	4b8f      	ldr	r3, [pc, #572]	; (8000890 <Get_Key+0x2e4>)
 8000652:	2237      	movs	r2, #55	; 0x37
 8000654:	701a      	strb	r2, [r3, #0]
		break;
 8000656:	e14f      	b.n	80008f8 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000658:	f44f 7180 	mov.w	r1, #256	; 0x100
 800065c:	488e      	ldr	r0, [pc, #568]	; (8000898 <Get_Key+0x2ec>)
 800065e:	f001 fc8d 	bl	8001f7c <HAL_GPIO_ReadPin>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d00c      	beq.n	8000682 <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000668:	bf00      	nop
 800066a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066e:	488a      	ldr	r0, [pc, #552]	; (8000898 <Get_Key+0x2ec>)
 8000670:	f001 fc84 	bl	8001f7c <HAL_GPIO_ReadPin>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d1f7      	bne.n	800066a <Get_Key+0xbe>
		key='*';
 800067a:	4b85      	ldr	r3, [pc, #532]	; (8000890 <Get_Key+0x2e4>)
 800067c:	222a      	movs	r2, #42	; 0x2a
 800067e:	701a      	strb	r2, [r3, #0]
		break;
 8000680:	e13a      	b.n	80008f8 <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000688:	4880      	ldr	r0, [pc, #512]	; (800088c <Get_Key+0x2e0>)
 800068a:	f001 fc8f 	bl	8001fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 800068e:	2201      	movs	r2, #1
 8000690:	2110      	movs	r1, #16
 8000692:	487e      	ldr	r0, [pc, #504]	; (800088c <Get_Key+0x2e0>)
 8000694:	f001 fc8a 	bl	8001fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000698:	2200      	movs	r2, #0
 800069a:	2120      	movs	r1, #32
 800069c:	487b      	ldr	r0, [pc, #492]	; (800088c <Get_Key+0x2e0>)
 800069e:	f001 fc85 	bl	8001fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80006a2:	2200      	movs	r2, #0
 80006a4:	2108      	movs	r1, #8
 80006a6:	4879      	ldr	r0, [pc, #484]	; (800088c <Get_Key+0x2e0>)
 80006a8:	f001 fc80 	bl	8001fac <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006ac:	2140      	movs	r1, #64	; 0x40
 80006ae:	4877      	ldr	r0, [pc, #476]	; (800088c <Get_Key+0x2e0>)
 80006b0:	f001 fc64 	bl	8001f7c <HAL_GPIO_ReadPin>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d00b      	beq.n	80006d2 <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006ba:	bf00      	nop
 80006bc:	2140      	movs	r1, #64	; 0x40
 80006be:	4873      	ldr	r0, [pc, #460]	; (800088c <Get_Key+0x2e0>)
 80006c0:	f001 fc5c 	bl	8001f7c <HAL_GPIO_ReadPin>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d1f8      	bne.n	80006bc <Get_Key+0x110>
		key='2';
 80006ca:	4b71      	ldr	r3, [pc, #452]	; (8000890 <Get_Key+0x2e4>)
 80006cc:	2232      	movs	r2, #50	; 0x32
 80006ce:	701a      	strb	r2, [r3, #0]
		break;
 80006d0:	e112      	b.n	80008f8 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80006d2:	2180      	movs	r1, #128	; 0x80
 80006d4:	486f      	ldr	r0, [pc, #444]	; (8000894 <Get_Key+0x2e8>)
 80006d6:	f001 fc51 	bl	8001f7c <HAL_GPIO_ReadPin>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d00b      	beq.n	80006f8 <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80006e0:	bf00      	nop
 80006e2:	2180      	movs	r1, #128	; 0x80
 80006e4:	486b      	ldr	r0, [pc, #428]	; (8000894 <Get_Key+0x2e8>)
 80006e6:	f001 fc49 	bl	8001f7c <HAL_GPIO_ReadPin>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d1f8      	bne.n	80006e2 <Get_Key+0x136>
		key='5';
 80006f0:	4b67      	ldr	r3, [pc, #412]	; (8000890 <Get_Key+0x2e4>)
 80006f2:	2235      	movs	r2, #53	; 0x35
 80006f4:	701a      	strb	r2, [r3, #0]
		break;
 80006f6:	e0ff      	b.n	80008f8 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80006f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fc:	4866      	ldr	r0, [pc, #408]	; (8000898 <Get_Key+0x2ec>)
 80006fe:	f001 fc3d 	bl	8001f7c <HAL_GPIO_ReadPin>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d00c      	beq.n	8000722 <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000708:	bf00      	nop
 800070a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070e:	4862      	ldr	r0, [pc, #392]	; (8000898 <Get_Key+0x2ec>)
 8000710:	f001 fc34 	bl	8001f7c <HAL_GPIO_ReadPin>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d1f7      	bne.n	800070a <Get_Key+0x15e>
		key='8';
 800071a:	4b5d      	ldr	r3, [pc, #372]	; (8000890 <Get_Key+0x2e4>)
 800071c:	2238      	movs	r2, #56	; 0x38
 800071e:	701a      	strb	r2, [r3, #0]
		break;
 8000720:	e0ea      	b.n	80008f8 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000722:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000726:	485c      	ldr	r0, [pc, #368]	; (8000898 <Get_Key+0x2ec>)
 8000728:	f001 fc28 	bl	8001f7c <HAL_GPIO_ReadPin>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d00c      	beq.n	800074c <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000732:	bf00      	nop
 8000734:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000738:	4857      	ldr	r0, [pc, #348]	; (8000898 <Get_Key+0x2ec>)
 800073a:	f001 fc1f 	bl	8001f7c <HAL_GPIO_ReadPin>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1f7      	bne.n	8000734 <Get_Key+0x188>
		key='0';
 8000744:	4b52      	ldr	r3, [pc, #328]	; (8000890 <Get_Key+0x2e4>)
 8000746:	2230      	movs	r2, #48	; 0x30
 8000748:	701a      	strb	r2, [r3, #0]
		break;
 800074a:	e0d5      	b.n	80008f8 <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000752:	484e      	ldr	r0, [pc, #312]	; (800088c <Get_Key+0x2e0>)
 8000754:	f001 fc2a 	bl	8001fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 8000758:	2200      	movs	r2, #0
 800075a:	2110      	movs	r1, #16
 800075c:	484b      	ldr	r0, [pc, #300]	; (800088c <Get_Key+0x2e0>)
 800075e:	f001 fc25 	bl	8001fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 8000762:	2201      	movs	r2, #1
 8000764:	2120      	movs	r1, #32
 8000766:	4849      	ldr	r0, [pc, #292]	; (800088c <Get_Key+0x2e0>)
 8000768:	f001 fc20 	bl	8001fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 800076c:	2200      	movs	r2, #0
 800076e:	2108      	movs	r1, #8
 8000770:	4846      	ldr	r0, [pc, #280]	; (800088c <Get_Key+0x2e0>)
 8000772:	f001 fc1b 	bl	8001fac <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000776:	2140      	movs	r1, #64	; 0x40
 8000778:	4844      	ldr	r0, [pc, #272]	; (800088c <Get_Key+0x2e0>)
 800077a:	f001 fbff 	bl	8001f7c <HAL_GPIO_ReadPin>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d00b      	beq.n	800079c <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000784:	bf00      	nop
 8000786:	2140      	movs	r1, #64	; 0x40
 8000788:	4840      	ldr	r0, [pc, #256]	; (800088c <Get_Key+0x2e0>)
 800078a:	f001 fbf7 	bl	8001f7c <HAL_GPIO_ReadPin>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d1f8      	bne.n	8000786 <Get_Key+0x1da>
		key='3';
 8000794:	4b3e      	ldr	r3, [pc, #248]	; (8000890 <Get_Key+0x2e4>)
 8000796:	2233      	movs	r2, #51	; 0x33
 8000798:	701a      	strb	r2, [r3, #0]
		break;
 800079a:	e0ad      	b.n	80008f8 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	483d      	ldr	r0, [pc, #244]	; (8000894 <Get_Key+0x2e8>)
 80007a0:	f001 fbec 	bl	8001f7c <HAL_GPIO_ReadPin>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d00b      	beq.n	80007c2 <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007aa:	bf00      	nop
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	4839      	ldr	r0, [pc, #228]	; (8000894 <Get_Key+0x2e8>)
 80007b0:	f001 fbe4 	bl	8001f7c <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d1f8      	bne.n	80007ac <Get_Key+0x200>
		key='6';
 80007ba:	4b35      	ldr	r3, [pc, #212]	; (8000890 <Get_Key+0x2e4>)
 80007bc:	2236      	movs	r2, #54	; 0x36
 80007be:	701a      	strb	r2, [r3, #0]
		break;
 80007c0:	e09a      	b.n	80008f8 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80007c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c6:	4834      	ldr	r0, [pc, #208]	; (8000898 <Get_Key+0x2ec>)
 80007c8:	f001 fbd8 	bl	8001f7c <HAL_GPIO_ReadPin>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d00c      	beq.n	80007ec <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80007d2:	bf00      	nop
 80007d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d8:	482f      	ldr	r0, [pc, #188]	; (8000898 <Get_Key+0x2ec>)
 80007da:	f001 fbcf 	bl	8001f7c <HAL_GPIO_ReadPin>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d1f7      	bne.n	80007d4 <Get_Key+0x228>
		key='9';
 80007e4:	4b2a      	ldr	r3, [pc, #168]	; (8000890 <Get_Key+0x2e4>)
 80007e6:	2239      	movs	r2, #57	; 0x39
 80007e8:	701a      	strb	r2, [r3, #0]
		break;
 80007ea:	e085      	b.n	80008f8 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80007ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f0:	4829      	ldr	r0, [pc, #164]	; (8000898 <Get_Key+0x2ec>)
 80007f2:	f001 fbc3 	bl	8001f7c <HAL_GPIO_ReadPin>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d00c      	beq.n	8000816 <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80007fc:	bf00      	nop
 80007fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000802:	4825      	ldr	r0, [pc, #148]	; (8000898 <Get_Key+0x2ec>)
 8000804:	f001 fbba 	bl	8001f7c <HAL_GPIO_ReadPin>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d1f7      	bne.n	80007fe <Get_Key+0x252>
		key='#';
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <Get_Key+0x2e4>)
 8000810:	2223      	movs	r2, #35	; 0x23
 8000812:	701a      	strb	r2, [r3, #0]
		break;
 8000814:	e070      	b.n	80008f8 <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800081c:	481b      	ldr	r0, [pc, #108]	; (800088c <Get_Key+0x2e0>)
 800081e:	f001 fbc5 	bl	8001fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000822:	2200      	movs	r2, #0
 8000824:	2110      	movs	r1, #16
 8000826:	4819      	ldr	r0, [pc, #100]	; (800088c <Get_Key+0x2e0>)
 8000828:	f001 fbc0 	bl	8001fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800082c:	2200      	movs	r2, #0
 800082e:	2120      	movs	r1, #32
 8000830:	4816      	ldr	r0, [pc, #88]	; (800088c <Get_Key+0x2e0>)
 8000832:	f001 fbbb 	bl	8001fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 8000836:	2201      	movs	r2, #1
 8000838:	2108      	movs	r1, #8
 800083a:	4814      	ldr	r0, [pc, #80]	; (800088c <Get_Key+0x2e0>)
 800083c:	f001 fbb6 	bl	8001fac <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000840:	2140      	movs	r1, #64	; 0x40
 8000842:	4812      	ldr	r0, [pc, #72]	; (800088c <Get_Key+0x2e0>)
 8000844:	f001 fb9a 	bl	8001f7c <HAL_GPIO_ReadPin>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00b      	beq.n	8000866 <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 800084e:	bf00      	nop
 8000850:	2140      	movs	r1, #64	; 0x40
 8000852:	480e      	ldr	r0, [pc, #56]	; (800088c <Get_Key+0x2e0>)
 8000854:	f001 fb92 	bl	8001f7c <HAL_GPIO_ReadPin>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d1f8      	bne.n	8000850 <Get_Key+0x2a4>
		key='A';
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <Get_Key+0x2e4>)
 8000860:	2241      	movs	r2, #65	; 0x41
 8000862:	701a      	strb	r2, [r3, #0]
		break;
 8000864:	e048      	b.n	80008f8 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000866:	2180      	movs	r1, #128	; 0x80
 8000868:	480a      	ldr	r0, [pc, #40]	; (8000894 <Get_Key+0x2e8>)
 800086a:	f001 fb87 	bl	8001f7c <HAL_GPIO_ReadPin>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d013      	beq.n	800089c <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000874:	bf00      	nop
 8000876:	2180      	movs	r1, #128	; 0x80
 8000878:	4806      	ldr	r0, [pc, #24]	; (8000894 <Get_Key+0x2e8>)
 800087a:	f001 fb7f 	bl	8001f7c <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d1f8      	bne.n	8000876 <Get_Key+0x2ca>
		key='B';
 8000884:	4b02      	ldr	r3, [pc, #8]	; (8000890 <Get_Key+0x2e4>)
 8000886:	2242      	movs	r2, #66	; 0x42
 8000888:	701a      	strb	r2, [r3, #0]
		break;
 800088a:	e035      	b.n	80008f8 <Get_Key+0x34c>
 800088c:	40020400 	.word	0x40020400
 8000890:	20000094 	.word	0x20000094
 8000894:	40020800 	.word	0x40020800
 8000898:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800089c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008a0:	481a      	ldr	r0, [pc, #104]	; (800090c <Get_Key+0x360>)
 80008a2:	f001 fb6b 	bl	8001f7c <HAL_GPIO_ReadPin>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d00c      	beq.n	80008c6 <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80008ac:	bf00      	nop
 80008ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b2:	4816      	ldr	r0, [pc, #88]	; (800090c <Get_Key+0x360>)
 80008b4:	f001 fb62 	bl	8001f7c <HAL_GPIO_ReadPin>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d1f7      	bne.n	80008ae <Get_Key+0x302>
		key='C';
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <Get_Key+0x364>)
 80008c0:	2243      	movs	r2, #67	; 0x43
 80008c2:	701a      	strb	r2, [r3, #0]
		break;
 80008c4:	e018      	b.n	80008f8 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80008c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ca:	4810      	ldr	r0, [pc, #64]	; (800090c <Get_Key+0x360>)
 80008cc:	f001 fb56 	bl	8001f7c <HAL_GPIO_ReadPin>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d00c      	beq.n	80008f0 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80008d6:	bf00      	nop
 80008d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008dc:	480b      	ldr	r0, [pc, #44]	; (800090c <Get_Key+0x360>)
 80008de:	f001 fb4d 	bl	8001f7c <HAL_GPIO_ReadPin>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d1f7      	bne.n	80008d8 <Get_Key+0x32c>
		key='D';
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <Get_Key+0x364>)
 80008ea:	2244      	movs	r2, #68	; 0x44
 80008ec:	701a      	strb	r2, [r3, #0]
		break;
 80008ee:	e003      	b.n	80008f8 <Get_Key+0x34c>
	while(done)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	f47f ae60 	bne.w	80005b8 <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008f8:	2120      	movs	r1, #32
 80008fa:	4804      	ldr	r0, [pc, #16]	; (800090c <Get_Key+0x360>)
 80008fc:	f001 fb6f 	bl	8001fde <HAL_GPIO_TogglePin>
	return(key);
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <Get_Key+0x364>)
 8000902:	781b      	ldrb	r3, [r3, #0]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40020000 	.word	0x40020000
 8000910:	20000094 	.word	0x20000094

08000914 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	4a07      	ldr	r2, [pc, #28]	; (8000940 <vApplicationGetIdleTaskMemory+0x2c>)
 8000924:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	4a06      	ldr	r2, [pc, #24]	; (8000944 <vApplicationGetIdleTaskMemory+0x30>)
 800092a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2280      	movs	r2, #128	; 0x80
 8000930:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000932:	bf00      	nop
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000098 	.word	0x20000098
 8000944:	200000ec 	.word	0x200000ec

08000948 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000948:	b5b0      	push	{r4, r5, r7, lr}
 800094a:	b092      	sub	sp, #72	; 0x48
 800094c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800094e:	f001 f839 	bl	80019c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000952:	f000 f86b 	bl	8000a2c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000956:	f000 f92f 	bl	8000bb8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800095a:	f000 f903 	bl	8000b64 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 800095e:	f000 f8d3 	bl	8000b08 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	/* USER CODE BEGIN 2 */
	SSD1306_Init();
 8000962:	f000 fb2f 	bl	8000fc4 <SSD1306_Init>
	SSD1306_GotoXY(0, 0);
 8000966:	2100      	movs	r1, #0
 8000968:	2000      	movs	r0, #0
 800096a:	f000 fc95 	bl	8001298 <SSD1306_GotoXY>
	//SSD1306_Puts ("Voltage:", &Font_11x18, 1);
	SSD1306_Puts("Not Armed!", &Font_11x18, 1);
 800096e:	2201      	movs	r2, #1
 8000970:	4925      	ldr	r1, [pc, #148]	; (8000a08 <main+0xc0>)
 8000972:	4826      	ldr	r0, [pc, #152]	; (8000a0c <main+0xc4>)
 8000974:	f000 fd26 	bl	80013c4 <SSD1306_Puts>
	SSD1306_GotoXY(0, 30);
 8000978:	211e      	movs	r1, #30
 800097a:	2000      	movs	r0, #0
 800097c:	f000 fc8c 	bl	8001298 <SSD1306_GotoXY>
	SSD1306_Puts("Code:", &Font_11x18, 1);
 8000980:	2201      	movs	r2, #1
 8000982:	4921      	ldr	r1, [pc, #132]	; (8000a08 <main+0xc0>)
 8000984:	4822      	ldr	r0, [pc, #136]	; (8000a10 <main+0xc8>)
 8000986:	f000 fd1d 	bl	80013c4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800098a:	f000 fbdf 	bl	800114c <SSD1306_UpdateScreen>
	SSD1306_UpdateScreen();
 800098e:	f000 fbdd 	bl	800114c <SSD1306_UpdateScreen>
	HAL_Delay(500);
 8000992:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000996:	f001 f857 	bl	8001a48 <HAL_Delay>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of myQueue01 */
	osMessageQDef(myQueue01, 16, char);
 800099a:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <main+0xcc>)
 800099c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80009a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80009a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f003 fcfc 	bl	80043aa <osMessageCreate>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4a18      	ldr	r2, [pc, #96]	; (8000a18 <main+0xd0>)
 80009b6:	6013      	str	r3, [r2, #0]

	/* Create the thread(s) */
	/* definition and creation of defaultTask */

	/* definition and creation of myTask02 */
	osThreadDef(myTask02, StartTask02, osPriorityAboveNormal, 0, 128);
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <main+0xd4>)
 80009ba:	f107 041c 	add.w	r4, r7, #28
 80009be:	461d      	mov	r5, r3
 80009c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f003 fc89 	bl	80042ea <osThreadCreate>
 80009d8:	4603      	mov	r3, r0
 80009da:	4a11      	ldr	r2, [pc, #68]	; (8000a20 <main+0xd8>)
 80009dc:	6013      	str	r3, [r2, #0]

	/* definition and creation of myTask03 */
	osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <main+0xdc>)
 80009e0:	463c      	mov	r4, r7
 80009e2:	461d      	mov	r5, r3
 80009e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80009f0:	463b      	mov	r3, r7
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f003 fc78 	bl	80042ea <osThreadCreate>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <main+0xe0>)
 80009fe:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000a00:	f003 fc6c 	bl	80042dc <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000a04:	e7fe      	b.n	8000a04 <main+0xbc>
 8000a06:	bf00      	nop
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	080072f0 	.word	0x080072f0
 8000a10:	080072fc 	.word	0x080072fc
 8000a14:	08007304 	.word	0x08007304
 8000a18:	20000390 	.word	0x20000390
 8000a1c:	08007320 	.word	0x08007320
 8000a20:	20000388 	.word	0x20000388
 8000a24:	08007348 	.word	0x08007348
 8000a28:	2000038c 	.word	0x2000038c

08000a2c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b094      	sub	sp, #80	; 0x50
 8000a30:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	2234      	movs	r2, #52	; 0x34
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f005 fe8e 	bl	800675c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a40:	f107 0308 	add.w	r3, r7, #8
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <SystemClock_Config+0xd4>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	4a29      	ldr	r2, [pc, #164]	; (8000b00 <SystemClock_Config+0xd4>)
 8000a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a60:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <SystemClock_Config+0xd4>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	4b24      	ldr	r3, [pc, #144]	; (8000b04 <SystemClock_Config+0xd8>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a78:	4a22      	ldr	r2, [pc, #136]	; (8000b04 <SystemClock_Config+0xd8>)
 8000a7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <SystemClock_Config+0xd8>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a94:	2310      	movs	r3, #16
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000aa0:	2310      	movs	r3, #16
 8000aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000aa4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000aa8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4618      	mov	r0, r3
 8000abc:	f002 fbf2 	bl	80032a4 <HAL_RCC_OscConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0x9e>
		Error_Handler();
 8000ac6:	f000 fa77 	bl	8000fb8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000aca:	230f      	movs	r3, #15
 8000acc:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ada:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000ae0:	f107 0308 	add.w	r3, r7, #8
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 f860 	bl	8002bac <HAL_RCC_ClockConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0xca>
		Error_Handler();
 8000af2:	f000 fa61 	bl	8000fb8 <Error_Handler>
	}
}
 8000af6:	bf00      	nop
 8000af8:	3750      	adds	r7, #80	; 0x50
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40007000 	.word	0x40007000

08000b08 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <MX_I2C1_Init+0x50>)
 8000b0e:	4a13      	ldr	r2, [pc, #76]	; (8000b5c <MX_I2C1_Init+0x54>)
 8000b10:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_I2C1_Init+0x50>)
 8000b14:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <MX_I2C1_Init+0x58>)
 8000b16:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_I2C1_Init+0x50>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_I2C1_Init+0x50>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_I2C1_Init+0x50>)
 8000b26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b2a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <MX_I2C1_Init+0x50>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_I2C1_Init+0x50>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <MX_I2C1_Init+0x50>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_I2C1_Init+0x50>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <MX_I2C1_Init+0x50>)
 8000b46:	f001 fa65 	bl	8002014 <HAL_I2C_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000b50:	f000 fa32 	bl	8000fb8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	200002ec 	.word	0x200002ec
 8000b5c:	40005400 	.word	0x40005400
 8000b60:	00061a80 	.word	0x00061a80

08000b64 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	; (8000bb4 <MX_USART2_UART_Init+0x50>)
 8000b6c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b74:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b9c:	f003 f8c2 	bl	8003d24 <HAL_UART_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000ba6:	f000 fa07 	bl	8000fb8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000340 	.word	0x20000340
 8000bb4:	40004400 	.word	0x40004400

08000bb8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b54      	ldr	r3, [pc, #336]	; (8000d24 <MX_GPIO_Init+0x16c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a53      	ldr	r2, [pc, #332]	; (8000d24 <MX_GPIO_Init+0x16c>)
 8000bd8:	f043 0304 	orr.w	r3, r3, #4
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b51      	ldr	r3, [pc, #324]	; (8000d24 <MX_GPIO_Init+0x16c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b4d      	ldr	r3, [pc, #308]	; (8000d24 <MX_GPIO_Init+0x16c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a4c      	ldr	r2, [pc, #304]	; (8000d24 <MX_GPIO_Init+0x16c>)
 8000bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b4a      	ldr	r3, [pc, #296]	; (8000d24 <MX_GPIO_Init+0x16c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	4b46      	ldr	r3, [pc, #280]	; (8000d24 <MX_GPIO_Init+0x16c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a45      	ldr	r2, [pc, #276]	; (8000d24 <MX_GPIO_Init+0x16c>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b43      	ldr	r3, [pc, #268]	; (8000d24 <MX_GPIO_Init+0x16c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b3f      	ldr	r3, [pc, #252]	; (8000d24 <MX_GPIO_Init+0x16c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a3e      	ldr	r2, [pc, #248]	; (8000d24 <MX_GPIO_Init+0x16c>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b3c      	ldr	r3, [pc, #240]	; (8000d24 <MX_GPIO_Init+0x16c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2120      	movs	r1, #32
 8000c42:	4839      	ldr	r0, [pc, #228]	; (8000d28 <MX_GPIO_Init+0x170>)
 8000c44:	f001 f9b2 	bl	8001fac <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	21c0      	movs	r1, #192	; 0xc0
 8000c4c:	4836      	ldr	r0, [pc, #216]	; (8000d28 <MX_GPIO_Init+0x170>)
 8000c4e:	f001 f9ad 	bl	8001fac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, KC0_Pin | KC3_Pin | KC1_Pin | KC2_Pin,
 8000c52:	2200      	movs	r2, #0
 8000c54:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000c58:	4834      	ldr	r0, [pc, #208]	; (8000d2c <MX_GPIO_Init+0x174>)
 8000c5a:	f001 f9a7 	bl	8001fac <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c5e:	2320      	movs	r3, #32
 8000c60:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	482c      	ldr	r0, [pc, #176]	; (8000d28 <MX_GPIO_Init+0x170>)
 8000c76:	f000 ffed 	bl	8001c54 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c7a:	2340      	movs	r3, #64	; 0x40
 8000c7c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4825      	ldr	r0, [pc, #148]	; (8000d28 <MX_GPIO_Init+0x170>)
 8000c92:	f000 ffdf 	bl	8001c54 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c96:	2380      	movs	r3, #128	; 0x80
 8000c98:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4619      	mov	r1, r3
 8000cac:	481e      	ldr	r0, [pc, #120]	; (8000d28 <MX_GPIO_Init+0x170>)
 8000cae:	f000 ffd1 	bl	8001c54 <HAL_GPIO_Init>

	/*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
	GPIO_InitStruct.Pin = KC0_Pin | KC3_Pin | KC1_Pin | KC2_Pin;
 8000cb2:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000cb6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4818      	ldr	r0, [pc, #96]	; (8000d2c <MX_GPIO_Init+0x174>)
 8000ccc:	f000 ffc2 	bl	8001c54 <HAL_GPIO_Init>

	/*Configure GPIO pin : KR1_Pin */
	GPIO_InitStruct.Pin = KR1_Pin;
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4813      	ldr	r0, [pc, #76]	; (8000d30 <MX_GPIO_Init+0x178>)
 8000ce4:	f000 ffb6 	bl	8001c54 <HAL_GPIO_Init>

	/*Configure GPIO pins : KR3_Pin KR2_Pin */
	GPIO_InitStruct.Pin = KR3_Pin | KR2_Pin;
 8000ce8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480a      	ldr	r0, [pc, #40]	; (8000d28 <MX_GPIO_Init+0x170>)
 8000cfe:	f000 ffa9 	bl	8001c54 <HAL_GPIO_Init>

	/*Configure GPIO pin : KR0_Pin */
	GPIO_InitStruct.Pin = KR0_Pin;
 8000d02:	2340      	movs	r3, #64	; 0x40
 8000d04:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_GPIO_Init+0x174>)
 8000d16:	f000 ff9d 	bl	8001c54 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3728      	adds	r7, #40	; 0x28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020000 	.word	0x40020000
 8000d2c:	40020400 	.word	0x40020400
 8000d30:	40020800 	.word	0x40020800

08000d34 <StartTask02>:
 * @brief Function implementing the myTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const *argument) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */

	for (;;) {

		if (initial == 1) {
 8000d3c:	4b72      	ldr	r3, [pc, #456]	; (8000f08 <StartTask02+0x1d4>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d10c      	bne.n	8000d5e <StartTask02+0x2a>
			// Display initial setup message on OLED
			SSD1306_Clear();
 8000d44:	f000 fb63 	bl	800140e <SSD1306_Clear>
			SSD1306_GotoXY(0, 0); // Adjust based on your display size and font
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f000 faa4 	bl	8001298 <SSD1306_GotoXY>
			SSD1306_Puts("Entrer Code:", &Font_11x18, 1);
 8000d50:	2201      	movs	r2, #1
 8000d52:	496e      	ldr	r1, [pc, #440]	; (8000f0c <StartTask02+0x1d8>)
 8000d54:	486e      	ldr	r0, [pc, #440]	; (8000f10 <StartTask02+0x1dc>)
 8000d56:	f000 fb35 	bl	80013c4 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8000d5a:	f000 f9f7 	bl	800114c <SSD1306_UpdateScreen>
		}

		if (armed) {
 8000d5e:	4b6d      	ldr	r3, [pc, #436]	; (8000f14 <StartTask02+0x1e0>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d00e      	beq.n	8000d84 <StartTask02+0x50>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	2140      	movs	r1, #64	; 0x40
 8000d6a:	486b      	ldr	r0, [pc, #428]	; (8000f18 <StartTask02+0x1e4>)
 8000d6c:	f001 f91e 	bl	8001fac <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2180      	movs	r1, #128	; 0x80
 8000d74:	4868      	ldr	r0, [pc, #416]	; (8000f18 <StartTask02+0x1e4>)
 8000d76:	f001 f919 	bl	8001fac <HAL_GPIO_WritePin>
					osDelay(2000);
 8000d7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d7e:	f003 fb00 	bl	8004382 <osDelay>
 8000d82:	e009      	b.n	8000d98 <StartTask02+0x64>
				} else {
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	2180      	movs	r1, #128	; 0x80
 8000d88:	4863      	ldr	r0, [pc, #396]	; (8000f18 <StartTask02+0x1e4>)
 8000d8a:	f001 f90f 	bl	8001fac <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2140      	movs	r1, #64	; 0x40
 8000d92:	4861      	ldr	r0, [pc, #388]	; (8000f18 <StartTask02+0x1e4>)
 8000d94:	f001 f90a 	bl	8001fac <HAL_GPIO_WritePin>
				}

		if (xQueueReceive(myQueue01Handle, &inputKey,
 8000d98:	4b60      	ldr	r3, [pc, #384]	; (8000f1c <StartTask02+0x1e8>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000da0:	495f      	ldr	r1, [pc, #380]	; (8000f20 <StartTask02+0x1ec>)
 8000da2:	4618      	mov	r0, r3
 8000da4:	f003 fe16 	bl	80049d4 <xQueueReceive>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d1c6      	bne.n	8000d3c <StartTask02+0x8>
				portMAX_DELAY) == pdPASS) {
			if (inputKey == '#' && bufferIndex > minbufferIndex) { // Enter code
 8000dae:	4b5c      	ldr	r3, [pc, #368]	; (8000f20 <StartTask02+0x1ec>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b23      	cmp	r3, #35	; 0x23
 8000db4:	f040 8089 	bne.w	8000eca <StartTask02+0x196>
 8000db8:	4b5a      	ldr	r3, [pc, #360]	; (8000f24 <StartTask02+0x1f0>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2204      	movs	r2, #4
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	f240 8083 	bls.w	8000eca <StartTask02+0x196>

				if (initial == 1) {
 8000dc4:	4b50      	ldr	r3, [pc, #320]	; (8000f08 <StartTask02+0x1d4>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d120      	bne.n	8000e0e <StartTask02+0xda>

					strncpy(correctCode, inputCode, sizeof(correctCode));
 8000dcc:	2207      	movs	r2, #7
 8000dce:	4956      	ldr	r1, [pc, #344]	; (8000f28 <StartTask02+0x1f4>)
 8000dd0:	4856      	ldr	r0, [pc, #344]	; (8000f2c <StartTask02+0x1f8>)
 8000dd2:	f005 fcdd 	bl	8006790 <strncpy>

					SSD1306_Clear();
 8000dd6:	f000 fb1a 	bl	800140e <SSD1306_Clear>
					SSD1306_GotoXY(0, 0);
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f000 fa5b 	bl	8001298 <SSD1306_GotoXY>
					SSD1306_Puts("Code Set", &Font_11x18, 1);
 8000de2:	2201      	movs	r2, #1
 8000de4:	4949      	ldr	r1, [pc, #292]	; (8000f0c <StartTask02+0x1d8>)
 8000de6:	4852      	ldr	r0, [pc, #328]	; (8000f30 <StartTask02+0x1fc>)
 8000de8:	f000 faec 	bl	80013c4 <SSD1306_Puts>
					SSD1306_UpdateScreen();
 8000dec:	f000 f9ae 	bl	800114c <SSD1306_UpdateScreen>

					// osDelay(2000);
					armed = 1;
 8000df0:	4b48      	ldr	r3, [pc, #288]	; (8000f14 <StartTask02+0x1e0>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	601a      	str	r2, [r3, #0]

					memset(inputCode, 0, sizeof(inputCode)); // Clear code
 8000df6:	2207      	movs	r2, #7
 8000df8:	2100      	movs	r1, #0
 8000dfa:	484b      	ldr	r0, [pc, #300]	; (8000f28 <StartTask02+0x1f4>)
 8000dfc:	f005 fcae 	bl	800675c <memset>
					bufferIndex = 0;
 8000e00:	4b48      	ldr	r3, [pc, #288]	; (8000f24 <StartTask02+0x1f0>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]

					initial = 0;
 8000e06:	4b40      	ldr	r3, [pc, #256]	; (8000f08 <StartTask02+0x1d4>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	e030      	b.n	8000e70 <StartTask02+0x13c>
				} else {

					// Check code
					if (strncmp(inputCode, correctCode, maxbufferIndex) == 0
 8000e0e:	2306      	movs	r3, #6
 8000e10:	461a      	mov	r2, r3
 8000e12:	4946      	ldr	r1, [pc, #280]	; (8000f2c <StartTask02+0x1f8>)
 8000e14:	4844      	ldr	r0, [pc, #272]	; (8000f28 <StartTask02+0x1f4>)
 8000e16:	f005 fca9 	bl	800676c <strncmp>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d11a      	bne.n	8000e56 <StartTask02+0x122>
							&& initial == 0) {
 8000e20:	4b39      	ldr	r3, [pc, #228]	; (8000f08 <StartTask02+0x1d4>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d116      	bne.n	8000e56 <StartTask02+0x122>
						SSD1306_Clear();
 8000e28:	f000 faf1 	bl	800140e <SSD1306_Clear>
						SSD1306_GotoXY(0, 0);
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f000 fa32 	bl	8001298 <SSD1306_GotoXY>
						SSD1306_Puts("Correct!", &Font_11x18, 1);
 8000e34:	2201      	movs	r2, #1
 8000e36:	4935      	ldr	r1, [pc, #212]	; (8000f0c <StartTask02+0x1d8>)
 8000e38:	483e      	ldr	r0, [pc, #248]	; (8000f34 <StartTask02+0x200>)
 8000e3a:	f000 fac3 	bl	80013c4 <SSD1306_Puts>
						if (armed) {
 8000e3e:	4b35      	ldr	r3, [pc, #212]	; (8000f14 <StartTask02+0x1e0>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <StartTask02+0x11a>
							armed = 0;
 8000e46:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <StartTask02+0x1e0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
						if (armed) {
 8000e4c:	e00e      	b.n	8000e6c <StartTask02+0x138>
						} else {
							armed = 1;
 8000e4e:	4b31      	ldr	r3, [pc, #196]	; (8000f14 <StartTask02+0x1e0>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	601a      	str	r2, [r3, #0]
						if (armed) {
 8000e54:	e00a      	b.n	8000e6c <StartTask02+0x138>
						}
					} else {
						SSD1306_Clear();
 8000e56:	f000 fada 	bl	800140e <SSD1306_Clear>
						SSD1306_GotoXY(0, 0);
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f000 fa1b 	bl	8001298 <SSD1306_GotoXY>
						SSD1306_Puts("Erreur!", &Font_11x18, 1);
 8000e62:	2201      	movs	r2, #1
 8000e64:	4929      	ldr	r1, [pc, #164]	; (8000f0c <StartTask02+0x1d8>)
 8000e66:	4834      	ldr	r0, [pc, #208]	; (8000f38 <StartTask02+0x204>)
 8000e68:	f000 faac 	bl	80013c4 <SSD1306_Puts>
					}
					SSD1306_UpdateScreen();
 8000e6c:	f000 f96e 	bl	800114c <SSD1306_UpdateScreen>
				}
				HAL_Delay(2000); // Display message for 2 seconds
 8000e70:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e74:	f000 fde8 	bl	8001a48 <HAL_Delay>

				// Reset display and code length for next entry
				SSD1306_Clear();
 8000e78:	f000 fac9 	bl	800140e <SSD1306_Clear>
				SSD1306_GotoXY(0, 0);
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f000 fa0a 	bl	8001298 <SSD1306_GotoXY>
				if (armed) {
 8000e84:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <StartTask02+0x1e0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d005      	beq.n	8000e98 <StartTask02+0x164>
					SSD1306_Puts("Armee", &Font_11x18, 1);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	491f      	ldr	r1, [pc, #124]	; (8000f0c <StartTask02+0x1d8>)
 8000e90:	482a      	ldr	r0, [pc, #168]	; (8000f3c <StartTask02+0x208>)
 8000e92:	f000 fa97 	bl	80013c4 <SSD1306_Puts>
 8000e96:	e004      	b.n	8000ea2 <StartTask02+0x16e>

				} else {
					SSD1306_Puts("Non Armee", &Font_11x18, 1);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	491c      	ldr	r1, [pc, #112]	; (8000f0c <StartTask02+0x1d8>)
 8000e9c:	4828      	ldr	r0, [pc, #160]	; (8000f40 <StartTask02+0x20c>)
 8000e9e:	f000 fa91 	bl	80013c4 <SSD1306_Puts>

				}
				SSD1306_GotoXY(0, 30); // Adjust Y position based on your font size
 8000ea2:	211e      	movs	r1, #30
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f000 f9f7 	bl	8001298 <SSD1306_GotoXY>
				SSD1306_Puts("Code:", &Font_11x18, 1);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4917      	ldr	r1, [pc, #92]	; (8000f0c <StartTask02+0x1d8>)
 8000eae:	4825      	ldr	r0, [pc, #148]	; (8000f44 <StartTask02+0x210>)
 8000eb0:	f000 fa88 	bl	80013c4 <SSD1306_Puts>
				SSD1306_UpdateScreen();
 8000eb4:	f000 f94a 	bl	800114c <SSD1306_UpdateScreen>

				memset(inputCode, 0, sizeof(inputCode)); // Clear the entered code
 8000eb8:	2207      	movs	r2, #7
 8000eba:	2100      	movs	r1, #0
 8000ebc:	481a      	ldr	r0, [pc, #104]	; (8000f28 <StartTask02+0x1f4>)
 8000ebe:	f005 fc4d 	bl	800675c <memset>
				bufferIndex = 0;
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <StartTask02+0x1f0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
 8000ec8:	e01c      	b.n	8000f04 <StartTask02+0x1d0>

			} else {
				// Add received key to the entered code and update display with an additional asterisk
				if (bufferIndex < maxbufferIndex) { // Prevent buffer overflow
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <StartTask02+0x1f0>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2206      	movs	r2, #6
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d214      	bcs.n	8000efe <StartTask02+0x1ca>
					inputCode[bufferIndex] = inputKey; // Store the received key
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <StartTask02+0x1f0>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <StartTask02+0x1ec>)
 8000edc:	7819      	ldrb	r1, [r3, #0]
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <StartTask02+0x1f4>)
 8000ee0:	5499      	strb	r1, [r3, r2]
					//SSD1306_GotoXY ((bufferIndex * 5), 30); // Adjust spacing based on font size
					SSD1306_Puts("*", &Font_11x18, 1);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4909      	ldr	r1, [pc, #36]	; (8000f0c <StartTask02+0x1d8>)
 8000ee6:	4818      	ldr	r0, [pc, #96]	; (8000f48 <StartTask02+0x214>)
 8000ee8:	f000 fa6c 	bl	80013c4 <SSD1306_Puts>
					SSD1306_UpdateScreen();
 8000eec:	f000 f92e 	bl	800114c <SSD1306_UpdateScreen>
					bufferIndex++;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <StartTask02+0x1f0>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <StartTask02+0x1f0>)
 8000efa:	701a      	strb	r2, [r3, #0]
 8000efc:	e71e      	b.n	8000d3c <StartTask02+0x8>
					// Might  wait here? HAL_Delay (500);
				} else {
					printf("Erreur!");
 8000efe:	480e      	ldr	r0, [pc, #56]	; (8000f38 <StartTask02+0x204>)
 8000f00:	f005 fae6 	bl	80064d0 <iprintf>
		if (initial == 1) {
 8000f04:	e71a      	b.n	8000d3c <StartTask02+0x8>
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	08007364 	.word	0x08007364
 8000f14:	20000394 	.word	0x20000394
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	20000390 	.word	0x20000390
 8000f20:	20000398 	.word	0x20000398
 8000f24:	20000399 	.word	0x20000399
 8000f28:	2000039c 	.word	0x2000039c
 8000f2c:	200003a4 	.word	0x200003a4
 8000f30:	08007374 	.word	0x08007374
 8000f34:	08007380 	.word	0x08007380
 8000f38:	0800738c 	.word	0x0800738c
 8000f3c:	08007394 	.word	0x08007394
 8000f40:	0800739c 	.word	0x0800739c
 8000f44:	080072fc 	.word	0x080072fc
 8000f48:	080073a8 	.word	0x080073a8

08000f4c <StartTask03>:
	}

	/* USER CODE END StartTask02 */
}

void StartTask03(void const *argument) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	const TickType_t xDelay = 20 / portTICK_PERIOD_MS; // Debounce delay
 8000f54:	2314      	movs	r3, #20
 8000f56:	60fb      	str	r3, [r7, #12]
	char keyToSend; // To hold the key to be sent

	for (;;) {
		keyToSend = Get_Key(); // Assume Get_Key() is debounced and returns '\0' if no key is pressed
 8000f58:	f7ff fb28 	bl	80005ac <Get_Key>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	72fb      	strb	r3, [r7, #11]
		if (keyToSend != '\0') { // Check if a key is pressed
 8000f60:	7afb      	ldrb	r3, [r7, #11]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d00e      	beq.n	8000f84 <StartTask03+0x38>
			// Send the key press to the display task
			if (xQueueSend(myQueue01Handle, &keyToSend, portMAX_DELAY) != pdPASS) {
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <StartTask03+0x40>)
 8000f68:	6818      	ldr	r0, [r3, #0]
 8000f6a:	f107 010b 	add.w	r1, r7, #11
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	f003 fc30 	bl	80047d8 <xQueueGenericSend>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d002      	beq.n	8000f84 <StartTask03+0x38>
				printf("Error: Data couldn't be sent from task 2\r\n");
 8000f7e:	4804      	ldr	r0, [pc, #16]	; (8000f90 <StartTask03+0x44>)
 8000f80:	f005 fb0c 	bl	800659c <puts>
			}
		}

		vTaskDelay(xDelay); // Wait for the next cycle
 8000f84:	68f8      	ldr	r0, [r7, #12]
 8000f86:	f004 f8a9 	bl	80050dc <vTaskDelay>
		keyToSend = Get_Key(); // Assume Get_Key() is debounced and returns '\0' if no key is pressed
 8000f8a:	e7e5      	b.n	8000f58 <StartTask03+0xc>
 8000f8c:	20000390 	.word	0x20000390
 8000f90:	080073ac 	.word	0x080073ac

08000f94 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d101      	bne.n	8000faa <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000fa6:	f000 fd2f 	bl	8001a08 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40001000 	.word	0x40001000

08000fb8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fbc:	b672      	cpsid	i
}
 8000fbe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fc0:	e7fe      	b.n	8000fc0 <Error_Handler+0x8>
	...

08000fc4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000fca:	f000 fa29 	bl	8001420 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000fce:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2178      	movs	r1, #120	; 0x78
 8000fd6:	485b      	ldr	r0, [pc, #364]	; (8001144 <SSD1306_Init+0x180>)
 8000fd8:	f001 fa5e 	bl	8002498 <HAL_I2C_IsDeviceReady>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e0a9      	b.n	800113a <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000fe6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000fea:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fec:	e002      	b.n	8000ff4 <SSD1306_Init+0x30>
		p--;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f9      	bne.n	8000fee <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000ffa:	22ae      	movs	r2, #174	; 0xae
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2078      	movs	r0, #120	; 0x78
 8001000:	f000 fa8a 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001004:	2220      	movs	r2, #32
 8001006:	2100      	movs	r1, #0
 8001008:	2078      	movs	r0, #120	; 0x78
 800100a:	f000 fa85 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800100e:	2210      	movs	r2, #16
 8001010:	2100      	movs	r1, #0
 8001012:	2078      	movs	r0, #120	; 0x78
 8001014:	f000 fa80 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001018:	22b0      	movs	r2, #176	; 0xb0
 800101a:	2100      	movs	r1, #0
 800101c:	2078      	movs	r0, #120	; 0x78
 800101e:	f000 fa7b 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001022:	22c8      	movs	r2, #200	; 0xc8
 8001024:	2100      	movs	r1, #0
 8001026:	2078      	movs	r0, #120	; 0x78
 8001028:	f000 fa76 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800102c:	2200      	movs	r2, #0
 800102e:	2100      	movs	r1, #0
 8001030:	2078      	movs	r0, #120	; 0x78
 8001032:	f000 fa71 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001036:	2210      	movs	r2, #16
 8001038:	2100      	movs	r1, #0
 800103a:	2078      	movs	r0, #120	; 0x78
 800103c:	f000 fa6c 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001040:	2240      	movs	r2, #64	; 0x40
 8001042:	2100      	movs	r1, #0
 8001044:	2078      	movs	r0, #120	; 0x78
 8001046:	f000 fa67 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800104a:	2281      	movs	r2, #129	; 0x81
 800104c:	2100      	movs	r1, #0
 800104e:	2078      	movs	r0, #120	; 0x78
 8001050:	f000 fa62 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001054:	22ff      	movs	r2, #255	; 0xff
 8001056:	2100      	movs	r1, #0
 8001058:	2078      	movs	r0, #120	; 0x78
 800105a:	f000 fa5d 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800105e:	22a1      	movs	r2, #161	; 0xa1
 8001060:	2100      	movs	r1, #0
 8001062:	2078      	movs	r0, #120	; 0x78
 8001064:	f000 fa58 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001068:	22a6      	movs	r2, #166	; 0xa6
 800106a:	2100      	movs	r1, #0
 800106c:	2078      	movs	r0, #120	; 0x78
 800106e:	f000 fa53 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001072:	22a8      	movs	r2, #168	; 0xa8
 8001074:	2100      	movs	r1, #0
 8001076:	2078      	movs	r0, #120	; 0x78
 8001078:	f000 fa4e 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800107c:	223f      	movs	r2, #63	; 0x3f
 800107e:	2100      	movs	r1, #0
 8001080:	2078      	movs	r0, #120	; 0x78
 8001082:	f000 fa49 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001086:	22a4      	movs	r2, #164	; 0xa4
 8001088:	2100      	movs	r1, #0
 800108a:	2078      	movs	r0, #120	; 0x78
 800108c:	f000 fa44 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001090:	22d3      	movs	r2, #211	; 0xd3
 8001092:	2100      	movs	r1, #0
 8001094:	2078      	movs	r0, #120	; 0x78
 8001096:	f000 fa3f 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	2078      	movs	r0, #120	; 0x78
 80010a0:	f000 fa3a 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80010a4:	22d5      	movs	r2, #213	; 0xd5
 80010a6:	2100      	movs	r1, #0
 80010a8:	2078      	movs	r0, #120	; 0x78
 80010aa:	f000 fa35 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80010ae:	22f0      	movs	r2, #240	; 0xf0
 80010b0:	2100      	movs	r1, #0
 80010b2:	2078      	movs	r0, #120	; 0x78
 80010b4:	f000 fa30 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80010b8:	22d9      	movs	r2, #217	; 0xd9
 80010ba:	2100      	movs	r1, #0
 80010bc:	2078      	movs	r0, #120	; 0x78
 80010be:	f000 fa2b 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80010c2:	2222      	movs	r2, #34	; 0x22
 80010c4:	2100      	movs	r1, #0
 80010c6:	2078      	movs	r0, #120	; 0x78
 80010c8:	f000 fa26 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80010cc:	22da      	movs	r2, #218	; 0xda
 80010ce:	2100      	movs	r1, #0
 80010d0:	2078      	movs	r0, #120	; 0x78
 80010d2:	f000 fa21 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80010d6:	2212      	movs	r2, #18
 80010d8:	2100      	movs	r1, #0
 80010da:	2078      	movs	r0, #120	; 0x78
 80010dc:	f000 fa1c 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80010e0:	22db      	movs	r2, #219	; 0xdb
 80010e2:	2100      	movs	r1, #0
 80010e4:	2078      	movs	r0, #120	; 0x78
 80010e6:	f000 fa17 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80010ea:	2220      	movs	r2, #32
 80010ec:	2100      	movs	r1, #0
 80010ee:	2078      	movs	r0, #120	; 0x78
 80010f0:	f000 fa12 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80010f4:	228d      	movs	r2, #141	; 0x8d
 80010f6:	2100      	movs	r1, #0
 80010f8:	2078      	movs	r0, #120	; 0x78
 80010fa:	f000 fa0d 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80010fe:	2214      	movs	r2, #20
 8001100:	2100      	movs	r1, #0
 8001102:	2078      	movs	r0, #120	; 0x78
 8001104:	f000 fa08 	bl	8001518 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001108:	22af      	movs	r2, #175	; 0xaf
 800110a:	2100      	movs	r1, #0
 800110c:	2078      	movs	r0, #120	; 0x78
 800110e:	f000 fa03 	bl	8001518 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001112:	222e      	movs	r2, #46	; 0x2e
 8001114:	2100      	movs	r1, #0
 8001116:	2078      	movs	r0, #120	; 0x78
 8001118:	f000 f9fe 	bl	8001518 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800111c:	2000      	movs	r0, #0
 800111e:	f000 f843 	bl	80011a8 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001122:	f000 f813 	bl	800114c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <SSD1306_Init+0x184>)
 8001128:	2200      	movs	r2, #0
 800112a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <SSD1306_Init+0x184>)
 800112e:	2200      	movs	r2, #0
 8001130:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <SSD1306_Init+0x184>)
 8001134:	2201      	movs	r2, #1
 8001136:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001138:	2301      	movs	r3, #1
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200002ec 	.word	0x200002ec
 8001148:	200007ac 	.word	0x200007ac

0800114c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001152:	2300      	movs	r3, #0
 8001154:	71fb      	strb	r3, [r7, #7]
 8001156:	e01d      	b.n	8001194 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	3b50      	subs	r3, #80	; 0x50
 800115c:	b2db      	uxtb	r3, r3
 800115e:	461a      	mov	r2, r3
 8001160:	2100      	movs	r1, #0
 8001162:	2078      	movs	r0, #120	; 0x78
 8001164:	f000 f9d8 	bl	8001518 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001168:	2200      	movs	r2, #0
 800116a:	2100      	movs	r1, #0
 800116c:	2078      	movs	r0, #120	; 0x78
 800116e:	f000 f9d3 	bl	8001518 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001172:	2210      	movs	r2, #16
 8001174:	2100      	movs	r1, #0
 8001176:	2078      	movs	r0, #120	; 0x78
 8001178:	f000 f9ce 	bl	8001518 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	01db      	lsls	r3, r3, #7
 8001180:	4a08      	ldr	r2, [pc, #32]	; (80011a4 <SSD1306_UpdateScreen+0x58>)
 8001182:	441a      	add	r2, r3
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	2140      	movs	r1, #64	; 0x40
 8001188:	2078      	movs	r0, #120	; 0x78
 800118a:	f000 f95f 	bl	800144c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	3301      	adds	r3, #1
 8001192:	71fb      	strb	r3, [r7, #7]
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	2b07      	cmp	r3, #7
 8001198:	d9de      	bls.n	8001158 <SSD1306_UpdateScreen+0xc>
	}
}
 800119a:	bf00      	nop
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200003ac 	.word	0x200003ac

080011a8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d101      	bne.n	80011bc <SSD1306_Fill+0x14>
 80011b8:	2300      	movs	r3, #0
 80011ba:	e000      	b.n	80011be <SSD1306_Fill+0x16>
 80011bc:	23ff      	movs	r3, #255	; 0xff
 80011be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011c2:	4619      	mov	r1, r3
 80011c4:	4803      	ldr	r0, [pc, #12]	; (80011d4 <SSD1306_Fill+0x2c>)
 80011c6:	f005 fac9 	bl	800675c <memset>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200003ac 	.word	0x200003ac

080011d8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	80fb      	strh	r3, [r7, #6]
 80011e2:	460b      	mov	r3, r1
 80011e4:	80bb      	strh	r3, [r7, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	70fb      	strb	r3, [r7, #3]
	if (
 80011ea:	88fb      	ldrh	r3, [r7, #6]
 80011ec:	2b7f      	cmp	r3, #127	; 0x7f
 80011ee:	d848      	bhi.n	8001282 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80011f0:	88bb      	ldrh	r3, [r7, #4]
 80011f2:	2b3f      	cmp	r3, #63	; 0x3f
 80011f4:	d845      	bhi.n	8001282 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80011f6:	4b26      	ldr	r3, [pc, #152]	; (8001290 <SSD1306_DrawPixel+0xb8>)
 80011f8:	791b      	ldrb	r3, [r3, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d006      	beq.n	800120c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	2b00      	cmp	r3, #0
 8001202:	bf0c      	ite	eq
 8001204:	2301      	moveq	r3, #1
 8001206:	2300      	movne	r3, #0
 8001208:	b2db      	uxtb	r3, r3
 800120a:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d11a      	bne.n	8001248 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001212:	88fa      	ldrh	r2, [r7, #6]
 8001214:	88bb      	ldrh	r3, [r7, #4]
 8001216:	08db      	lsrs	r3, r3, #3
 8001218:	b298      	uxth	r0, r3
 800121a:	4603      	mov	r3, r0
 800121c:	01db      	lsls	r3, r3, #7
 800121e:	4413      	add	r3, r2
 8001220:	4a1c      	ldr	r2, [pc, #112]	; (8001294 <SSD1306_DrawPixel+0xbc>)
 8001222:	5cd3      	ldrb	r3, [r2, r3]
 8001224:	b25a      	sxtb	r2, r3
 8001226:	88bb      	ldrh	r3, [r7, #4]
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	2101      	movs	r1, #1
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	b25b      	sxtb	r3, r3
 8001234:	4313      	orrs	r3, r2
 8001236:	b259      	sxtb	r1, r3
 8001238:	88fa      	ldrh	r2, [r7, #6]
 800123a:	4603      	mov	r3, r0
 800123c:	01db      	lsls	r3, r3, #7
 800123e:	4413      	add	r3, r2
 8001240:	b2c9      	uxtb	r1, r1
 8001242:	4a14      	ldr	r2, [pc, #80]	; (8001294 <SSD1306_DrawPixel+0xbc>)
 8001244:	54d1      	strb	r1, [r2, r3]
 8001246:	e01d      	b.n	8001284 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001248:	88fa      	ldrh	r2, [r7, #6]
 800124a:	88bb      	ldrh	r3, [r7, #4]
 800124c:	08db      	lsrs	r3, r3, #3
 800124e:	b298      	uxth	r0, r3
 8001250:	4603      	mov	r3, r0
 8001252:	01db      	lsls	r3, r3, #7
 8001254:	4413      	add	r3, r2
 8001256:	4a0f      	ldr	r2, [pc, #60]	; (8001294 <SSD1306_DrawPixel+0xbc>)
 8001258:	5cd3      	ldrb	r3, [r2, r3]
 800125a:	b25a      	sxtb	r2, r3
 800125c:	88bb      	ldrh	r3, [r7, #4]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	2101      	movs	r1, #1
 8001264:	fa01 f303 	lsl.w	r3, r1, r3
 8001268:	b25b      	sxtb	r3, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	b25b      	sxtb	r3, r3
 800126e:	4013      	ands	r3, r2
 8001270:	b259      	sxtb	r1, r3
 8001272:	88fa      	ldrh	r2, [r7, #6]
 8001274:	4603      	mov	r3, r0
 8001276:	01db      	lsls	r3, r3, #7
 8001278:	4413      	add	r3, r2
 800127a:	b2c9      	uxtb	r1, r1
 800127c:	4a05      	ldr	r2, [pc, #20]	; (8001294 <SSD1306_DrawPixel+0xbc>)
 800127e:	54d1      	strb	r1, [r2, r3]
 8001280:	e000      	b.n	8001284 <SSD1306_DrawPixel+0xac>
		return;
 8001282:	bf00      	nop
	}
}
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	200007ac 	.word	0x200007ac
 8001294:	200003ac 	.word	0x200003ac

08001298 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	460a      	mov	r2, r1
 80012a2:	80fb      	strh	r3, [r7, #6]
 80012a4:	4613      	mov	r3, r2
 80012a6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80012a8:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <SSD1306_GotoXY+0x28>)
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80012ae:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <SSD1306_GotoXY+0x28>)
 80012b0:	88bb      	ldrh	r3, [r7, #4]
 80012b2:	8053      	strh	r3, [r2, #2]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	200007ac 	.word	0x200007ac

080012c4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	71fb      	strb	r3, [r7, #7]
 80012d0:	4613      	mov	r3, r2
 80012d2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80012d4:	4b3a      	ldr	r3, [pc, #232]	; (80013c0 <SSD1306_Putc+0xfc>)
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	4413      	add	r3, r2
	if (
 80012e0:	2b7f      	cmp	r3, #127	; 0x7f
 80012e2:	dc07      	bgt.n	80012f4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80012e4:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <SSD1306_Putc+0xfc>)
 80012e6:	885b      	ldrh	r3, [r3, #2]
 80012e8:	461a      	mov	r2, r3
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	785b      	ldrb	r3, [r3, #1]
 80012ee:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80012f0:	2b3f      	cmp	r3, #63	; 0x3f
 80012f2:	dd01      	ble.n	80012f8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	e05e      	b.n	80013b6 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	e04b      	b.n	8001396 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	3b20      	subs	r3, #32
 8001306:	6839      	ldr	r1, [r7, #0]
 8001308:	7849      	ldrb	r1, [r1, #1]
 800130a:	fb01 f303 	mul.w	r3, r1, r3
 800130e:	4619      	mov	r1, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	440b      	add	r3, r1
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	e030      	b.n	8001384 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d010      	beq.n	8001354 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001332:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <SSD1306_Putc+0xfc>)
 8001334:	881a      	ldrh	r2, [r3, #0]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	b29b      	uxth	r3, r3
 800133a:	4413      	add	r3, r2
 800133c:	b298      	uxth	r0, r3
 800133e:	4b20      	ldr	r3, [pc, #128]	; (80013c0 <SSD1306_Putc+0xfc>)
 8001340:	885a      	ldrh	r2, [r3, #2]
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	b29b      	uxth	r3, r3
 8001346:	4413      	add	r3, r2
 8001348:	b29b      	uxth	r3, r3
 800134a:	79ba      	ldrb	r2, [r7, #6]
 800134c:	4619      	mov	r1, r3
 800134e:	f7ff ff43 	bl	80011d8 <SSD1306_DrawPixel>
 8001352:	e014      	b.n	800137e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001354:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <SSD1306_Putc+0xfc>)
 8001356:	881a      	ldrh	r2, [r3, #0]
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	b29b      	uxth	r3, r3
 800135c:	4413      	add	r3, r2
 800135e:	b298      	uxth	r0, r3
 8001360:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <SSD1306_Putc+0xfc>)
 8001362:	885a      	ldrh	r2, [r3, #2]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	b29b      	uxth	r3, r3
 8001368:	4413      	add	r3, r2
 800136a:	b299      	uxth	r1, r3
 800136c:	79bb      	ldrb	r3, [r7, #6]
 800136e:	2b00      	cmp	r3, #0
 8001370:	bf0c      	ite	eq
 8001372:	2301      	moveq	r3, #1
 8001374:	2300      	movne	r3, #0
 8001376:	b2db      	uxtb	r3, r3
 8001378:	461a      	mov	r2, r3
 800137a:	f7ff ff2d 	bl	80011d8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	3301      	adds	r3, #1
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4293      	cmp	r3, r2
 800138e:	d3c8      	bcc.n	8001322 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	3301      	adds	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	785b      	ldrb	r3, [r3, #1]
 800139a:	461a      	mov	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	4293      	cmp	r3, r2
 80013a0:	d3ad      	bcc.n	80012fe <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <SSD1306_Putc+0xfc>)
 80013a4:	881a      	ldrh	r2, [r3, #0]
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	4413      	add	r3, r2
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <SSD1306_Putc+0xfc>)
 80013b2:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80013b4:	79fb      	ldrb	r3, [r7, #7]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200007ac 	.word	0x200007ac

080013c4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	4613      	mov	r3, r2
 80013d0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80013d2:	e012      	b.n	80013fa <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	79fa      	ldrb	r2, [r7, #7]
 80013da:	68b9      	ldr	r1, [r7, #8]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff71 	bl	80012c4 <SSD1306_Putc>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461a      	mov	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d002      	beq.n	80013f4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	e008      	b.n	8001406 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	3301      	adds	r3, #1
 80013f8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1e8      	bne.n	80013d4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	781b      	ldrb	r3, [r3, #0]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001412:	2000      	movs	r0, #0
 8001414:	f7ff fec8 	bl	80011a8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001418:	f7ff fe98 	bl	800114c <SSD1306_UpdateScreen>
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}

08001420 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <ssd1306_I2C_Init+0x28>)
 8001428:	607b      	str	r3, [r7, #4]
	while(p>0)
 800142a:	e002      	b.n	8001432 <ssd1306_I2C_Init+0x12>
		p--;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1f9      	bne.n	800142c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	0003d090 	.word	0x0003d090

0800144c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b0c7      	sub	sp, #284	; 0x11c
 8001450:	af02      	add	r7, sp, #8
 8001452:	4604      	mov	r4, r0
 8001454:	4608      	mov	r0, r1
 8001456:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800145a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800145e:	600a      	str	r2, [r1, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001466:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800146a:	4622      	mov	r2, r4
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001472:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001476:	4602      	mov	r2, r0
 8001478:	701a      	strb	r2, [r3, #0]
 800147a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800147e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001482:	460a      	mov	r2, r1
 8001484:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001486:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800148a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800148e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001492:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001496:	7812      	ldrb	r2, [r2, #0]
 8001498:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800149a:	2300      	movs	r3, #0
 800149c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80014a0:	e015      	b.n	80014ce <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80014a2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80014a6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80014aa:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80014ae:	6812      	ldr	r2, [r2, #0]
 80014b0:	441a      	add	r2, r3
 80014b2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80014b6:	3301      	adds	r3, #1
 80014b8:	7811      	ldrb	r1, [r2, #0]
 80014ba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80014be:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80014c2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80014c4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80014c8:	3301      	adds	r3, #1
 80014ca:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80014ce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80014d8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80014dc:	8812      	ldrh	r2, [r2, #0]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d8df      	bhi.n	80014a2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80014e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014e6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	b299      	uxth	r1, r3
 80014ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	3301      	adds	r3, #1
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	f107 020c 	add.w	r2, r7, #12
 8001500:	200a      	movs	r0, #10
 8001502:	9000      	str	r0, [sp, #0]
 8001504:	4803      	ldr	r0, [pc, #12]	; (8001514 <ssd1306_I2C_WriteMulti+0xc8>)
 8001506:	f000 fec9 	bl	800229c <HAL_I2C_Master_Transmit>
}
 800150a:	bf00      	nop
 800150c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001510:	46bd      	mov	sp, r7
 8001512:	bd90      	pop	{r4, r7, pc}
 8001514:	200002ec 	.word	0x200002ec

08001518 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af02      	add	r7, sp, #8
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
 8001522:	460b      	mov	r3, r1
 8001524:	71bb      	strb	r3, [r7, #6]
 8001526:	4613      	mov	r3, r2
 8001528:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800152a:	79bb      	ldrb	r3, [r7, #6]
 800152c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800152e:	797b      	ldrb	r3, [r7, #5]
 8001530:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	b299      	uxth	r1, r3
 8001536:	f107 020c 	add.w	r2, r7, #12
 800153a:	230a      	movs	r3, #10
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	2302      	movs	r3, #2
 8001540:	4803      	ldr	r0, [pc, #12]	; (8001550 <ssd1306_I2C_Write+0x38>)
 8001542:	f000 feab 	bl	800229c <HAL_I2C_Master_Transmit>
}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200002ec 	.word	0x200002ec

08001554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_MspInit+0x54>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	4a11      	ldr	r2, [pc, #68]	; (80015a8 <HAL_MspInit+0x54>)
 8001564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001568:	6453      	str	r3, [r2, #68]	; 0x44
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <HAL_MspInit+0x54>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	603b      	str	r3, [r7, #0]
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_MspInit+0x54>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <HAL_MspInit+0x54>)
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001584:	6413      	str	r3, [r2, #64]	; 0x40
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <HAL_MspInit+0x54>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	210f      	movs	r1, #15
 8001596:	f06f 0001 	mvn.w	r0, #1
 800159a:	f000 fb31 	bl	8001c00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800

080015ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	; 0x28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a19      	ldr	r2, [pc, #100]	; (8001630 <HAL_I2C_MspInit+0x84>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d12c      	bne.n	8001628 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	4b18      	ldr	r3, [pc, #96]	; (8001634 <HAL_I2C_MspInit+0x88>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a17      	ldr	r2, [pc, #92]	; (8001634 <HAL_I2C_MspInit+0x88>)
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <HAL_I2C_MspInit+0x88>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80015ea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80015ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f0:	2312      	movs	r3, #18
 80015f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f8:	2303      	movs	r3, #3
 80015fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015fc:	2304      	movs	r3, #4
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	4619      	mov	r1, r3
 8001606:	480c      	ldr	r0, [pc, #48]	; (8001638 <HAL_I2C_MspInit+0x8c>)
 8001608:	f000 fb24 	bl	8001c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_I2C_MspInit+0x88>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	4a07      	ldr	r2, [pc, #28]	; (8001634 <HAL_I2C_MspInit+0x88>)
 8001616:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800161a:	6413      	str	r3, [r2, #64]	; 0x40
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_I2C_MspInit+0x88>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001628:	bf00      	nop
 800162a:	3728      	adds	r7, #40	; 0x28
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40005400 	.word	0x40005400
 8001634:	40023800 	.word	0x40023800
 8001638:	40020400 	.word	0x40020400

0800163c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a19      	ldr	r2, [pc, #100]	; (80016c0 <HAL_UART_MspInit+0x84>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d12b      	bne.n	80016b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <HAL_UART_MspInit+0x88>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a17      	ldr	r2, [pc, #92]	; (80016c4 <HAL_UART_MspInit+0x88>)
 8001668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_UART_MspInit+0x88>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <HAL_UART_MspInit+0x88>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a10      	ldr	r2, [pc, #64]	; (80016c4 <HAL_UART_MspInit+0x88>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <HAL_UART_MspInit+0x88>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001696:	230c      	movs	r3, #12
 8001698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016a6:	2307      	movs	r3, #7
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <HAL_UART_MspInit+0x8c>)
 80016b2:	f000 facf 	bl	8001c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016b6:	bf00      	nop
 80016b8:	3728      	adds	r7, #40	; 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40004400 	.word	0x40004400
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020000 	.word	0x40020000

080016cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08e      	sub	sp, #56	; 0x38
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	4b33      	ldr	r3, [pc, #204]	; (80017b0 <HAL_InitTick+0xe4>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	4a32      	ldr	r2, [pc, #200]	; (80017b0 <HAL_InitTick+0xe4>)
 80016e6:	f043 0310 	orr.w	r3, r3, #16
 80016ea:	6413      	str	r3, [r2, #64]	; 0x40
 80016ec:	4b30      	ldr	r3, [pc, #192]	; (80017b0 <HAL_InitTick+0xe4>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	f003 0310 	and.w	r3, r3, #16
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016f8:	f107 0210 	add.w	r2, r7, #16
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4611      	mov	r1, r2
 8001702:	4618      	mov	r0, r3
 8001704:	f001 fb6c 	bl	8002de0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001708:	6a3b      	ldr	r3, [r7, #32]
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800170c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170e:	2b00      	cmp	r3, #0
 8001710:	d103      	bne.n	800171a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001712:	f001 fb3d 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 8001716:	6378      	str	r0, [r7, #52]	; 0x34
 8001718:	e004      	b.n	8001724 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800171a:	f001 fb39 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 800171e:	4603      	mov	r3, r0
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001726:	4a23      	ldr	r2, [pc, #140]	; (80017b4 <HAL_InitTick+0xe8>)
 8001728:	fba2 2303 	umull	r2, r3, r2, r3
 800172c:	0c9b      	lsrs	r3, r3, #18
 800172e:	3b01      	subs	r3, #1
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001732:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <HAL_InitTick+0xec>)
 8001734:	4a21      	ldr	r2, [pc, #132]	; (80017bc <HAL_InitTick+0xf0>)
 8001736:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001738:	4b1f      	ldr	r3, [pc, #124]	; (80017b8 <HAL_InitTick+0xec>)
 800173a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800173e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001740:	4a1d      	ldr	r2, [pc, #116]	; (80017b8 <HAL_InitTick+0xec>)
 8001742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001744:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001746:	4b1c      	ldr	r3, [pc, #112]	; (80017b8 <HAL_InitTick+0xec>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174c:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <HAL_InitTick+0xec>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001752:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <HAL_InitTick+0xec>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001758:	4817      	ldr	r0, [pc, #92]	; (80017b8 <HAL_InitTick+0xec>)
 800175a:	f002 f841 	bl	80037e0 <HAL_TIM_Base_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001764:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001768:	2b00      	cmp	r3, #0
 800176a:	d11b      	bne.n	80017a4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800176c:	4812      	ldr	r0, [pc, #72]	; (80017b8 <HAL_InitTick+0xec>)
 800176e:	f002 f891 	bl	8003894 <HAL_TIM_Base_Start_IT>
 8001772:	4603      	mov	r3, r0
 8001774:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001778:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800177c:	2b00      	cmp	r3, #0
 800177e:	d111      	bne.n	80017a4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001780:	2036      	movs	r0, #54	; 0x36
 8001782:	f000 fa59 	bl	8001c38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b0f      	cmp	r3, #15
 800178a:	d808      	bhi.n	800179e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800178c:	2200      	movs	r2, #0
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	2036      	movs	r0, #54	; 0x36
 8001792:	f000 fa35 	bl	8001c00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001796:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <HAL_InitTick+0xf4>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	e002      	b.n	80017a4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80017a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3738      	adds	r7, #56	; 0x38
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40023800 	.word	0x40023800
 80017b4:	431bde83 	.word	0x431bde83
 80017b8:	200007b4 	.word	0x200007b4
 80017bc:	40001000 	.word	0x40001000
 80017c0:	20000010 	.word	0x20000010

080017c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017c8:	e7fe      	b.n	80017c8 <NMI_Handler+0x4>

080017ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <HardFault_Handler+0x4>

080017d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <MemManage_Handler+0x4>

080017d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <BusFault_Handler+0x4>

080017dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <UsageFault_Handler+0x4>

080017e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <TIM6_DAC_IRQHandler+0x10>)
 80017f6:	f002 f8bd 	bl	8003974 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200007b4 	.word	0x200007b4

08001804 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	e00a      	b.n	800182c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001816:	f3af 8000 	nop.w
 800181a:	4601      	mov	r1, r0
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	60ba      	str	r2, [r7, #8]
 8001822:	b2ca      	uxtb	r2, r1
 8001824:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	3301      	adds	r3, #1
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	429a      	cmp	r2, r3
 8001832:	dbf0      	blt.n	8001816 <_read+0x12>
  }

  return len;
 8001834:	687b      	ldr	r3, [r7, #4]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b086      	sub	sp, #24
 8001842:	af00      	add	r7, sp, #0
 8001844:	60f8      	str	r0, [r7, #12]
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	e009      	b.n	8001864 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	1c5a      	adds	r2, r3, #1
 8001854:	60ba      	str	r2, [r7, #8]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3301      	adds	r3, #1
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	429a      	cmp	r2, r3
 800186a:	dbf1      	blt.n	8001850 <_write+0x12>
  }
  return len;
 800186c:	687b      	ldr	r3, [r7, #4]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <_close>:

int _close(int file)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800189e:	605a      	str	r2, [r3, #4]
  return 0;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <_isatty>:

int _isatty(int file)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018b6:	2301      	movs	r3, #1
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e8:	4a14      	ldr	r2, [pc, #80]	; (800193c <_sbrk+0x5c>)
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <_sbrk+0x60>)
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d102      	bne.n	8001902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <_sbrk+0x64>)
 80018fe:	4a12      	ldr	r2, [pc, #72]	; (8001948 <_sbrk+0x68>)
 8001900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	429a      	cmp	r2, r3
 800190e:	d207      	bcs.n	8001920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001910:	f004 ff98 	bl	8006844 <__errno>
 8001914:	4603      	mov	r3, r0
 8001916:	220c      	movs	r2, #12
 8001918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
 800191e:	e009      	b.n	8001934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <_sbrk+0x64>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001926:	4b07      	ldr	r3, [pc, #28]	; (8001944 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <_sbrk+0x64>)
 8001930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001932:	68fb      	ldr	r3, [r7, #12]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20020000 	.word	0x20020000
 8001940:	00000400 	.word	0x00000400
 8001944:	200007fc 	.word	0x200007fc
 8001948:	200046a8 	.word	0x200046a8

0800194c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <SystemInit+0x20>)
 8001952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <SystemInit+0x20>)
 8001958:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800195c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001974:	f7ff ffea 	bl	800194c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001978:	480c      	ldr	r0, [pc, #48]	; (80019ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800197a:	490d      	ldr	r1, [pc, #52]	; (80019b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800197c:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001980:	e002      	b.n	8001988 <LoopCopyDataInit>

08001982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001986:	3304      	adds	r3, #4

08001988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800198c:	d3f9      	bcc.n	8001982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001990:	4c0a      	ldr	r4, [pc, #40]	; (80019bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001994:	e001      	b.n	800199a <LoopFillZerobss>

08001996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001998:	3204      	adds	r2, #4

0800199a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800199c:	d3fb      	bcc.n	8001996 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800199e:	f004 ff57 	bl	8006850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019a2:	f7fe ffd1 	bl	8000948 <main>
  bx  lr    
 80019a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80019b4:	08008198 	.word	0x08008198
  ldr r2, =_sbss
 80019b8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80019bc:	200046a4 	.word	0x200046a4

080019c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c0:	e7fe      	b.n	80019c0 <ADC_IRQHandler>
	...

080019c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <HAL_Init+0x40>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0d      	ldr	r2, [pc, #52]	; (8001a04 <HAL_Init+0x40>)
 80019ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_Init+0x40>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <HAL_Init+0x40>)
 80019da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <HAL_Init+0x40>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a07      	ldr	r2, [pc, #28]	; (8001a04 <HAL_Init+0x40>)
 80019e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ec:	2003      	movs	r0, #3
 80019ee:	f000 f8fc 	bl	8001bea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019f2:	2000      	movs	r0, #0
 80019f4:	f7ff fe6a 	bl	80016cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f8:	f7ff fdac 	bl	8001554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40023c00 	.word	0x40023c00

08001a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_IncTick+0x20>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_IncTick+0x24>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4413      	add	r3, r2
 8001a18:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <HAL_IncTick+0x24>)
 8001a1a:	6013      	str	r3, [r2, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000014 	.word	0x20000014
 8001a2c:	20000800 	.word	0x20000800

08001a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return uwTick;
 8001a34:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <HAL_GetTick+0x14>)
 8001a36:	681b      	ldr	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000800 	.word	0x20000800

08001a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a50:	f7ff ffee 	bl	8001a30 <HAL_GetTick>
 8001a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a60:	d005      	beq.n	8001a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_Delay+0x44>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a6e:	bf00      	nop
 8001a70:	f7ff ffde 	bl	8001a30 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d8f7      	bhi.n	8001a70 <HAL_Delay+0x28>
  {
  }
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000014 	.word	0x20000014

08001a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aac:	4013      	ands	r3, r2
 8001aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac2:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	60d3      	str	r3, [r2, #12]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	0a1b      	lsrs	r3, r3, #8
 8001ae2:	f003 0307 	and.w	r3, r3, #7
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	db0b      	blt.n	8001b1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	f003 021f 	and.w	r2, r3, #31
 8001b0c:	4907      	ldr	r1, [pc, #28]	; (8001b2c <__NVIC_EnableIRQ+0x38>)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	095b      	lsrs	r3, r3, #5
 8001b14:	2001      	movs	r0, #1
 8001b16:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000e100 	.word	0xe000e100

08001b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	db0a      	blt.n	8001b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	490c      	ldr	r1, [pc, #48]	; (8001b7c <__NVIC_SetPriority+0x4c>)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	0112      	lsls	r2, r2, #4
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	440b      	add	r3, r1
 8001b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b58:	e00a      	b.n	8001b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4908      	ldr	r1, [pc, #32]	; (8001b80 <__NVIC_SetPriority+0x50>)
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	3b04      	subs	r3, #4
 8001b68:	0112      	lsls	r2, r2, #4
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	761a      	strb	r2, [r3, #24]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000e100 	.word	0xe000e100
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b089      	sub	sp, #36	; 0x24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f1c3 0307 	rsb	r3, r3, #7
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	bf28      	it	cs
 8001ba2:	2304      	movcs	r3, #4
 8001ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d902      	bls.n	8001bb4 <NVIC_EncodePriority+0x30>
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3b03      	subs	r3, #3
 8001bb2:	e000      	b.n	8001bb6 <NVIC_EncodePriority+0x32>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd6:	43d9      	mvns	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	4313      	orrs	r3, r2
         );
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3724      	adds	r7, #36	; 0x24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ff4c 	bl	8001a90 <__NVIC_SetPriorityGrouping>
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
 8001c0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c12:	f7ff ff61 	bl	8001ad8 <__NVIC_GetPriorityGrouping>
 8001c16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	68b9      	ldr	r1, [r7, #8]
 8001c1c:	6978      	ldr	r0, [r7, #20]
 8001c1e:	f7ff ffb1 	bl	8001b84 <NVIC_EncodePriority>
 8001c22:	4602      	mov	r2, r0
 8001c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff ff80 	bl	8001b30 <__NVIC_SetPriority>
}
 8001c30:	bf00      	nop
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ff54 	bl	8001af4 <__NVIC_EnableIRQ>
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b089      	sub	sp, #36	; 0x24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	e165      	b.n	8001f3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c70:	2201      	movs	r2, #1
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	f040 8154 	bne.w	8001f36 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d005      	beq.n	8001ca6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d130      	bne.n	8001d08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cdc:	2201      	movs	r2, #1
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	091b      	lsrs	r3, r3, #4
 8001cf2:	f003 0201 	and.w	r2, r3, #1
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d017      	beq.n	8001d44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	2203      	movs	r2, #3
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d123      	bne.n	8001d98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	08da      	lsrs	r2, r3, #3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3208      	adds	r2, #8
 8001d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	220f      	movs	r2, #15
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	08da      	lsrs	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3208      	adds	r2, #8
 8001d92:	69b9      	ldr	r1, [r7, #24]
 8001d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0203 	and.w	r2, r3, #3
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80ae 	beq.w	8001f36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b5d      	ldr	r3, [pc, #372]	; (8001f54 <HAL_GPIO_Init+0x300>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	4a5c      	ldr	r2, [pc, #368]	; (8001f54 <HAL_GPIO_Init+0x300>)
 8001de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dea:	4b5a      	ldr	r3, [pc, #360]	; (8001f54 <HAL_GPIO_Init+0x300>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001df6:	4a58      	ldr	r2, [pc, #352]	; (8001f58 <HAL_GPIO_Init+0x304>)
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	3302      	adds	r3, #2
 8001dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	220f      	movs	r2, #15
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4f      	ldr	r2, [pc, #316]	; (8001f5c <HAL_GPIO_Init+0x308>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d025      	beq.n	8001e6e <HAL_GPIO_Init+0x21a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a4e      	ldr	r2, [pc, #312]	; (8001f60 <HAL_GPIO_Init+0x30c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d01f      	beq.n	8001e6a <HAL_GPIO_Init+0x216>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a4d      	ldr	r2, [pc, #308]	; (8001f64 <HAL_GPIO_Init+0x310>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d019      	beq.n	8001e66 <HAL_GPIO_Init+0x212>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4c      	ldr	r2, [pc, #304]	; (8001f68 <HAL_GPIO_Init+0x314>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d013      	beq.n	8001e62 <HAL_GPIO_Init+0x20e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4b      	ldr	r2, [pc, #300]	; (8001f6c <HAL_GPIO_Init+0x318>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d00d      	beq.n	8001e5e <HAL_GPIO_Init+0x20a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4a      	ldr	r2, [pc, #296]	; (8001f70 <HAL_GPIO_Init+0x31c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d007      	beq.n	8001e5a <HAL_GPIO_Init+0x206>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a49      	ldr	r2, [pc, #292]	; (8001f74 <HAL_GPIO_Init+0x320>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d101      	bne.n	8001e56 <HAL_GPIO_Init+0x202>
 8001e52:	2306      	movs	r3, #6
 8001e54:	e00c      	b.n	8001e70 <HAL_GPIO_Init+0x21c>
 8001e56:	2307      	movs	r3, #7
 8001e58:	e00a      	b.n	8001e70 <HAL_GPIO_Init+0x21c>
 8001e5a:	2305      	movs	r3, #5
 8001e5c:	e008      	b.n	8001e70 <HAL_GPIO_Init+0x21c>
 8001e5e:	2304      	movs	r3, #4
 8001e60:	e006      	b.n	8001e70 <HAL_GPIO_Init+0x21c>
 8001e62:	2303      	movs	r3, #3
 8001e64:	e004      	b.n	8001e70 <HAL_GPIO_Init+0x21c>
 8001e66:	2302      	movs	r3, #2
 8001e68:	e002      	b.n	8001e70 <HAL_GPIO_Init+0x21c>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <HAL_GPIO_Init+0x21c>
 8001e6e:	2300      	movs	r3, #0
 8001e70:	69fa      	ldr	r2, [r7, #28]
 8001e72:	f002 0203 	and.w	r2, r2, #3
 8001e76:	0092      	lsls	r2, r2, #2
 8001e78:	4093      	lsls	r3, r2
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e80:	4935      	ldr	r1, [pc, #212]	; (8001f58 <HAL_GPIO_Init+0x304>)
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	089b      	lsrs	r3, r3, #2
 8001e86:	3302      	adds	r3, #2
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e8e:	4b3a      	ldr	r3, [pc, #232]	; (8001f78 <HAL_GPIO_Init+0x324>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eb2:	4a31      	ldr	r2, [pc, #196]	; (8001f78 <HAL_GPIO_Init+0x324>)
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eb8:	4b2f      	ldr	r3, [pc, #188]	; (8001f78 <HAL_GPIO_Init+0x324>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001edc:	4a26      	ldr	r2, [pc, #152]	; (8001f78 <HAL_GPIO_Init+0x324>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_GPIO_Init+0x324>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	43db      	mvns	r3, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f06:	4a1c      	ldr	r2, [pc, #112]	; (8001f78 <HAL_GPIO_Init+0x324>)
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f0c:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <HAL_GPIO_Init+0x324>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f30:	4a11      	ldr	r2, [pc, #68]	; (8001f78 <HAL_GPIO_Init+0x324>)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	61fb      	str	r3, [r7, #28]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	2b0f      	cmp	r3, #15
 8001f40:	f67f ae96 	bls.w	8001c70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	3724      	adds	r7, #36	; 0x24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40013800 	.word	0x40013800
 8001f5c:	40020000 	.word	0x40020000
 8001f60:	40020400 	.word	0x40020400
 8001f64:	40020800 	.word	0x40020800
 8001f68:	40020c00 	.word	0x40020c00
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40021400 	.word	0x40021400
 8001f74:	40021800 	.word	0x40021800
 8001f78:	40013c00 	.word	0x40013c00

08001f7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	887b      	ldrh	r3, [r7, #2]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f94:	2301      	movs	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
 8001f98:	e001      	b.n	8001f9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	807b      	strh	r3, [r7, #2]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fbc:	787b      	ldrb	r3, [r7, #1]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fc2:	887a      	ldrh	r2, [r7, #2]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fc8:	e003      	b.n	8001fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fca:	887b      	ldrh	r3, [r7, #2]
 8001fcc:	041a      	lsls	r2, r3, #16
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	619a      	str	r2, [r3, #24]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b085      	sub	sp, #20
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ff0:	887a      	ldrh	r2, [r7, #2]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	041a      	lsls	r2, r3, #16
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	43d9      	mvns	r1, r3
 8001ffc:	887b      	ldrh	r3, [r7, #2]
 8001ffe:	400b      	ands	r3, r1
 8002000:	431a      	orrs	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	619a      	str	r2, [r3, #24]
}
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e12b      	b.n	800227e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d106      	bne.n	8002040 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff fab6 	bl	80015ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2224      	movs	r2, #36	; 0x24
 8002044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0201 	bic.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002066:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002076:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002078:	f000 fe8a 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 800207c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4a81      	ldr	r2, [pc, #516]	; (8002288 <HAL_I2C_Init+0x274>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d807      	bhi.n	8002098 <HAL_I2C_Init+0x84>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4a80      	ldr	r2, [pc, #512]	; (800228c <HAL_I2C_Init+0x278>)
 800208c:	4293      	cmp	r3, r2
 800208e:	bf94      	ite	ls
 8002090:	2301      	movls	r3, #1
 8002092:	2300      	movhi	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	e006      	b.n	80020a6 <HAL_I2C_Init+0x92>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4a7d      	ldr	r2, [pc, #500]	; (8002290 <HAL_I2C_Init+0x27c>)
 800209c:	4293      	cmp	r3, r2
 800209e:	bf94      	ite	ls
 80020a0:	2301      	movls	r3, #1
 80020a2:	2300      	movhi	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0e7      	b.n	800227e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4a78      	ldr	r2, [pc, #480]	; (8002294 <HAL_I2C_Init+0x280>)
 80020b2:	fba2 2303 	umull	r2, r3, r2, r3
 80020b6:	0c9b      	lsrs	r3, r3, #18
 80020b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	4a6a      	ldr	r2, [pc, #424]	; (8002288 <HAL_I2C_Init+0x274>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d802      	bhi.n	80020e8 <HAL_I2C_Init+0xd4>
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	3301      	adds	r3, #1
 80020e6:	e009      	b.n	80020fc <HAL_I2C_Init+0xe8>
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020ee:	fb02 f303 	mul.w	r3, r2, r3
 80020f2:	4a69      	ldr	r2, [pc, #420]	; (8002298 <HAL_I2C_Init+0x284>)
 80020f4:	fba2 2303 	umull	r2, r3, r2, r3
 80020f8:	099b      	lsrs	r3, r3, #6
 80020fa:	3301      	adds	r3, #1
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	430b      	orrs	r3, r1
 8002102:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800210e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	495c      	ldr	r1, [pc, #368]	; (8002288 <HAL_I2C_Init+0x274>)
 8002118:	428b      	cmp	r3, r1
 800211a:	d819      	bhi.n	8002150 <HAL_I2C_Init+0x13c>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	1e59      	subs	r1, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	fbb1 f3f3 	udiv	r3, r1, r3
 800212a:	1c59      	adds	r1, r3, #1
 800212c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002130:	400b      	ands	r3, r1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <HAL_I2C_Init+0x138>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1e59      	subs	r1, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	fbb1 f3f3 	udiv	r3, r1, r3
 8002144:	3301      	adds	r3, #1
 8002146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800214a:	e051      	b.n	80021f0 <HAL_I2C_Init+0x1dc>
 800214c:	2304      	movs	r3, #4
 800214e:	e04f      	b.n	80021f0 <HAL_I2C_Init+0x1dc>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d111      	bne.n	800217c <HAL_I2C_Init+0x168>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1e58      	subs	r0, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6859      	ldr	r1, [r3, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	440b      	add	r3, r1
 8002166:	fbb0 f3f3 	udiv	r3, r0, r3
 800216a:	3301      	adds	r3, #1
 800216c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002170:	2b00      	cmp	r3, #0
 8002172:	bf0c      	ite	eq
 8002174:	2301      	moveq	r3, #1
 8002176:	2300      	movne	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	e012      	b.n	80021a2 <HAL_I2C_Init+0x18e>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1e58      	subs	r0, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6859      	ldr	r1, [r3, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	0099      	lsls	r1, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002192:	3301      	adds	r3, #1
 8002194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002198:	2b00      	cmp	r3, #0
 800219a:	bf0c      	ite	eq
 800219c:	2301      	moveq	r3, #1
 800219e:	2300      	movne	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_I2C_Init+0x196>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e022      	b.n	80021f0 <HAL_I2C_Init+0x1dc>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10e      	bne.n	80021d0 <HAL_I2C_Init+0x1bc>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1e58      	subs	r0, r3, #1
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6859      	ldr	r1, [r3, #4]
 80021ba:	460b      	mov	r3, r1
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	440b      	add	r3, r1
 80021c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c4:	3301      	adds	r3, #1
 80021c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ce:	e00f      	b.n	80021f0 <HAL_I2C_Init+0x1dc>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1e58      	subs	r0, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	0099      	lsls	r1, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e6:	3301      	adds	r3, #1
 80021e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	6809      	ldr	r1, [r1, #0]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69da      	ldr	r2, [r3, #28]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800221e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6911      	ldr	r1, [r2, #16]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68d2      	ldr	r2, [r2, #12]
 800222a:	4311      	orrs	r1, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	430b      	orrs	r3, r1
 8002232:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695a      	ldr	r2, [r3, #20]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0201 	orr.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	000186a0 	.word	0x000186a0
 800228c:	001e847f 	.word	0x001e847f
 8002290:	003d08ff 	.word	0x003d08ff
 8002294:	431bde83 	.word	0x431bde83
 8002298:	10624dd3 	.word	0x10624dd3

0800229c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	461a      	mov	r2, r3
 80022a8:	460b      	mov	r3, r1
 80022aa:	817b      	strh	r3, [r7, #10]
 80022ac:	4613      	mov	r3, r2
 80022ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022b0:	f7ff fbbe 	bl	8001a30 <HAL_GetTick>
 80022b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b20      	cmp	r3, #32
 80022c0:	f040 80e0 	bne.w	8002484 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	2319      	movs	r3, #25
 80022ca:	2201      	movs	r2, #1
 80022cc:	4970      	ldr	r1, [pc, #448]	; (8002490 <HAL_I2C_Master_Transmit+0x1f4>)
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 fa92 	bl	80027f8 <I2C_WaitOnFlagUntilTimeout>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022da:	2302      	movs	r3, #2
 80022dc:	e0d3      	b.n	8002486 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_I2C_Master_Transmit+0x50>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e0cc      	b.n	8002486 <HAL_I2C_Master_Transmit+0x1ea>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d007      	beq.n	8002312 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f042 0201 	orr.w	r2, r2, #1
 8002310:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002320:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2221      	movs	r2, #33	; 0x21
 8002326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2210      	movs	r2, #16
 800232e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	893a      	ldrh	r2, [r7, #8]
 8002342:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4a50      	ldr	r2, [pc, #320]	; (8002494 <HAL_I2C_Master_Transmit+0x1f8>)
 8002352:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002354:	8979      	ldrh	r1, [r7, #10]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	6a3a      	ldr	r2, [r7, #32]
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 f9ca 	bl	80026f4 <I2C_MasterRequestWrite>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e08d      	b.n	8002486 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002380:	e066      	b.n	8002450 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	6a39      	ldr	r1, [r7, #32]
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 fb50 	bl	8002a2c <I2C_WaitOnTXEFlagUntilTimeout>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00d      	beq.n	80023ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	2b04      	cmp	r3, #4
 8002398:	d107      	bne.n	80023aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e06b      	b.n	8002486 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	781a      	ldrb	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d6:	3b01      	subs	r3, #1
 80023d8:	b29a      	uxth	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d11b      	bne.n	8002424 <HAL_I2C_Master_Transmit+0x188>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d017      	beq.n	8002424 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	781a      	ldrb	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240e:	b29b      	uxth	r3, r3
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241c:	3b01      	subs	r3, #1
 800241e:	b29a      	uxth	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	6a39      	ldr	r1, [r7, #32]
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 fb47 	bl	8002abc <I2C_WaitOnBTFFlagUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00d      	beq.n	8002450 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	2b04      	cmp	r3, #4
 800243a:	d107      	bne.n	800244c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800244a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e01a      	b.n	8002486 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	2b00      	cmp	r3, #0
 8002456:	d194      	bne.n	8002382 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002466:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	e000      	b.n	8002486 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002484:	2302      	movs	r3, #2
  }
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	00100002 	.word	0x00100002
 8002494:	ffff0000 	.word	0xffff0000

08002498 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08a      	sub	sp, #40	; 0x28
 800249c:	af02      	add	r7, sp, #8
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	607a      	str	r2, [r7, #4]
 80024a2:	603b      	str	r3, [r7, #0]
 80024a4:	460b      	mov	r3, r1
 80024a6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80024a8:	f7ff fac2 	bl	8001a30 <HAL_GetTick>
 80024ac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b20      	cmp	r3, #32
 80024bc:	f040 8111 	bne.w	80026e2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	2319      	movs	r3, #25
 80024c6:	2201      	movs	r2, #1
 80024c8:	4988      	ldr	r1, [pc, #544]	; (80026ec <HAL_I2C_IsDeviceReady+0x254>)
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 f994 	bl	80027f8 <I2C_WaitOnFlagUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80024d6:	2302      	movs	r3, #2
 80024d8:	e104      	b.n	80026e4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_I2C_IsDeviceReady+0x50>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e0fd      	b.n	80026e4 <HAL_I2C_IsDeviceReady+0x24c>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d007      	beq.n	800250e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 0201 	orr.w	r2, r2, #1
 800250c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800251c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2224      	movs	r2, #36	; 0x24
 8002522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4a70      	ldr	r2, [pc, #448]	; (80026f0 <HAL_I2C_IsDeviceReady+0x258>)
 8002530:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002540:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2200      	movs	r2, #0
 800254a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 f952 	bl	80027f8 <I2C_WaitOnFlagUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00d      	beq.n	8002576 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002568:	d103      	bne.n	8002572 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002570:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e0b6      	b.n	80026e4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002576:	897b      	ldrh	r3, [r7, #10]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	461a      	mov	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002584:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002586:	f7ff fa53 	bl	8001a30 <HAL_GetTick>
 800258a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b02      	cmp	r3, #2
 8002598:	bf0c      	ite	eq
 800259a:	2301      	moveq	r3, #1
 800259c:	2300      	movne	r3, #0
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b0:	bf0c      	ite	eq
 80025b2:	2301      	moveq	r3, #1
 80025b4:	2300      	movne	r3, #0
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80025ba:	e025      	b.n	8002608 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025bc:	f7ff fa38 	bl	8001a30 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d302      	bcc.n	80025d2 <HAL_I2C_IsDeviceReady+0x13a>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d103      	bne.n	80025da <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	22a0      	movs	r2, #160	; 0xa0
 80025d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	bf0c      	ite	eq
 80025e8:	2301      	moveq	r3, #1
 80025ea:	2300      	movne	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025fe:	bf0c      	ite	eq
 8002600:	2301      	moveq	r3, #1
 8002602:	2300      	movne	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2ba0      	cmp	r3, #160	; 0xa0
 8002612:	d005      	beq.n	8002620 <HAL_I2C_IsDeviceReady+0x188>
 8002614:	7dfb      	ldrb	r3, [r7, #23]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d102      	bne.n	8002620 <HAL_I2C_IsDeviceReady+0x188>
 800261a:	7dbb      	ldrb	r3, [r7, #22]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0cd      	beq.n	80025bc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b02      	cmp	r3, #2
 8002634:	d129      	bne.n	800268a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002644:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	2319      	movs	r3, #25
 8002662:	2201      	movs	r2, #1
 8002664:	4921      	ldr	r1, [pc, #132]	; (80026ec <HAL_I2C_IsDeviceReady+0x254>)
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 f8c6 	bl	80027f8 <I2C_WaitOnFlagUntilTimeout>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e036      	b.n	80026e4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2220      	movs	r2, #32
 800267a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	e02c      	b.n	80026e4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002698:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026a2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	2319      	movs	r3, #25
 80026aa:	2201      	movs	r2, #1
 80026ac:	490f      	ldr	r1, [pc, #60]	; (80026ec <HAL_I2C_IsDeviceReady+0x254>)
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f8a2 	bl	80027f8 <I2C_WaitOnFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e012      	b.n	80026e4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	3301      	adds	r3, #1
 80026c2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	f4ff af32 	bcc.w	8002532 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80026e2:	2302      	movs	r3, #2
  }
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3720      	adds	r7, #32
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	00100002 	.word	0x00100002
 80026f0:	ffff0000 	.word	0xffff0000

080026f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af02      	add	r7, sp, #8
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	607a      	str	r2, [r7, #4]
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	460b      	mov	r3, r1
 8002702:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2b08      	cmp	r3, #8
 800270e:	d006      	beq.n	800271e <I2C_MasterRequestWrite+0x2a>
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d003      	beq.n	800271e <I2C_MasterRequestWrite+0x2a>
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800271c:	d108      	bne.n	8002730 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	e00b      	b.n	8002748 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002734:	2b12      	cmp	r3, #18
 8002736:	d107      	bne.n	8002748 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002746:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 f84f 	bl	80027f8 <I2C_WaitOnFlagUntilTimeout>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00d      	beq.n	800277c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800276e:	d103      	bne.n	8002778 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002776:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e035      	b.n	80027e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002784:	d108      	bne.n	8002798 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002786:	897b      	ldrh	r3, [r7, #10]
 8002788:	b2db      	uxtb	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002794:	611a      	str	r2, [r3, #16]
 8002796:	e01b      	b.n	80027d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002798:	897b      	ldrh	r3, [r7, #10]
 800279a:	11db      	asrs	r3, r3, #7
 800279c:	b2db      	uxtb	r3, r3
 800279e:	f003 0306 	and.w	r3, r3, #6
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	f063 030f 	orn	r3, r3, #15
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	490e      	ldr	r1, [pc, #56]	; (80027f0 <I2C_MasterRequestWrite+0xfc>)
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 f898 	bl	80028ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e010      	b.n	80027e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027c6:	897b      	ldrh	r3, [r7, #10]
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	4907      	ldr	r1, [pc, #28]	; (80027f4 <I2C_MasterRequestWrite+0x100>)
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 f888 	bl	80028ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	00010008 	.word	0x00010008
 80027f4:	00010002 	.word	0x00010002

080027f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	4613      	mov	r3, r2
 8002806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002808:	e048      	b.n	800289c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002810:	d044      	beq.n	800289c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002812:	f7ff f90d 	bl	8001a30 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d302      	bcc.n	8002828 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d139      	bne.n	800289c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	0c1b      	lsrs	r3, r3, #16
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b01      	cmp	r3, #1
 8002830:	d10d      	bne.n	800284e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	43da      	mvns	r2, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	4013      	ands	r3, r2
 800283e:	b29b      	uxth	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	bf0c      	ite	eq
 8002844:	2301      	moveq	r3, #1
 8002846:	2300      	movne	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	461a      	mov	r2, r3
 800284c:	e00c      	b.n	8002868 <I2C_WaitOnFlagUntilTimeout+0x70>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	43da      	mvns	r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	4013      	ands	r3, r2
 800285a:	b29b      	uxth	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	bf0c      	ite	eq
 8002860:	2301      	moveq	r3, #1
 8002862:	2300      	movne	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	461a      	mov	r2, r3
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	429a      	cmp	r2, r3
 800286c:	d116      	bne.n	800289c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	f043 0220 	orr.w	r2, r3, #32
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e023      	b.n	80028e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	0c1b      	lsrs	r3, r3, #16
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d10d      	bne.n	80028c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	43da      	mvns	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	4013      	ands	r3, r2
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	bf0c      	ite	eq
 80028b8:	2301      	moveq	r3, #1
 80028ba:	2300      	movne	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	461a      	mov	r2, r3
 80028c0:	e00c      	b.n	80028dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	43da      	mvns	r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	4013      	ands	r3, r2
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d093      	beq.n	800280a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028fa:	e071      	b.n	80029e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800290a:	d123      	bne.n	8002954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800291a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002924:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	f043 0204 	orr.w	r2, r3, #4
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e067      	b.n	8002a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295a:	d041      	beq.n	80029e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800295c:	f7ff f868 	bl	8001a30 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	429a      	cmp	r2, r3
 800296a:	d302      	bcc.n	8002972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d136      	bne.n	80029e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	0c1b      	lsrs	r3, r3, #16
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b01      	cmp	r3, #1
 800297a:	d10c      	bne.n	8002996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	43da      	mvns	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4013      	ands	r3, r2
 8002988:	b29b      	uxth	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	bf14      	ite	ne
 800298e:	2301      	movne	r3, #1
 8002990:	2300      	moveq	r3, #0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	e00b      	b.n	80029ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	43da      	mvns	r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	4013      	ands	r3, r2
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	bf14      	ite	ne
 80029a8:	2301      	movne	r3, #1
 80029aa:	2300      	moveq	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d016      	beq.n	80029e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	f043 0220 	orr.w	r2, r3, #32
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e021      	b.n	8002a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	0c1b      	lsrs	r3, r3, #16
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d10c      	bne.n	8002a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	43da      	mvns	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	4013      	ands	r3, r2
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	bf14      	ite	ne
 80029fc:	2301      	movne	r3, #1
 80029fe:	2300      	moveq	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	e00b      	b.n	8002a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	43da      	mvns	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	bf14      	ite	ne
 8002a16:	2301      	movne	r3, #1
 8002a18:	2300      	moveq	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f47f af6d 	bne.w	80028fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a38:	e034      	b.n	8002aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 f886 	bl	8002b4c <I2C_IsAcknowledgeFailed>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e034      	b.n	8002ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a50:	d028      	beq.n	8002aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a52:	f7fe ffed 	bl	8001a30 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d302      	bcc.n	8002a68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d11d      	bne.n	8002aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a72:	2b80      	cmp	r3, #128	; 0x80
 8002a74:	d016      	beq.n	8002aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	f043 0220 	orr.w	r2, r3, #32
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e007      	b.n	8002ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aae:	2b80      	cmp	r3, #128	; 0x80
 8002ab0:	d1c3      	bne.n	8002a3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ac8:	e034      	b.n	8002b34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f83e 	bl	8002b4c <I2C_IsAcknowledgeFailed>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e034      	b.n	8002b44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae0:	d028      	beq.n	8002b34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae2:	f7fe ffa5 	bl	8001a30 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d302      	bcc.n	8002af8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d11d      	bne.n	8002b34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d016      	beq.n	8002b34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f043 0220 	orr.w	r2, r3, #32
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e007      	b.n	8002b44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d1c3      	bne.n	8002aca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b62:	d11b      	bne.n	8002b9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	f043 0204 	orr.w	r2, r3, #4
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0cc      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc0:	4b68      	ldr	r3, [pc, #416]	; (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 030f 	and.w	r3, r3, #15
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d90c      	bls.n	8002be8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bce:	4b65      	ldr	r3, [pc, #404]	; (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd6:	4b63      	ldr	r3, [pc, #396]	; (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0b8      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d020      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c00:	4b59      	ldr	r3, [pc, #356]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	4a58      	ldr	r2, [pc, #352]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c18:	4b53      	ldr	r3, [pc, #332]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	4a52      	ldr	r2, [pc, #328]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c24:	4b50      	ldr	r3, [pc, #320]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	494d      	ldr	r1, [pc, #308]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d044      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d107      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4a:	4b47      	ldr	r3, [pc, #284]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d119      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e07f      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d003      	beq.n	8002c6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d107      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6a:	4b3f      	ldr	r3, [pc, #252]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d109      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e06f      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7a:	4b3b      	ldr	r3, [pc, #236]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e067      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c8a:	4b37      	ldr	r3, [pc, #220]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f023 0203 	bic.w	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	4934      	ldr	r1, [pc, #208]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c9c:	f7fe fec8 	bl	8001a30 <HAL_GetTick>
 8002ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca2:	e00a      	b.n	8002cba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca4:	f7fe fec4 	bl	8001a30 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e04f      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cba:	4b2b      	ldr	r3, [pc, #172]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 020c 	and.w	r2, r3, #12
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d1eb      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ccc:	4b25      	ldr	r3, [pc, #148]	; (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d20c      	bcs.n	8002cf4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cda:	4b22      	ldr	r3, [pc, #136]	; (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce2:	4b20      	ldr	r3, [pc, #128]	; (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e032      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d008      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d00:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	4916      	ldr	r1, [pc, #88]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d009      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d1e:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	490e      	ldr	r1, [pc, #56]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d32:	f000 f887 	bl	8002e44 <HAL_RCC_GetSysClockFreq>
 8002d36:	4602      	mov	r2, r0
 8002d38:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	490a      	ldr	r1, [pc, #40]	; (8002d6c <HAL_RCC_ClockConfig+0x1c0>)
 8002d44:	5ccb      	ldrb	r3, [r1, r3]
 8002d46:	fa22 f303 	lsr.w	r3, r2, r3
 8002d4a:	4a09      	ldr	r2, [pc, #36]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d4e:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <HAL_RCC_ClockConfig+0x1c8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fe fcba 	bl	80016cc <HAL_InitTick>

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40023c00 	.word	0x40023c00
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	0800813c 	.word	0x0800813c
 8002d70:	2000000c 	.word	0x2000000c
 8002d74:	20000010 	.word	0x20000010

08002d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d7c:	4b03      	ldr	r3, [pc, #12]	; (8002d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	2000000c 	.word	0x2000000c

08002d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d94:	f7ff fff0 	bl	8002d78 <HAL_RCC_GetHCLKFreq>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	0a9b      	lsrs	r3, r3, #10
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	4903      	ldr	r1, [pc, #12]	; (8002db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002da6:	5ccb      	ldrb	r3, [r1, r3]
 8002da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40023800 	.word	0x40023800
 8002db4:	0800814c 	.word	0x0800814c

08002db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dbc:	f7ff ffdc 	bl	8002d78 <HAL_RCC_GetHCLKFreq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	0b5b      	lsrs	r3, r3, #13
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	4903      	ldr	r1, [pc, #12]	; (8002ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dce:	5ccb      	ldrb	r3, [r1, r3]
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	0800814c 	.word	0x0800814c

08002de0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	220f      	movs	r2, #15
 8002dee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002df0:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <HAL_RCC_GetClockConfig+0x5c>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 0203 	and.w	r2, r3, #3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <HAL_RCC_GetClockConfig+0x5c>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e08:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <HAL_RCC_GetClockConfig+0x5c>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e14:	4b09      	ldr	r3, [pc, #36]	; (8002e3c <HAL_RCC_GetClockConfig+0x5c>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	08db      	lsrs	r3, r3, #3
 8002e1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e22:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <HAL_RCC_GetClockConfig+0x60>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 020f 	and.w	r2, r3, #15
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	601a      	str	r2, [r3, #0]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40023c00 	.word	0x40023c00

08002e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e48:	b0ae      	sub	sp, #184	; 0xb8
 8002e4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e6a:	4bcb      	ldr	r3, [pc, #812]	; (8003198 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 030c 	and.w	r3, r3, #12
 8002e72:	2b0c      	cmp	r3, #12
 8002e74:	f200 8206 	bhi.w	8003284 <HAL_RCC_GetSysClockFreq+0x440>
 8002e78:	a201      	add	r2, pc, #4	; (adr r2, 8002e80 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7e:	bf00      	nop
 8002e80:	08002eb5 	.word	0x08002eb5
 8002e84:	08003285 	.word	0x08003285
 8002e88:	08003285 	.word	0x08003285
 8002e8c:	08003285 	.word	0x08003285
 8002e90:	08002ebd 	.word	0x08002ebd
 8002e94:	08003285 	.word	0x08003285
 8002e98:	08003285 	.word	0x08003285
 8002e9c:	08003285 	.word	0x08003285
 8002ea0:	08002ec5 	.word	0x08002ec5
 8002ea4:	08003285 	.word	0x08003285
 8002ea8:	08003285 	.word	0x08003285
 8002eac:	08003285 	.word	0x08003285
 8002eb0:	080030b5 	.word	0x080030b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002eb4:	4bb9      	ldr	r3, [pc, #740]	; (800319c <HAL_RCC_GetSysClockFreq+0x358>)
 8002eb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002eba:	e1e7      	b.n	800328c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ebc:	4bb8      	ldr	r3, [pc, #736]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ec2:	e1e3      	b.n	800328c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ec4:	4bb4      	ldr	r3, [pc, #720]	; (8003198 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ed0:	4bb1      	ldr	r3, [pc, #708]	; (8003198 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d071      	beq.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002edc:	4bae      	ldr	r3, [pc, #696]	; (8003198 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	099b      	lsrs	r3, r3, #6
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ee8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002efe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f02:	4622      	mov	r2, r4
 8002f04:	462b      	mov	r3, r5
 8002f06:	f04f 0000 	mov.w	r0, #0
 8002f0a:	f04f 0100 	mov.w	r1, #0
 8002f0e:	0159      	lsls	r1, r3, #5
 8002f10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f14:	0150      	lsls	r0, r2, #5
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	1a51      	subs	r1, r2, r1
 8002f1e:	6439      	str	r1, [r7, #64]	; 0x40
 8002f20:	4629      	mov	r1, r5
 8002f22:	eb63 0301 	sbc.w	r3, r3, r1
 8002f26:	647b      	str	r3, [r7, #68]	; 0x44
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002f34:	4649      	mov	r1, r9
 8002f36:	018b      	lsls	r3, r1, #6
 8002f38:	4641      	mov	r1, r8
 8002f3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f3e:	4641      	mov	r1, r8
 8002f40:	018a      	lsls	r2, r1, #6
 8002f42:	4641      	mov	r1, r8
 8002f44:	1a51      	subs	r1, r2, r1
 8002f46:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f48:	4649      	mov	r1, r9
 8002f4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002f5c:	4649      	mov	r1, r9
 8002f5e:	00cb      	lsls	r3, r1, #3
 8002f60:	4641      	mov	r1, r8
 8002f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f66:	4641      	mov	r1, r8
 8002f68:	00ca      	lsls	r2, r1, #3
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4622      	mov	r2, r4
 8002f72:	189b      	adds	r3, r3, r2
 8002f74:	633b      	str	r3, [r7, #48]	; 0x30
 8002f76:	462b      	mov	r3, r5
 8002f78:	460a      	mov	r2, r1
 8002f7a:	eb42 0303 	adc.w	r3, r2, r3
 8002f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	024b      	lsls	r3, r1, #9
 8002f90:	4621      	mov	r1, r4
 8002f92:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f96:	4621      	mov	r1, r4
 8002f98:	024a      	lsls	r2, r1, #9
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fa8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002fb0:	f7fd f97e 	bl	80002b0 <__aeabi_uldivmod>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4613      	mov	r3, r2
 8002fba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fbe:	e067      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fc0:	4b75      	ldr	r3, [pc, #468]	; (8003198 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	099b      	lsrs	r3, r3, #6
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fcc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002fd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fda:	2300      	movs	r3, #0
 8002fdc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fde:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002fe2:	4622      	mov	r2, r4
 8002fe4:	462b      	mov	r3, r5
 8002fe6:	f04f 0000 	mov.w	r0, #0
 8002fea:	f04f 0100 	mov.w	r1, #0
 8002fee:	0159      	lsls	r1, r3, #5
 8002ff0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ff4:	0150      	lsls	r0, r2, #5
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	1a51      	subs	r1, r2, r1
 8002ffe:	62b9      	str	r1, [r7, #40]	; 0x28
 8003000:	4629      	mov	r1, r5
 8003002:	eb63 0301 	sbc.w	r3, r3, r1
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003014:	4649      	mov	r1, r9
 8003016:	018b      	lsls	r3, r1, #6
 8003018:	4641      	mov	r1, r8
 800301a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800301e:	4641      	mov	r1, r8
 8003020:	018a      	lsls	r2, r1, #6
 8003022:	4641      	mov	r1, r8
 8003024:	ebb2 0a01 	subs.w	sl, r2, r1
 8003028:	4649      	mov	r1, r9
 800302a:	eb63 0b01 	sbc.w	fp, r3, r1
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800303a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800303e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003042:	4692      	mov	sl, r2
 8003044:	469b      	mov	fp, r3
 8003046:	4623      	mov	r3, r4
 8003048:	eb1a 0303 	adds.w	r3, sl, r3
 800304c:	623b      	str	r3, [r7, #32]
 800304e:	462b      	mov	r3, r5
 8003050:	eb4b 0303 	adc.w	r3, fp, r3
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003062:	4629      	mov	r1, r5
 8003064:	028b      	lsls	r3, r1, #10
 8003066:	4621      	mov	r1, r4
 8003068:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800306c:	4621      	mov	r1, r4
 800306e:	028a      	lsls	r2, r1, #10
 8003070:	4610      	mov	r0, r2
 8003072:	4619      	mov	r1, r3
 8003074:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003078:	2200      	movs	r2, #0
 800307a:	673b      	str	r3, [r7, #112]	; 0x70
 800307c:	677a      	str	r2, [r7, #116]	; 0x74
 800307e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003082:	f7fd f915 	bl	80002b0 <__aeabi_uldivmod>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4613      	mov	r3, r2
 800308c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003090:	4b41      	ldr	r3, [pc, #260]	; (8003198 <HAL_RCC_GetSysClockFreq+0x354>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	0c1b      	lsrs	r3, r3, #16
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	3301      	adds	r3, #1
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80030a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030b2:	e0eb      	b.n	800328c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030b4:	4b38      	ldr	r3, [pc, #224]	; (8003198 <HAL_RCC_GetSysClockFreq+0x354>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030c0:	4b35      	ldr	r3, [pc, #212]	; (8003198 <HAL_RCC_GetSysClockFreq+0x354>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d06b      	beq.n	80031a4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030cc:	4b32      	ldr	r3, [pc, #200]	; (8003198 <HAL_RCC_GetSysClockFreq+0x354>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	099b      	lsrs	r3, r3, #6
 80030d2:	2200      	movs	r2, #0
 80030d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80030d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030de:	663b      	str	r3, [r7, #96]	; 0x60
 80030e0:	2300      	movs	r3, #0
 80030e2:	667b      	str	r3, [r7, #100]	; 0x64
 80030e4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80030e8:	4622      	mov	r2, r4
 80030ea:	462b      	mov	r3, r5
 80030ec:	f04f 0000 	mov.w	r0, #0
 80030f0:	f04f 0100 	mov.w	r1, #0
 80030f4:	0159      	lsls	r1, r3, #5
 80030f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030fa:	0150      	lsls	r0, r2, #5
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4621      	mov	r1, r4
 8003102:	1a51      	subs	r1, r2, r1
 8003104:	61b9      	str	r1, [r7, #24]
 8003106:	4629      	mov	r1, r5
 8003108:	eb63 0301 	sbc.w	r3, r3, r1
 800310c:	61fb      	str	r3, [r7, #28]
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800311a:	4659      	mov	r1, fp
 800311c:	018b      	lsls	r3, r1, #6
 800311e:	4651      	mov	r1, sl
 8003120:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003124:	4651      	mov	r1, sl
 8003126:	018a      	lsls	r2, r1, #6
 8003128:	4651      	mov	r1, sl
 800312a:	ebb2 0801 	subs.w	r8, r2, r1
 800312e:	4659      	mov	r1, fp
 8003130:	eb63 0901 	sbc.w	r9, r3, r1
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003140:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003144:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003148:	4690      	mov	r8, r2
 800314a:	4699      	mov	r9, r3
 800314c:	4623      	mov	r3, r4
 800314e:	eb18 0303 	adds.w	r3, r8, r3
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	462b      	mov	r3, r5
 8003156:	eb49 0303 	adc.w	r3, r9, r3
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003168:	4629      	mov	r1, r5
 800316a:	024b      	lsls	r3, r1, #9
 800316c:	4621      	mov	r1, r4
 800316e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003172:	4621      	mov	r1, r4
 8003174:	024a      	lsls	r2, r1, #9
 8003176:	4610      	mov	r0, r2
 8003178:	4619      	mov	r1, r3
 800317a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800317e:	2200      	movs	r2, #0
 8003180:	65bb      	str	r3, [r7, #88]	; 0x58
 8003182:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003184:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003188:	f7fd f892 	bl	80002b0 <__aeabi_uldivmod>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4613      	mov	r3, r2
 8003192:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003196:	e065      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x420>
 8003198:	40023800 	.word	0x40023800
 800319c:	00f42400 	.word	0x00f42400
 80031a0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a4:	4b3d      	ldr	r3, [pc, #244]	; (800329c <HAL_RCC_GetSysClockFreq+0x458>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	099b      	lsrs	r3, r3, #6
 80031aa:	2200      	movs	r2, #0
 80031ac:	4618      	mov	r0, r3
 80031ae:	4611      	mov	r1, r2
 80031b0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031b4:	653b      	str	r3, [r7, #80]	; 0x50
 80031b6:	2300      	movs	r3, #0
 80031b8:	657b      	str	r3, [r7, #84]	; 0x54
 80031ba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80031be:	4642      	mov	r2, r8
 80031c0:	464b      	mov	r3, r9
 80031c2:	f04f 0000 	mov.w	r0, #0
 80031c6:	f04f 0100 	mov.w	r1, #0
 80031ca:	0159      	lsls	r1, r3, #5
 80031cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031d0:	0150      	lsls	r0, r2, #5
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4641      	mov	r1, r8
 80031d8:	1a51      	subs	r1, r2, r1
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	4649      	mov	r1, r9
 80031de:	eb63 0301 	sbc.w	r3, r3, r1
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80031f0:	4659      	mov	r1, fp
 80031f2:	018b      	lsls	r3, r1, #6
 80031f4:	4651      	mov	r1, sl
 80031f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031fa:	4651      	mov	r1, sl
 80031fc:	018a      	lsls	r2, r1, #6
 80031fe:	4651      	mov	r1, sl
 8003200:	1a54      	subs	r4, r2, r1
 8003202:	4659      	mov	r1, fp
 8003204:	eb63 0501 	sbc.w	r5, r3, r1
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	00eb      	lsls	r3, r5, #3
 8003212:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003216:	00e2      	lsls	r2, r4, #3
 8003218:	4614      	mov	r4, r2
 800321a:	461d      	mov	r5, r3
 800321c:	4643      	mov	r3, r8
 800321e:	18e3      	adds	r3, r4, r3
 8003220:	603b      	str	r3, [r7, #0]
 8003222:	464b      	mov	r3, r9
 8003224:	eb45 0303 	adc.w	r3, r5, r3
 8003228:	607b      	str	r3, [r7, #4]
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003236:	4629      	mov	r1, r5
 8003238:	028b      	lsls	r3, r1, #10
 800323a:	4621      	mov	r1, r4
 800323c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003240:	4621      	mov	r1, r4
 8003242:	028a      	lsls	r2, r1, #10
 8003244:	4610      	mov	r0, r2
 8003246:	4619      	mov	r1, r3
 8003248:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800324c:	2200      	movs	r2, #0
 800324e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003250:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003252:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003256:	f7fd f82b 	bl	80002b0 <__aeabi_uldivmod>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4613      	mov	r3, r2
 8003260:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003264:	4b0d      	ldr	r3, [pc, #52]	; (800329c <HAL_RCC_GetSysClockFreq+0x458>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	0f1b      	lsrs	r3, r3, #28
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003272:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003276:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800327a:	fbb2 f3f3 	udiv	r3, r2, r3
 800327e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003282:	e003      	b.n	800328c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003284:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003286:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800328a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800328c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003290:	4618      	mov	r0, r3
 8003292:	37b8      	adds	r7, #184	; 0xb8
 8003294:	46bd      	mov	sp, r7
 8003296:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800329a:	bf00      	nop
 800329c:	40023800 	.word	0x40023800
 80032a0:	00f42400 	.word	0x00f42400

080032a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e28d      	b.n	80037d2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 8083 	beq.w	80033ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032c4:	4b94      	ldr	r3, [pc, #592]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 030c 	and.w	r3, r3, #12
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d019      	beq.n	8003304 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032d0:	4b91      	ldr	r3, [pc, #580]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d106      	bne.n	80032ea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032dc:	4b8e      	ldr	r3, [pc, #568]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032e8:	d00c      	beq.n	8003304 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ea:	4b8b      	ldr	r3, [pc, #556]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032f2:	2b0c      	cmp	r3, #12
 80032f4:	d112      	bne.n	800331c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032f6:	4b88      	ldr	r3, [pc, #544]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003302:	d10b      	bne.n	800331c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003304:	4b84      	ldr	r3, [pc, #528]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d05b      	beq.n	80033c8 <HAL_RCC_OscConfig+0x124>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d157      	bne.n	80033c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e25a      	b.n	80037d2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003324:	d106      	bne.n	8003334 <HAL_RCC_OscConfig+0x90>
 8003326:	4b7c      	ldr	r3, [pc, #496]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a7b      	ldr	r2, [pc, #492]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 800332c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e01d      	b.n	8003370 <HAL_RCC_OscConfig+0xcc>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800333c:	d10c      	bne.n	8003358 <HAL_RCC_OscConfig+0xb4>
 800333e:	4b76      	ldr	r3, [pc, #472]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a75      	ldr	r2, [pc, #468]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 8003344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	4b73      	ldr	r3, [pc, #460]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a72      	ldr	r2, [pc, #456]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 8003350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e00b      	b.n	8003370 <HAL_RCC_OscConfig+0xcc>
 8003358:	4b6f      	ldr	r3, [pc, #444]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a6e      	ldr	r2, [pc, #440]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 800335e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	4b6c      	ldr	r3, [pc, #432]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a6b      	ldr	r2, [pc, #428]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 800336a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d013      	beq.n	80033a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7fe fb5a 	bl	8001a30 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003380:	f7fe fb56 	bl	8001a30 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b64      	cmp	r3, #100	; 0x64
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e21f      	b.n	80037d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	4b61      	ldr	r3, [pc, #388]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f0      	beq.n	8003380 <HAL_RCC_OscConfig+0xdc>
 800339e:	e014      	b.n	80033ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7fe fb46 	bl	8001a30 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a8:	f7fe fb42 	bl	8001a30 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b64      	cmp	r3, #100	; 0x64
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e20b      	b.n	80037d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ba:	4b57      	ldr	r3, [pc, #348]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x104>
 80033c6:	e000      	b.n	80033ca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d06f      	beq.n	80034b6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033d6:	4b50      	ldr	r3, [pc, #320]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d017      	beq.n	8003412 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033e2:	4b4d      	ldr	r3, [pc, #308]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d105      	bne.n	80033fa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033ee:	4b4a      	ldr	r3, [pc, #296]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00b      	beq.n	8003412 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033fa:	4b47      	ldr	r3, [pc, #284]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003402:	2b0c      	cmp	r3, #12
 8003404:	d11c      	bne.n	8003440 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003406:	4b44      	ldr	r3, [pc, #272]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d116      	bne.n	8003440 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003412:	4b41      	ldr	r3, [pc, #260]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d005      	beq.n	800342a <HAL_RCC_OscConfig+0x186>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d001      	beq.n	800342a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e1d3      	b.n	80037d2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342a:	4b3b      	ldr	r3, [pc, #236]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4937      	ldr	r1, [pc, #220]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 800343a:	4313      	orrs	r3, r2
 800343c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343e:	e03a      	b.n	80034b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d020      	beq.n	800348a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003448:	4b34      	ldr	r3, [pc, #208]	; (800351c <HAL_RCC_OscConfig+0x278>)
 800344a:	2201      	movs	r2, #1
 800344c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344e:	f7fe faef 	bl	8001a30 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003456:	f7fe faeb 	bl	8001a30 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e1b4      	b.n	80037d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003468:	4b2b      	ldr	r3, [pc, #172]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f0      	beq.n	8003456 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003474:	4b28      	ldr	r3, [pc, #160]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	4925      	ldr	r1, [pc, #148]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 8003484:	4313      	orrs	r3, r2
 8003486:	600b      	str	r3, [r1, #0]
 8003488:	e015      	b.n	80034b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800348a:	4b24      	ldr	r3, [pc, #144]	; (800351c <HAL_RCC_OscConfig+0x278>)
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003490:	f7fe face 	bl	8001a30 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003498:	f7fe faca 	bl	8001a30 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e193      	b.n	80037d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034aa:	4b1b      	ldr	r3, [pc, #108]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d036      	beq.n	8003530 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d016      	beq.n	80034f8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ca:	4b15      	ldr	r3, [pc, #84]	; (8003520 <HAL_RCC_OscConfig+0x27c>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7fe faae 	bl	8001a30 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034d8:	f7fe faaa 	bl	8001a30 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e173      	b.n	80037d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ea:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 80034ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCC_OscConfig+0x234>
 80034f6:	e01b      	b.n	8003530 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034f8:	4b09      	ldr	r3, [pc, #36]	; (8003520 <HAL_RCC_OscConfig+0x27c>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fe:	f7fe fa97 	bl	8001a30 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003504:	e00e      	b.n	8003524 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003506:	f7fe fa93 	bl	8001a30 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d907      	bls.n	8003524 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e15c      	b.n	80037d2 <HAL_RCC_OscConfig+0x52e>
 8003518:	40023800 	.word	0x40023800
 800351c:	42470000 	.word	0x42470000
 8003520:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003524:	4b8a      	ldr	r3, [pc, #552]	; (8003750 <HAL_RCC_OscConfig+0x4ac>)
 8003526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1ea      	bne.n	8003506 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 8097 	beq.w	800366c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800353e:	2300      	movs	r3, #0
 8003540:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003542:	4b83      	ldr	r3, [pc, #524]	; (8003750 <HAL_RCC_OscConfig+0x4ac>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10f      	bne.n	800356e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800354e:	2300      	movs	r3, #0
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	4b7f      	ldr	r3, [pc, #508]	; (8003750 <HAL_RCC_OscConfig+0x4ac>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	4a7e      	ldr	r2, [pc, #504]	; (8003750 <HAL_RCC_OscConfig+0x4ac>)
 8003558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355c:	6413      	str	r3, [r2, #64]	; 0x40
 800355e:	4b7c      	ldr	r3, [pc, #496]	; (8003750 <HAL_RCC_OscConfig+0x4ac>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800356a:	2301      	movs	r3, #1
 800356c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356e:	4b79      	ldr	r3, [pc, #484]	; (8003754 <HAL_RCC_OscConfig+0x4b0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003576:	2b00      	cmp	r3, #0
 8003578:	d118      	bne.n	80035ac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800357a:	4b76      	ldr	r3, [pc, #472]	; (8003754 <HAL_RCC_OscConfig+0x4b0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a75      	ldr	r2, [pc, #468]	; (8003754 <HAL_RCC_OscConfig+0x4b0>)
 8003580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003586:	f7fe fa53 	bl	8001a30 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358e:	f7fe fa4f 	bl	8001a30 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e118      	b.n	80037d2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a0:	4b6c      	ldr	r3, [pc, #432]	; (8003754 <HAL_RCC_OscConfig+0x4b0>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f0      	beq.n	800358e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d106      	bne.n	80035c2 <HAL_RCC_OscConfig+0x31e>
 80035b4:	4b66      	ldr	r3, [pc, #408]	; (8003750 <HAL_RCC_OscConfig+0x4ac>)
 80035b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b8:	4a65      	ldr	r2, [pc, #404]	; (8003750 <HAL_RCC_OscConfig+0x4ac>)
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	6713      	str	r3, [r2, #112]	; 0x70
 80035c0:	e01c      	b.n	80035fc <HAL_RCC_OscConfig+0x358>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b05      	cmp	r3, #5
 80035c8:	d10c      	bne.n	80035e4 <HAL_RCC_OscConfig+0x340>
 80035ca:	4b61      	ldr	r3, [pc, #388]	; (8003750 <HAL_RCC_OscConfig+0x4ac>)
 80035cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ce:	4a60      	ldr	r2, [pc, #384]	; (8003750 <HAL_RCC_OscConfig+0x4ac>)
 80035d0:	f043 0304 	orr.w	r3, r3, #4
 80035d4:	6713      	str	r3, [r2, #112]	; 0x70
 80035d6:	4b5e      	ldr	r3, [pc, #376]	; (8003750 <HAL_RCC_OscConfig+0x4ac>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035da:	4a5d      	ldr	r2, [pc, #372]	; (8003750 <HAL_RCC_OscConfig+0x4ac>)
 80035dc:	f043 0301 	orr.w	r3, r3, #1
 80035e0:	6713      	str	r3, [r2, #112]	; 0x70
 80035e2:	e00b      	b.n	80035fc <HAL_RCC_OscConfig+0x358>
 80035e4:	4b5a      	ldr	r3, [pc, #360]	; (8003750 <HAL_RCC_OscConfig+0x4ac>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	4a59      	ldr	r2, [pc, #356]	; (8003750 <HAL_RCC_OscConfig+0x4ac>)
 80035ea:	f023 0301 	bic.w	r3, r3, #1
 80035ee:	6713      	str	r3, [r2, #112]	; 0x70
 80035f0:	4b57      	ldr	r3, [pc, #348]	; (8003750 <HAL_RCC_OscConfig+0x4ac>)
 80035f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f4:	4a56      	ldr	r2, [pc, #344]	; (8003750 <HAL_RCC_OscConfig+0x4ac>)
 80035f6:	f023 0304 	bic.w	r3, r3, #4
 80035fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d015      	beq.n	8003630 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003604:	f7fe fa14 	bl	8001a30 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360a:	e00a      	b.n	8003622 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800360c:	f7fe fa10 	bl	8001a30 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	f241 3288 	movw	r2, #5000	; 0x1388
 800361a:	4293      	cmp	r3, r2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e0d7      	b.n	80037d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003622:	4b4b      	ldr	r3, [pc, #300]	; (8003750 <HAL_RCC_OscConfig+0x4ac>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0ee      	beq.n	800360c <HAL_RCC_OscConfig+0x368>
 800362e:	e014      	b.n	800365a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003630:	f7fe f9fe 	bl	8001a30 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003636:	e00a      	b.n	800364e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003638:	f7fe f9fa 	bl	8001a30 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	; 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e0c1      	b.n	80037d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800364e:	4b40      	ldr	r3, [pc, #256]	; (8003750 <HAL_RCC_OscConfig+0x4ac>)
 8003650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1ee      	bne.n	8003638 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800365a:	7dfb      	ldrb	r3, [r7, #23]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d105      	bne.n	800366c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003660:	4b3b      	ldr	r3, [pc, #236]	; (8003750 <HAL_RCC_OscConfig+0x4ac>)
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	4a3a      	ldr	r2, [pc, #232]	; (8003750 <HAL_RCC_OscConfig+0x4ac>)
 8003666:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800366a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 80ad 	beq.w	80037d0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003676:	4b36      	ldr	r3, [pc, #216]	; (8003750 <HAL_RCC_OscConfig+0x4ac>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b08      	cmp	r3, #8
 8003680:	d060      	beq.n	8003744 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d145      	bne.n	8003716 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368a:	4b33      	ldr	r3, [pc, #204]	; (8003758 <HAL_RCC_OscConfig+0x4b4>)
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7fe f9ce 	bl	8001a30 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003698:	f7fe f9ca 	bl	8001a30 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e093      	b.n	80037d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036aa:	4b29      	ldr	r3, [pc, #164]	; (8003750 <HAL_RCC_OscConfig+0x4ac>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69da      	ldr	r2, [r3, #28]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	019b      	lsls	r3, r3, #6
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036cc:	085b      	lsrs	r3, r3, #1
 80036ce:	3b01      	subs	r3, #1
 80036d0:	041b      	lsls	r3, r3, #16
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d8:	061b      	lsls	r3, r3, #24
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	071b      	lsls	r3, r3, #28
 80036e2:	491b      	ldr	r1, [pc, #108]	; (8003750 <HAL_RCC_OscConfig+0x4ac>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e8:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <HAL_RCC_OscConfig+0x4b4>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ee:	f7fe f99f 	bl	8001a30 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f6:	f7fe f99b 	bl	8001a30 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e064      	b.n	80037d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003708:	4b11      	ldr	r3, [pc, #68]	; (8003750 <HAL_RCC_OscConfig+0x4ac>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0f0      	beq.n	80036f6 <HAL_RCC_OscConfig+0x452>
 8003714:	e05c      	b.n	80037d0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003716:	4b10      	ldr	r3, [pc, #64]	; (8003758 <HAL_RCC_OscConfig+0x4b4>)
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7fe f988 	bl	8001a30 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003724:	f7fe f984 	bl	8001a30 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e04d      	b.n	80037d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003736:	4b06      	ldr	r3, [pc, #24]	; (8003750 <HAL_RCC_OscConfig+0x4ac>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x480>
 8003742:	e045      	b.n	80037d0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d107      	bne.n	800375c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e040      	b.n	80037d2 <HAL_RCC_OscConfig+0x52e>
 8003750:	40023800 	.word	0x40023800
 8003754:	40007000 	.word	0x40007000
 8003758:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800375c:	4b1f      	ldr	r3, [pc, #124]	; (80037dc <HAL_RCC_OscConfig+0x538>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d030      	beq.n	80037cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d129      	bne.n	80037cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003782:	429a      	cmp	r2, r3
 8003784:	d122      	bne.n	80037cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800378c:	4013      	ands	r3, r2
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003792:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003794:	4293      	cmp	r3, r2
 8003796:	d119      	bne.n	80037cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a2:	085b      	lsrs	r3, r3, #1
 80037a4:	3b01      	subs	r3, #1
 80037a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d10f      	bne.n	80037cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d107      	bne.n	80037cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40023800 	.word	0x40023800

080037e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e041      	b.n	8003876 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d106      	bne.n	800380c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f839 	bl	800387e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3304      	adds	r3, #4
 800381c:	4619      	mov	r1, r3
 800381e:	4610      	mov	r0, r2
 8003820:	f000 f9c0 	bl	8003ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
	...

08003894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d001      	beq.n	80038ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e04e      	b.n	800394a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a23      	ldr	r2, [pc, #140]	; (8003958 <HAL_TIM_Base_Start_IT+0xc4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d022      	beq.n	8003914 <HAL_TIM_Base_Start_IT+0x80>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d6:	d01d      	beq.n	8003914 <HAL_TIM_Base_Start_IT+0x80>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1f      	ldr	r2, [pc, #124]	; (800395c <HAL_TIM_Base_Start_IT+0xc8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d018      	beq.n	8003914 <HAL_TIM_Base_Start_IT+0x80>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a1e      	ldr	r2, [pc, #120]	; (8003960 <HAL_TIM_Base_Start_IT+0xcc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d013      	beq.n	8003914 <HAL_TIM_Base_Start_IT+0x80>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a1c      	ldr	r2, [pc, #112]	; (8003964 <HAL_TIM_Base_Start_IT+0xd0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d00e      	beq.n	8003914 <HAL_TIM_Base_Start_IT+0x80>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a1b      	ldr	r2, [pc, #108]	; (8003968 <HAL_TIM_Base_Start_IT+0xd4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d009      	beq.n	8003914 <HAL_TIM_Base_Start_IT+0x80>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a19      	ldr	r2, [pc, #100]	; (800396c <HAL_TIM_Base_Start_IT+0xd8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d004      	beq.n	8003914 <HAL_TIM_Base_Start_IT+0x80>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a18      	ldr	r2, [pc, #96]	; (8003970 <HAL_TIM_Base_Start_IT+0xdc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d111      	bne.n	8003938 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2b06      	cmp	r3, #6
 8003924:	d010      	beq.n	8003948 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f042 0201 	orr.w	r2, r2, #1
 8003934:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003936:	e007      	b.n	8003948 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40010000 	.word	0x40010000
 800395c:	40000400 	.word	0x40000400
 8003960:	40000800 	.word	0x40000800
 8003964:	40000c00 	.word	0x40000c00
 8003968:	40010400 	.word	0x40010400
 800396c:	40014000 	.word	0x40014000
 8003970:	40001800 	.word	0x40001800

08003974 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d020      	beq.n	80039d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d01b      	beq.n	80039d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0202 	mvn.w	r2, #2
 80039a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f8d2 	bl	8003b68 <HAL_TIM_IC_CaptureCallback>
 80039c4:	e005      	b.n	80039d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f8c4 	bl	8003b54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f8d5 	bl	8003b7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d020      	beq.n	8003a24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01b      	beq.n	8003a24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f06f 0204 	mvn.w	r2, #4
 80039f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2202      	movs	r2, #2
 80039fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f8ac 	bl	8003b68 <HAL_TIM_IC_CaptureCallback>
 8003a10:	e005      	b.n	8003a1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f89e 	bl	8003b54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f8af 	bl	8003b7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d020      	beq.n	8003a70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d01b      	beq.n	8003a70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f06f 0208 	mvn.w	r2, #8
 8003a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2204      	movs	r2, #4
 8003a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f886 	bl	8003b68 <HAL_TIM_IC_CaptureCallback>
 8003a5c:	e005      	b.n	8003a6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f878 	bl	8003b54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f889 	bl	8003b7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d020      	beq.n	8003abc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f003 0310 	and.w	r3, r3, #16
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d01b      	beq.n	8003abc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f06f 0210 	mvn.w	r2, #16
 8003a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2208      	movs	r2, #8
 8003a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f860 	bl	8003b68 <HAL_TIM_IC_CaptureCallback>
 8003aa8:	e005      	b.n	8003ab6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f852 	bl	8003b54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f863 	bl	8003b7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00c      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d007      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0201 	mvn.w	r2, #1
 8003ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fd fa5a 	bl	8000f94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00c      	beq.n	8003b04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d007      	beq.n	8003b04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f906 	bl	8003d10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00c      	beq.n	8003b28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d007      	beq.n	8003b28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f834 	bl	8003b90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f003 0320 	and.w	r3, r3, #32
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00c      	beq.n	8003b4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f003 0320 	and.w	r3, r3, #32
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d007      	beq.n	8003b4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0220 	mvn.w	r2, #32
 8003b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f8d8 	bl	8003cfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a46      	ldr	r2, [pc, #280]	; (8003cd0 <TIM_Base_SetConfig+0x12c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d013      	beq.n	8003be4 <TIM_Base_SetConfig+0x40>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc2:	d00f      	beq.n	8003be4 <TIM_Base_SetConfig+0x40>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a43      	ldr	r2, [pc, #268]	; (8003cd4 <TIM_Base_SetConfig+0x130>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00b      	beq.n	8003be4 <TIM_Base_SetConfig+0x40>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a42      	ldr	r2, [pc, #264]	; (8003cd8 <TIM_Base_SetConfig+0x134>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d007      	beq.n	8003be4 <TIM_Base_SetConfig+0x40>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a41      	ldr	r2, [pc, #260]	; (8003cdc <TIM_Base_SetConfig+0x138>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d003      	beq.n	8003be4 <TIM_Base_SetConfig+0x40>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a40      	ldr	r2, [pc, #256]	; (8003ce0 <TIM_Base_SetConfig+0x13c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d108      	bne.n	8003bf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a35      	ldr	r2, [pc, #212]	; (8003cd0 <TIM_Base_SetConfig+0x12c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d02b      	beq.n	8003c56 <TIM_Base_SetConfig+0xb2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c04:	d027      	beq.n	8003c56 <TIM_Base_SetConfig+0xb2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a32      	ldr	r2, [pc, #200]	; (8003cd4 <TIM_Base_SetConfig+0x130>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d023      	beq.n	8003c56 <TIM_Base_SetConfig+0xb2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a31      	ldr	r2, [pc, #196]	; (8003cd8 <TIM_Base_SetConfig+0x134>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d01f      	beq.n	8003c56 <TIM_Base_SetConfig+0xb2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a30      	ldr	r2, [pc, #192]	; (8003cdc <TIM_Base_SetConfig+0x138>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d01b      	beq.n	8003c56 <TIM_Base_SetConfig+0xb2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a2f      	ldr	r2, [pc, #188]	; (8003ce0 <TIM_Base_SetConfig+0x13c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d017      	beq.n	8003c56 <TIM_Base_SetConfig+0xb2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a2e      	ldr	r2, [pc, #184]	; (8003ce4 <TIM_Base_SetConfig+0x140>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d013      	beq.n	8003c56 <TIM_Base_SetConfig+0xb2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a2d      	ldr	r2, [pc, #180]	; (8003ce8 <TIM_Base_SetConfig+0x144>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00f      	beq.n	8003c56 <TIM_Base_SetConfig+0xb2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a2c      	ldr	r2, [pc, #176]	; (8003cec <TIM_Base_SetConfig+0x148>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00b      	beq.n	8003c56 <TIM_Base_SetConfig+0xb2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a2b      	ldr	r2, [pc, #172]	; (8003cf0 <TIM_Base_SetConfig+0x14c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d007      	beq.n	8003c56 <TIM_Base_SetConfig+0xb2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a2a      	ldr	r2, [pc, #168]	; (8003cf4 <TIM_Base_SetConfig+0x150>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d003      	beq.n	8003c56 <TIM_Base_SetConfig+0xb2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a29      	ldr	r2, [pc, #164]	; (8003cf8 <TIM_Base_SetConfig+0x154>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d108      	bne.n	8003c68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a10      	ldr	r2, [pc, #64]	; (8003cd0 <TIM_Base_SetConfig+0x12c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d003      	beq.n	8003c9c <TIM_Base_SetConfig+0xf8>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a12      	ldr	r2, [pc, #72]	; (8003ce0 <TIM_Base_SetConfig+0x13c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d103      	bne.n	8003ca4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d105      	bne.n	8003cc2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f023 0201 	bic.w	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	611a      	str	r2, [r3, #16]
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40010000 	.word	0x40010000
 8003cd4:	40000400 	.word	0x40000400
 8003cd8:	40000800 	.word	0x40000800
 8003cdc:	40000c00 	.word	0x40000c00
 8003ce0:	40010400 	.word	0x40010400
 8003ce4:	40014000 	.word	0x40014000
 8003ce8:	40014400 	.word	0x40014400
 8003cec:	40014800 	.word	0x40014800
 8003cf0:	40001800 	.word	0x40001800
 8003cf4:	40001c00 	.word	0x40001c00
 8003cf8:	40002000 	.word	0x40002000

08003cfc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e042      	b.n	8003dbc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fd fc76 	bl	800163c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2224      	movs	r2, #36	; 0x24
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f82b 	bl	8003dc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695a      	ldr	r2, [r3, #20]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dc8:	b0c0      	sub	sp, #256	; 0x100
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de0:	68d9      	ldr	r1, [r3, #12]
 8003de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	ea40 0301 	orr.w	r3, r0, r1
 8003dec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e1c:	f021 010c 	bic.w	r1, r1, #12
 8003e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e2a:	430b      	orrs	r3, r1
 8003e2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3e:	6999      	ldr	r1, [r3, #24]
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	ea40 0301 	orr.w	r3, r0, r1
 8003e4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4b8f      	ldr	r3, [pc, #572]	; (8004090 <UART_SetConfig+0x2cc>)
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d005      	beq.n	8003e64 <UART_SetConfig+0xa0>
 8003e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	4b8d      	ldr	r3, [pc, #564]	; (8004094 <UART_SetConfig+0x2d0>)
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d104      	bne.n	8003e6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e64:	f7fe ffa8 	bl	8002db8 <HAL_RCC_GetPCLK2Freq>
 8003e68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e6c:	e003      	b.n	8003e76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e6e:	f7fe ff8f 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 8003e72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e80:	f040 810c 	bne.w	800409c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e96:	4622      	mov	r2, r4
 8003e98:	462b      	mov	r3, r5
 8003e9a:	1891      	adds	r1, r2, r2
 8003e9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e9e:	415b      	adcs	r3, r3
 8003ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ea2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ea6:	4621      	mov	r1, r4
 8003ea8:	eb12 0801 	adds.w	r8, r2, r1
 8003eac:	4629      	mov	r1, r5
 8003eae:	eb43 0901 	adc.w	r9, r3, r1
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ebe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ec2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ec6:	4690      	mov	r8, r2
 8003ec8:	4699      	mov	r9, r3
 8003eca:	4623      	mov	r3, r4
 8003ecc:	eb18 0303 	adds.w	r3, r8, r3
 8003ed0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ed4:	462b      	mov	r3, r5
 8003ed6:	eb49 0303 	adc.w	r3, r9, r3
 8003eda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003eea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003eee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	18db      	adds	r3, r3, r3
 8003ef6:	653b      	str	r3, [r7, #80]	; 0x50
 8003ef8:	4613      	mov	r3, r2
 8003efa:	eb42 0303 	adc.w	r3, r2, r3
 8003efe:	657b      	str	r3, [r7, #84]	; 0x54
 8003f00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f08:	f7fc f9d2 	bl	80002b0 <__aeabi_uldivmod>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4b61      	ldr	r3, [pc, #388]	; (8004098 <UART_SetConfig+0x2d4>)
 8003f12:	fba3 2302 	umull	r2, r3, r3, r2
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	011c      	lsls	r4, r3, #4
 8003f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f2c:	4642      	mov	r2, r8
 8003f2e:	464b      	mov	r3, r9
 8003f30:	1891      	adds	r1, r2, r2
 8003f32:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f34:	415b      	adcs	r3, r3
 8003f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f3c:	4641      	mov	r1, r8
 8003f3e:	eb12 0a01 	adds.w	sl, r2, r1
 8003f42:	4649      	mov	r1, r9
 8003f44:	eb43 0b01 	adc.w	fp, r3, r1
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f5c:	4692      	mov	sl, r2
 8003f5e:	469b      	mov	fp, r3
 8003f60:	4643      	mov	r3, r8
 8003f62:	eb1a 0303 	adds.w	r3, sl, r3
 8003f66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f6a:	464b      	mov	r3, r9
 8003f6c:	eb4b 0303 	adc.w	r3, fp, r3
 8003f70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	18db      	adds	r3, r3, r3
 8003f8c:	643b      	str	r3, [r7, #64]	; 0x40
 8003f8e:	4613      	mov	r3, r2
 8003f90:	eb42 0303 	adc.w	r3, r2, r3
 8003f94:	647b      	str	r3, [r7, #68]	; 0x44
 8003f96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f9e:	f7fc f987 	bl	80002b0 <__aeabi_uldivmod>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	4b3b      	ldr	r3, [pc, #236]	; (8004098 <UART_SetConfig+0x2d4>)
 8003faa:	fba3 2301 	umull	r2, r3, r3, r1
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	2264      	movs	r2, #100	; 0x64
 8003fb2:	fb02 f303 	mul.w	r3, r2, r3
 8003fb6:	1acb      	subs	r3, r1, r3
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003fbe:	4b36      	ldr	r3, [pc, #216]	; (8004098 <UART_SetConfig+0x2d4>)
 8003fc0:	fba3 2302 	umull	r2, r3, r3, r2
 8003fc4:	095b      	lsrs	r3, r3, #5
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fcc:	441c      	add	r4, r3
 8003fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fd8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003fdc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003fe0:	4642      	mov	r2, r8
 8003fe2:	464b      	mov	r3, r9
 8003fe4:	1891      	adds	r1, r2, r2
 8003fe6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fe8:	415b      	adcs	r3, r3
 8003fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ff0:	4641      	mov	r1, r8
 8003ff2:	1851      	adds	r1, r2, r1
 8003ff4:	6339      	str	r1, [r7, #48]	; 0x30
 8003ff6:	4649      	mov	r1, r9
 8003ff8:	414b      	adcs	r3, r1
 8003ffa:	637b      	str	r3, [r7, #52]	; 0x34
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004008:	4659      	mov	r1, fp
 800400a:	00cb      	lsls	r3, r1, #3
 800400c:	4651      	mov	r1, sl
 800400e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004012:	4651      	mov	r1, sl
 8004014:	00ca      	lsls	r2, r1, #3
 8004016:	4610      	mov	r0, r2
 8004018:	4619      	mov	r1, r3
 800401a:	4603      	mov	r3, r0
 800401c:	4642      	mov	r2, r8
 800401e:	189b      	adds	r3, r3, r2
 8004020:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004024:	464b      	mov	r3, r9
 8004026:	460a      	mov	r2, r1
 8004028:	eb42 0303 	adc.w	r3, r2, r3
 800402c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800403c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004040:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004044:	460b      	mov	r3, r1
 8004046:	18db      	adds	r3, r3, r3
 8004048:	62bb      	str	r3, [r7, #40]	; 0x28
 800404a:	4613      	mov	r3, r2
 800404c:	eb42 0303 	adc.w	r3, r2, r3
 8004050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004052:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004056:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800405a:	f7fc f929 	bl	80002b0 <__aeabi_uldivmod>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <UART_SetConfig+0x2d4>)
 8004064:	fba3 1302 	umull	r1, r3, r3, r2
 8004068:	095b      	lsrs	r3, r3, #5
 800406a:	2164      	movs	r1, #100	; 0x64
 800406c:	fb01 f303 	mul.w	r3, r1, r3
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	3332      	adds	r3, #50	; 0x32
 8004076:	4a08      	ldr	r2, [pc, #32]	; (8004098 <UART_SetConfig+0x2d4>)
 8004078:	fba2 2303 	umull	r2, r3, r2, r3
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	f003 0207 	and.w	r2, r3, #7
 8004082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4422      	add	r2, r4
 800408a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800408c:	e106      	b.n	800429c <UART_SetConfig+0x4d8>
 800408e:	bf00      	nop
 8004090:	40011000 	.word	0x40011000
 8004094:	40011400 	.word	0x40011400
 8004098:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800409c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040a0:	2200      	movs	r2, #0
 80040a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80040a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80040aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80040ae:	4642      	mov	r2, r8
 80040b0:	464b      	mov	r3, r9
 80040b2:	1891      	adds	r1, r2, r2
 80040b4:	6239      	str	r1, [r7, #32]
 80040b6:	415b      	adcs	r3, r3
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
 80040ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040be:	4641      	mov	r1, r8
 80040c0:	1854      	adds	r4, r2, r1
 80040c2:	4649      	mov	r1, r9
 80040c4:	eb43 0501 	adc.w	r5, r3, r1
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	00eb      	lsls	r3, r5, #3
 80040d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040d6:	00e2      	lsls	r2, r4, #3
 80040d8:	4614      	mov	r4, r2
 80040da:	461d      	mov	r5, r3
 80040dc:	4643      	mov	r3, r8
 80040de:	18e3      	adds	r3, r4, r3
 80040e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040e4:	464b      	mov	r3, r9
 80040e6:	eb45 0303 	adc.w	r3, r5, r3
 80040ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800410a:	4629      	mov	r1, r5
 800410c:	008b      	lsls	r3, r1, #2
 800410e:	4621      	mov	r1, r4
 8004110:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004114:	4621      	mov	r1, r4
 8004116:	008a      	lsls	r2, r1, #2
 8004118:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800411c:	f7fc f8c8 	bl	80002b0 <__aeabi_uldivmod>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	4b60      	ldr	r3, [pc, #384]	; (80042a8 <UART_SetConfig+0x4e4>)
 8004126:	fba3 2302 	umull	r2, r3, r3, r2
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	011c      	lsls	r4, r3, #4
 800412e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004132:	2200      	movs	r2, #0
 8004134:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004138:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800413c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004140:	4642      	mov	r2, r8
 8004142:	464b      	mov	r3, r9
 8004144:	1891      	adds	r1, r2, r2
 8004146:	61b9      	str	r1, [r7, #24]
 8004148:	415b      	adcs	r3, r3
 800414a:	61fb      	str	r3, [r7, #28]
 800414c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004150:	4641      	mov	r1, r8
 8004152:	1851      	adds	r1, r2, r1
 8004154:	6139      	str	r1, [r7, #16]
 8004156:	4649      	mov	r1, r9
 8004158:	414b      	adcs	r3, r1
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	f04f 0300 	mov.w	r3, #0
 8004164:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004168:	4659      	mov	r1, fp
 800416a:	00cb      	lsls	r3, r1, #3
 800416c:	4651      	mov	r1, sl
 800416e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004172:	4651      	mov	r1, sl
 8004174:	00ca      	lsls	r2, r1, #3
 8004176:	4610      	mov	r0, r2
 8004178:	4619      	mov	r1, r3
 800417a:	4603      	mov	r3, r0
 800417c:	4642      	mov	r2, r8
 800417e:	189b      	adds	r3, r3, r2
 8004180:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004184:	464b      	mov	r3, r9
 8004186:	460a      	mov	r2, r1
 8004188:	eb42 0303 	adc.w	r3, r2, r3
 800418c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	67bb      	str	r3, [r7, #120]	; 0x78
 800419a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	f04f 0300 	mov.w	r3, #0
 80041a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80041a8:	4649      	mov	r1, r9
 80041aa:	008b      	lsls	r3, r1, #2
 80041ac:	4641      	mov	r1, r8
 80041ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041b2:	4641      	mov	r1, r8
 80041b4:	008a      	lsls	r2, r1, #2
 80041b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80041ba:	f7fc f879 	bl	80002b0 <__aeabi_uldivmod>
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	4611      	mov	r1, r2
 80041c4:	4b38      	ldr	r3, [pc, #224]	; (80042a8 <UART_SetConfig+0x4e4>)
 80041c6:	fba3 2301 	umull	r2, r3, r3, r1
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	2264      	movs	r2, #100	; 0x64
 80041ce:	fb02 f303 	mul.w	r3, r2, r3
 80041d2:	1acb      	subs	r3, r1, r3
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	3332      	adds	r3, #50	; 0x32
 80041d8:	4a33      	ldr	r2, [pc, #204]	; (80042a8 <UART_SetConfig+0x4e4>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041e4:	441c      	add	r4, r3
 80041e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041ea:	2200      	movs	r2, #0
 80041ec:	673b      	str	r3, [r7, #112]	; 0x70
 80041ee:	677a      	str	r2, [r7, #116]	; 0x74
 80041f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80041f4:	4642      	mov	r2, r8
 80041f6:	464b      	mov	r3, r9
 80041f8:	1891      	adds	r1, r2, r2
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	415b      	adcs	r3, r3
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004204:	4641      	mov	r1, r8
 8004206:	1851      	adds	r1, r2, r1
 8004208:	6039      	str	r1, [r7, #0]
 800420a:	4649      	mov	r1, r9
 800420c:	414b      	adcs	r3, r1
 800420e:	607b      	str	r3, [r7, #4]
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800421c:	4659      	mov	r1, fp
 800421e:	00cb      	lsls	r3, r1, #3
 8004220:	4651      	mov	r1, sl
 8004222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004226:	4651      	mov	r1, sl
 8004228:	00ca      	lsls	r2, r1, #3
 800422a:	4610      	mov	r0, r2
 800422c:	4619      	mov	r1, r3
 800422e:	4603      	mov	r3, r0
 8004230:	4642      	mov	r2, r8
 8004232:	189b      	adds	r3, r3, r2
 8004234:	66bb      	str	r3, [r7, #104]	; 0x68
 8004236:	464b      	mov	r3, r9
 8004238:	460a      	mov	r2, r1
 800423a:	eb42 0303 	adc.w	r3, r2, r3
 800423e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	663b      	str	r3, [r7, #96]	; 0x60
 800424a:	667a      	str	r2, [r7, #100]	; 0x64
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004258:	4649      	mov	r1, r9
 800425a:	008b      	lsls	r3, r1, #2
 800425c:	4641      	mov	r1, r8
 800425e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004262:	4641      	mov	r1, r8
 8004264:	008a      	lsls	r2, r1, #2
 8004266:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800426a:	f7fc f821 	bl	80002b0 <__aeabi_uldivmod>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	4b0d      	ldr	r3, [pc, #52]	; (80042a8 <UART_SetConfig+0x4e4>)
 8004274:	fba3 1302 	umull	r1, r3, r3, r2
 8004278:	095b      	lsrs	r3, r3, #5
 800427a:	2164      	movs	r1, #100	; 0x64
 800427c:	fb01 f303 	mul.w	r3, r1, r3
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	3332      	adds	r3, #50	; 0x32
 8004286:	4a08      	ldr	r2, [pc, #32]	; (80042a8 <UART_SetConfig+0x4e4>)
 8004288:	fba2 2303 	umull	r2, r3, r2, r3
 800428c:	095b      	lsrs	r3, r3, #5
 800428e:	f003 020f 	and.w	r2, r3, #15
 8004292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4422      	add	r2, r4
 800429a:	609a      	str	r2, [r3, #8]
}
 800429c:	bf00      	nop
 800429e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80042a2:	46bd      	mov	sp, r7
 80042a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042a8:	51eb851f 	.word	0x51eb851f

080042ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	4603      	mov	r3, r0
 80042b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80042b6:	2300      	movs	r3, #0
 80042b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80042ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042be:	2b84      	cmp	r3, #132	; 0x84
 80042c0:	d005      	beq.n	80042ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80042c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4413      	add	r3, r2
 80042ca:	3303      	adds	r3, #3
 80042cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80042ce:	68fb      	ldr	r3, [r7, #12]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80042e0:	f000 ff30 	bl	8005144 <vTaskStartScheduler>
  
  return osOK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	bd80      	pop	{r7, pc}

080042ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80042ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ec:	b089      	sub	sp, #36	; 0x24
 80042ee:	af04      	add	r7, sp, #16
 80042f0:	6078      	str	r0, [r7, #4]
 80042f2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d020      	beq.n	800433e <osThreadCreate+0x54>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01c      	beq.n	800433e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685c      	ldr	r4, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691e      	ldr	r6, [r3, #16]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff ffc8 	bl	80042ac <makeFreeRtosPriority>
 800431c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004326:	9202      	str	r2, [sp, #8]
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	9100      	str	r1, [sp, #0]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	4632      	mov	r2, r6
 8004330:	4629      	mov	r1, r5
 8004332:	4620      	mov	r0, r4
 8004334:	f000 fd3e 	bl	8004db4 <xTaskCreateStatic>
 8004338:	4603      	mov	r3, r0
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	e01c      	b.n	8004378 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685c      	ldr	r4, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800434a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004352:	4618      	mov	r0, r3
 8004354:	f7ff ffaa 	bl	80042ac <makeFreeRtosPriority>
 8004358:	4602      	mov	r2, r0
 800435a:	f107 030c 	add.w	r3, r7, #12
 800435e:	9301      	str	r3, [sp, #4]
 8004360:	9200      	str	r2, [sp, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	4632      	mov	r2, r6
 8004366:	4629      	mov	r1, r5
 8004368:	4620      	mov	r0, r4
 800436a:	f000 fd80 	bl	8004e6e <xTaskCreate>
 800436e:	4603      	mov	r3, r0
 8004370:	2b01      	cmp	r3, #1
 8004372:	d001      	beq.n	8004378 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004374:	2300      	movs	r3, #0
 8004376:	e000      	b.n	800437a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004378:	68fb      	ldr	r3, [r7, #12]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004382 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b084      	sub	sp, #16
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <osDelay+0x16>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	e000      	b.n	800439a <osDelay+0x18>
 8004398:	2301      	movs	r3, #1
 800439a:	4618      	mov	r0, r3
 800439c:	f000 fe9e 	bl	80050dc <vTaskDelay>
  
  return osOK;
 80043a0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80043aa:	b590      	push	{r4, r7, lr}
 80043ac:	b085      	sub	sp, #20
 80043ae:	af02      	add	r7, sp, #8
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d011      	beq.n	80043e0 <osMessageCreate+0x36>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00d      	beq.n	80043e0 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6818      	ldr	r0, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6859      	ldr	r1, [r3, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	2400      	movs	r4, #0
 80043d6:	9400      	str	r4, [sp, #0]
 80043d8:	f000 f92c 	bl	8004634 <xQueueGenericCreateStatic>
 80043dc:	4603      	mov	r3, r0
 80043de:	e008      	b.n	80043f2 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6818      	ldr	r0, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	4619      	mov	r1, r3
 80043ec:	f000 f99a 	bl	8004724 <xQueueGenericCreate>
 80043f0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd90      	pop	{r4, r7, pc}

080043fa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f103 0208 	add.w	r2, r3, #8
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f04f 32ff 	mov.w	r2, #4294967295
 8004412:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f103 0208 	add.w	r2, r3, #8
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f103 0208 	add.w	r2, r3, #8
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	601a      	str	r2, [r3, #0]
}
 8004490:	bf00      	nop
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b2:	d103      	bne.n	80044bc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	e00c      	b.n	80044d6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3308      	adds	r3, #8
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	e002      	b.n	80044ca <vListInsert+0x2e>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d2f6      	bcs.n	80044c4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	601a      	str	r2, [r3, #0]
}
 8004502:	bf00      	nop
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800450e:	b480      	push	{r7}
 8004510:	b085      	sub	sp, #20
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6892      	ldr	r2, [r2, #8]
 8004524:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6852      	ldr	r2, [r2, #4]
 800452e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	429a      	cmp	r2, r3
 8004538:	d103      	bne.n	8004542 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	1e5a      	subs	r2, r3, #1
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
	...

08004564 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10a      	bne.n	800458e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800458a:	bf00      	nop
 800458c:	e7fe      	b.n	800458c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800458e:	f001 fc11 	bl	8005db4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459a:	68f9      	ldr	r1, [r7, #12]
 800459c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800459e:	fb01 f303 	mul.w	r3, r1, r3
 80045a2:	441a      	add	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045be:	3b01      	subs	r3, #1
 80045c0:	68f9      	ldr	r1, [r7, #12]
 80045c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80045c4:	fb01 f303 	mul.w	r3, r1, r3
 80045c8:	441a      	add	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	22ff      	movs	r2, #255	; 0xff
 80045d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	22ff      	movs	r2, #255	; 0xff
 80045da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d114      	bne.n	800460e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d01a      	beq.n	8004622 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	3310      	adds	r3, #16
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 ffe9 	bl	80055c8 <xTaskRemoveFromEventList>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d012      	beq.n	8004622 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80045fc:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <xQueueGenericReset+0xcc>)
 80045fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	e009      	b.n	8004622 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3310      	adds	r3, #16
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff fef1 	bl	80043fa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	3324      	adds	r3, #36	; 0x24
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff feec 	bl	80043fa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004622:	f001 fbf7 	bl	8005e14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004626:	2301      	movs	r3, #1
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	e000ed04 	.word	0xe000ed04

08004634 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08e      	sub	sp, #56	; 0x38
 8004638:	af02      	add	r7, sp, #8
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10a      	bne.n	800465e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800465a:	bf00      	nop
 800465c:	e7fe      	b.n	800465c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004676:	bf00      	nop
 8004678:	e7fe      	b.n	8004678 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <xQueueGenericCreateStatic+0x52>
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <xQueueGenericCreateStatic+0x56>
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <xQueueGenericCreateStatic+0x58>
 800468a:	2300      	movs	r3, #0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10a      	bne.n	80046a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	623b      	str	r3, [r7, #32]
}
 80046a2:	bf00      	nop
 80046a4:	e7fe      	b.n	80046a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <xQueueGenericCreateStatic+0x7e>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <xQueueGenericCreateStatic+0x82>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <xQueueGenericCreateStatic+0x84>
 80046b6:	2300      	movs	r3, #0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10a      	bne.n	80046d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	61fb      	str	r3, [r7, #28]
}
 80046ce:	bf00      	nop
 80046d0:	e7fe      	b.n	80046d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80046d2:	2348      	movs	r3, #72	; 0x48
 80046d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2b48      	cmp	r3, #72	; 0x48
 80046da:	d00a      	beq.n	80046f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80046dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	61bb      	str	r3, [r7, #24]
}
 80046ee:	bf00      	nop
 80046f0:	e7fe      	b.n	80046f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80046f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80046f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00d      	beq.n	800471a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80046fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004706:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800470a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	4613      	mov	r3, r2
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	68b9      	ldr	r1, [r7, #8]
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f83f 	bl	8004798 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800471a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800471c:	4618      	mov	r0, r3
 800471e:	3730      	adds	r7, #48	; 0x30
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08a      	sub	sp, #40	; 0x28
 8004728:	af02      	add	r7, sp, #8
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	4613      	mov	r3, r2
 8004730:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10a      	bne.n	800474e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	613b      	str	r3, [r7, #16]
}
 800474a:	bf00      	nop
 800474c:	e7fe      	b.n	800474c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	fb02 f303 	mul.w	r3, r2, r3
 8004756:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	3348      	adds	r3, #72	; 0x48
 800475c:	4618      	mov	r0, r3
 800475e:	f001 fc0b 	bl	8005f78 <pvPortMalloc>
 8004762:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d011      	beq.n	800478e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	3348      	adds	r3, #72	; 0x48
 8004772:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800477c:	79fa      	ldrb	r2, [r7, #7]
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	4613      	mov	r3, r2
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	68b9      	ldr	r1, [r7, #8]
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 f805 	bl	8004798 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800478e:	69bb      	ldr	r3, [r7, #24]
	}
 8004790:	4618      	mov	r0, r3
 8004792:	3720      	adds	r7, #32
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d103      	bne.n	80047b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	e002      	b.n	80047ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80047c6:	2101      	movs	r1, #1
 80047c8:	69b8      	ldr	r0, [r7, #24]
 80047ca:	f7ff fecb 	bl	8004564 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80047ce:	bf00      	nop
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
	...

080047d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08e      	sub	sp, #56	; 0x38
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80047e6:	2300      	movs	r3, #0
 80047e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80047ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10a      	bne.n	800480a <xQueueGenericSend+0x32>
	__asm volatile
 80047f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004806:	bf00      	nop
 8004808:	e7fe      	b.n	8004808 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d103      	bne.n	8004818 <xQueueGenericSend+0x40>
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <xQueueGenericSend+0x44>
 8004818:	2301      	movs	r3, #1
 800481a:	e000      	b.n	800481e <xQueueGenericSend+0x46>
 800481c:	2300      	movs	r3, #0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10a      	bne.n	8004838 <xQueueGenericSend+0x60>
	__asm volatile
 8004822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004834:	bf00      	nop
 8004836:	e7fe      	b.n	8004836 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	2b02      	cmp	r3, #2
 800483c:	d103      	bne.n	8004846 <xQueueGenericSend+0x6e>
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004842:	2b01      	cmp	r3, #1
 8004844:	d101      	bne.n	800484a <xQueueGenericSend+0x72>
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <xQueueGenericSend+0x74>
 800484a:	2300      	movs	r3, #0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10a      	bne.n	8004866 <xQueueGenericSend+0x8e>
	__asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	623b      	str	r3, [r7, #32]
}
 8004862:	bf00      	nop
 8004864:	e7fe      	b.n	8004864 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004866:	f001 f86b 	bl	8005940 <xTaskGetSchedulerState>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d102      	bne.n	8004876 <xQueueGenericSend+0x9e>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <xQueueGenericSend+0xa2>
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <xQueueGenericSend+0xa4>
 800487a:	2300      	movs	r3, #0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10a      	bne.n	8004896 <xQueueGenericSend+0xbe>
	__asm volatile
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	61fb      	str	r3, [r7, #28]
}
 8004892:	bf00      	nop
 8004894:	e7fe      	b.n	8004894 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004896:	f001 fa8d 	bl	8005db4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800489e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d302      	bcc.n	80048ac <xQueueGenericSend+0xd4>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d129      	bne.n	8004900 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	68b9      	ldr	r1, [r7, #8]
 80048b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048b2:	f000 f96f 	bl	8004b94 <prvCopyDataToQueue>
 80048b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d010      	beq.n	80048e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c2:	3324      	adds	r3, #36	; 0x24
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fe7f 	bl	80055c8 <xTaskRemoveFromEventList>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d013      	beq.n	80048f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80048d0:	4b3f      	ldr	r3, [pc, #252]	; (80049d0 <xQueueGenericSend+0x1f8>)
 80048d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	e00a      	b.n	80048f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80048e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d007      	beq.n	80048f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80048e8:	4b39      	ldr	r3, [pc, #228]	; (80049d0 <xQueueGenericSend+0x1f8>)
 80048ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80048f8:	f001 fa8c 	bl	8005e14 <vPortExitCritical>
				return pdPASS;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e063      	b.n	80049c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d103      	bne.n	800490e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004906:	f001 fa85 	bl	8005e14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800490a:	2300      	movs	r3, #0
 800490c:	e05c      	b.n	80049c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800490e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004910:	2b00      	cmp	r3, #0
 8004912:	d106      	bne.n	8004922 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004914:	f107 0314 	add.w	r3, r7, #20
 8004918:	4618      	mov	r0, r3
 800491a:	f000 feb7 	bl	800568c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800491e:	2301      	movs	r3, #1
 8004920:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004922:	f001 fa77 	bl	8005e14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004926:	f000 fc6d 	bl	8005204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800492a:	f001 fa43 	bl	8005db4 <vPortEnterCritical>
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004934:	b25b      	sxtb	r3, r3
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493a:	d103      	bne.n	8004944 <xQueueGenericSend+0x16c>
 800493c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004946:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800494a:	b25b      	sxtb	r3, r3
 800494c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004950:	d103      	bne.n	800495a <xQueueGenericSend+0x182>
 8004952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800495a:	f001 fa5b 	bl	8005e14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800495e:	1d3a      	adds	r2, r7, #4
 8004960:	f107 0314 	add.w	r3, r7, #20
 8004964:	4611      	mov	r1, r2
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fea6 	bl	80056b8 <xTaskCheckForTimeOut>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d124      	bne.n	80049bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004972:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004974:	f000 fa06 	bl	8004d84 <prvIsQueueFull>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d018      	beq.n	80049b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004980:	3310      	adds	r3, #16
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	4611      	mov	r1, r2
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fdfa 	bl	8005580 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800498c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800498e:	f000 f991 	bl	8004cb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004992:	f000 fc45 	bl	8005220 <xTaskResumeAll>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	f47f af7c 	bne.w	8004896 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800499e:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <xQueueGenericSend+0x1f8>)
 80049a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	e772      	b.n	8004896 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80049b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049b2:	f000 f97f 	bl	8004cb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049b6:	f000 fc33 	bl	8005220 <xTaskResumeAll>
 80049ba:	e76c      	b.n	8004896 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80049bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049be:	f000 f979 	bl	8004cb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049c2:	f000 fc2d 	bl	8005220 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80049c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3738      	adds	r7, #56	; 0x38
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	e000ed04 	.word	0xe000ed04

080049d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b08c      	sub	sp, #48	; 0x30
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80049e0:	2300      	movs	r3, #0
 80049e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10a      	bne.n	8004a04 <xQueueReceive+0x30>
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	623b      	str	r3, [r7, #32]
}
 8004a00:	bf00      	nop
 8004a02:	e7fe      	b.n	8004a02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d103      	bne.n	8004a12 <xQueueReceive+0x3e>
 8004a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <xQueueReceive+0x42>
 8004a12:	2301      	movs	r3, #1
 8004a14:	e000      	b.n	8004a18 <xQueueReceive+0x44>
 8004a16:	2300      	movs	r3, #0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10a      	bne.n	8004a32 <xQueueReceive+0x5e>
	__asm volatile
 8004a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	61fb      	str	r3, [r7, #28]
}
 8004a2e:	bf00      	nop
 8004a30:	e7fe      	b.n	8004a30 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a32:	f000 ff85 	bl	8005940 <xTaskGetSchedulerState>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d102      	bne.n	8004a42 <xQueueReceive+0x6e>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <xQueueReceive+0x72>
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <xQueueReceive+0x74>
 8004a46:	2300      	movs	r3, #0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10a      	bne.n	8004a62 <xQueueReceive+0x8e>
	__asm volatile
 8004a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	61bb      	str	r3, [r7, #24]
}
 8004a5e:	bf00      	nop
 8004a60:	e7fe      	b.n	8004a60 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a62:	f001 f9a7 	bl	8005db4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d01f      	beq.n	8004ab2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a72:	68b9      	ldr	r1, [r7, #8]
 8004a74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a76:	f000 f8f7 	bl	8004c68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	1e5a      	subs	r2, r3, #1
 8004a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00f      	beq.n	8004aaa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	3310      	adds	r3, #16
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fd9a 	bl	80055c8 <xTaskRemoveFromEventList>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d007      	beq.n	8004aaa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a9a:	4b3d      	ldr	r3, [pc, #244]	; (8004b90 <xQueueReceive+0x1bc>)
 8004a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004aaa:	f001 f9b3 	bl	8005e14 <vPortExitCritical>
				return pdPASS;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e069      	b.n	8004b86 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d103      	bne.n	8004ac0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ab8:	f001 f9ac 	bl	8005e14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004abc:	2300      	movs	r3, #0
 8004abe:	e062      	b.n	8004b86 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d106      	bne.n	8004ad4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ac6:	f107 0310 	add.w	r3, r7, #16
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fdde 	bl	800568c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ad4:	f001 f99e 	bl	8005e14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ad8:	f000 fb94 	bl	8005204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004adc:	f001 f96a 	bl	8005db4 <vPortEnterCritical>
 8004ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ae6:	b25b      	sxtb	r3, r3
 8004ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aec:	d103      	bne.n	8004af6 <xQueueReceive+0x122>
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004afc:	b25b      	sxtb	r3, r3
 8004afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b02:	d103      	bne.n	8004b0c <xQueueReceive+0x138>
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b0c:	f001 f982 	bl	8005e14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b10:	1d3a      	adds	r2, r7, #4
 8004b12:	f107 0310 	add.w	r3, r7, #16
 8004b16:	4611      	mov	r1, r2
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 fdcd 	bl	80056b8 <xTaskCheckForTimeOut>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d123      	bne.n	8004b6c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b26:	f000 f917 	bl	8004d58 <prvIsQueueEmpty>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d017      	beq.n	8004b60 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	3324      	adds	r3, #36	; 0x24
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	4611      	mov	r1, r2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fd21 	bl	8005580 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b40:	f000 f8b8 	bl	8004cb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b44:	f000 fb6c 	bl	8005220 <xTaskResumeAll>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d189      	bne.n	8004a62 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004b4e:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <xQueueReceive+0x1bc>)
 8004b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	e780      	b.n	8004a62 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b62:	f000 f8a7 	bl	8004cb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b66:	f000 fb5b 	bl	8005220 <xTaskResumeAll>
 8004b6a:	e77a      	b.n	8004a62 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b6e:	f000 f8a1 	bl	8004cb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b72:	f000 fb55 	bl	8005220 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b78:	f000 f8ee 	bl	8004d58 <prvIsQueueEmpty>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f43f af6f 	beq.w	8004a62 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3730      	adds	r7, #48	; 0x30
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	e000ed04 	.word	0xe000ed04

08004b94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10d      	bne.n	8004bce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d14d      	bne.n	8004c56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fedc 	bl	800597c <xTaskPriorityDisinherit>
 8004bc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	609a      	str	r2, [r3, #8]
 8004bcc:	e043      	b.n	8004c56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d119      	bne.n	8004c08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6858      	ldr	r0, [r3, #4]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	461a      	mov	r2, r3
 8004bde:	68b9      	ldr	r1, [r7, #8]
 8004be0:	f001 fe5d 	bl	800689e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bec:	441a      	add	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d32b      	bcc.n	8004c56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	605a      	str	r2, [r3, #4]
 8004c06:	e026      	b.n	8004c56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	68d8      	ldr	r0, [r3, #12]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	461a      	mov	r2, r3
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	f001 fe43 	bl	800689e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c20:	425b      	negs	r3, r3
 8004c22:	441a      	add	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d207      	bcs.n	8004c44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3c:	425b      	negs	r3, r3
 8004c3e:	441a      	add	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d105      	bne.n	8004c56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c5e:	697b      	ldr	r3, [r7, #20]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d018      	beq.n	8004cac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	441a      	add	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d303      	bcc.n	8004c9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68d9      	ldr	r1, [r3, #12]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	6838      	ldr	r0, [r7, #0]
 8004ca8:	f001 fdf9 	bl	800689e <memcpy>
	}
}
 8004cac:	bf00      	nop
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004cbc:	f001 f87a 	bl	8005db4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cc8:	e011      	b.n	8004cee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d012      	beq.n	8004cf8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	3324      	adds	r3, #36	; 0x24
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fc76 	bl	80055c8 <xTaskRemoveFromEventList>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ce2:	f000 fd4b 	bl	800577c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	dce9      	bgt.n	8004cca <prvUnlockQueue+0x16>
 8004cf6:	e000      	b.n	8004cfa <prvUnlockQueue+0x46>
					break;
 8004cf8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	22ff      	movs	r2, #255	; 0xff
 8004cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d02:	f001 f887 	bl	8005e14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d06:	f001 f855 	bl	8005db4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d12:	e011      	b.n	8004d38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d012      	beq.n	8004d42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3310      	adds	r3, #16
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fc51 	bl	80055c8 <xTaskRemoveFromEventList>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d2c:	f000 fd26 	bl	800577c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d30:	7bbb      	ldrb	r3, [r7, #14]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	dce9      	bgt.n	8004d14 <prvUnlockQueue+0x60>
 8004d40:	e000      	b.n	8004d44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	22ff      	movs	r2, #255	; 0xff
 8004d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d4c:	f001 f862 	bl	8005e14 <vPortExitCritical>
}
 8004d50:	bf00      	nop
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d60:	f001 f828 	bl	8005db4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d102      	bne.n	8004d72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	e001      	b.n	8004d76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d72:	2300      	movs	r3, #0
 8004d74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d76:	f001 f84d 	bl	8005e14 <vPortExitCritical>

	return xReturn;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d8c:	f001 f812 	bl	8005db4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d102      	bne.n	8004da2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	e001      	b.n	8004da6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004da2:	2300      	movs	r3, #0
 8004da4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004da6:	f001 f835 	bl	8005e14 <vPortExitCritical>

	return xReturn;
 8004daa:	68fb      	ldr	r3, [r7, #12]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b08e      	sub	sp, #56	; 0x38
 8004db8:	af04      	add	r7, sp, #16
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
 8004dc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10a      	bne.n	8004dde <xTaskCreateStatic+0x2a>
	__asm volatile
 8004dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dcc:	f383 8811 	msr	BASEPRI, r3
 8004dd0:	f3bf 8f6f 	isb	sy
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	623b      	str	r3, [r7, #32]
}
 8004dda:	bf00      	nop
 8004ddc:	e7fe      	b.n	8004ddc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10a      	bne.n	8004dfa <xTaskCreateStatic+0x46>
	__asm volatile
 8004de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	61fb      	str	r3, [r7, #28]
}
 8004df6:	bf00      	nop
 8004df8:	e7fe      	b.n	8004df8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004dfa:	2354      	movs	r3, #84	; 0x54
 8004dfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	2b54      	cmp	r3, #84	; 0x54
 8004e02:	d00a      	beq.n	8004e1a <xTaskCreateStatic+0x66>
	__asm volatile
 8004e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	61bb      	str	r3, [r7, #24]
}
 8004e16:	bf00      	nop
 8004e18:	e7fe      	b.n	8004e18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d01e      	beq.n	8004e60 <xTaskCreateStatic+0xac>
 8004e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d01b      	beq.n	8004e60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	2202      	movs	r2, #2
 8004e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	9303      	str	r3, [sp, #12]
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	9302      	str	r3, [sp, #8]
 8004e42:	f107 0314 	add.w	r3, r7, #20
 8004e46:	9301      	str	r3, [sp, #4]
 8004e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	68b9      	ldr	r1, [r7, #8]
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 f850 	bl	8004ef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e5a:	f000 f8d5 	bl	8005008 <prvAddNewTaskToReadyList>
 8004e5e:	e001      	b.n	8004e64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004e60:	2300      	movs	r3, #0
 8004e62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e64:	697b      	ldr	r3, [r7, #20]
	}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3728      	adds	r7, #40	; 0x28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b08c      	sub	sp, #48	; 0x30
 8004e72:	af04      	add	r7, sp, #16
 8004e74:	60f8      	str	r0, [r7, #12]
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	603b      	str	r3, [r7, #0]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e7e:	88fb      	ldrh	r3, [r7, #6]
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4618      	mov	r0, r3
 8004e84:	f001 f878 	bl	8005f78 <pvPortMalloc>
 8004e88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00e      	beq.n	8004eae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e90:	2054      	movs	r0, #84	; 0x54
 8004e92:	f001 f871 	bl	8005f78 <pvPortMalloc>
 8004e96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	631a      	str	r2, [r3, #48]	; 0x30
 8004ea4:	e005      	b.n	8004eb2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ea6:	6978      	ldr	r0, [r7, #20]
 8004ea8:	f001 f932 	bl	8006110 <vPortFree>
 8004eac:	e001      	b.n	8004eb2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d017      	beq.n	8004ee8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ec0:	88fa      	ldrh	r2, [r7, #6]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	9303      	str	r3, [sp, #12]
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	9302      	str	r3, [sp, #8]
 8004eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ecc:	9301      	str	r3, [sp, #4]
 8004ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68b9      	ldr	r1, [r7, #8]
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 f80e 	bl	8004ef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004edc:	69f8      	ldr	r0, [r7, #28]
 8004ede:	f000 f893 	bl	8005008 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	e002      	b.n	8004eee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8004eec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004eee:	69bb      	ldr	r3, [r7, #24]
	}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3720      	adds	r7, #32
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f10:	3b01      	subs	r3, #1
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	f023 0307 	bic.w	r3, r3, #7
 8004f1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	617b      	str	r3, [r7, #20]
}
 8004f3c:	bf00      	nop
 8004f3e:	e7fe      	b.n	8004f3e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d01f      	beq.n	8004f86 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f46:	2300      	movs	r3, #0
 8004f48:	61fb      	str	r3, [r7, #28]
 8004f4a:	e012      	b.n	8004f72 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	4413      	add	r3, r2
 8004f52:	7819      	ldrb	r1, [r3, #0]
 8004f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	4413      	add	r3, r2
 8004f5a:	3334      	adds	r3, #52	; 0x34
 8004f5c:	460a      	mov	r2, r1
 8004f5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	4413      	add	r3, r2
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d006      	beq.n	8004f7a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	61fb      	str	r3, [r7, #28]
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	2b0f      	cmp	r3, #15
 8004f76:	d9e9      	bls.n	8004f4c <prvInitialiseNewTask+0x54>
 8004f78:	e000      	b.n	8004f7c <prvInitialiseNewTask+0x84>
			{
				break;
 8004f7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f84:	e003      	b.n	8004f8e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f90:	2b06      	cmp	r3, #6
 8004f92:	d901      	bls.n	8004f98 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f94:	2306      	movs	r3, #6
 8004f96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fa2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fac:	3304      	adds	r3, #4
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7ff fa43 	bl	800443a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb6:	3318      	adds	r3, #24
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff fa3e 	bl	800443a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc6:	f1c3 0207 	rsb	r2, r3, #7
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	68f9      	ldr	r1, [r7, #12]
 8004fe6:	69b8      	ldr	r0, [r7, #24]
 8004fe8:	f000 fdb4 	bl	8005b54 <pxPortInitialiseStack>
 8004fec:	4602      	mov	r2, r0
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d002      	beq.n	8004ffe <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ffc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ffe:	bf00      	nop
 8005000:	3720      	adds	r7, #32
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005010:	f000 fed0 	bl	8005db4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005014:	4b2a      	ldr	r3, [pc, #168]	; (80050c0 <prvAddNewTaskToReadyList+0xb8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3301      	adds	r3, #1
 800501a:	4a29      	ldr	r2, [pc, #164]	; (80050c0 <prvAddNewTaskToReadyList+0xb8>)
 800501c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800501e:	4b29      	ldr	r3, [pc, #164]	; (80050c4 <prvAddNewTaskToReadyList+0xbc>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005026:	4a27      	ldr	r2, [pc, #156]	; (80050c4 <prvAddNewTaskToReadyList+0xbc>)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800502c:	4b24      	ldr	r3, [pc, #144]	; (80050c0 <prvAddNewTaskToReadyList+0xb8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d110      	bne.n	8005056 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005034:	f000 fbc6 	bl	80057c4 <prvInitialiseTaskLists>
 8005038:	e00d      	b.n	8005056 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800503a:	4b23      	ldr	r3, [pc, #140]	; (80050c8 <prvAddNewTaskToReadyList+0xc0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d109      	bne.n	8005056 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005042:	4b20      	ldr	r3, [pc, #128]	; (80050c4 <prvAddNewTaskToReadyList+0xbc>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504c:	429a      	cmp	r2, r3
 800504e:	d802      	bhi.n	8005056 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005050:	4a1c      	ldr	r2, [pc, #112]	; (80050c4 <prvAddNewTaskToReadyList+0xbc>)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005056:	4b1d      	ldr	r3, [pc, #116]	; (80050cc <prvAddNewTaskToReadyList+0xc4>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	3301      	adds	r3, #1
 800505c:	4a1b      	ldr	r2, [pc, #108]	; (80050cc <prvAddNewTaskToReadyList+0xc4>)
 800505e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005064:	2201      	movs	r2, #1
 8005066:	409a      	lsls	r2, r3
 8005068:	4b19      	ldr	r3, [pc, #100]	; (80050d0 <prvAddNewTaskToReadyList+0xc8>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4313      	orrs	r3, r2
 800506e:	4a18      	ldr	r2, [pc, #96]	; (80050d0 <prvAddNewTaskToReadyList+0xc8>)
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005076:	4613      	mov	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4a15      	ldr	r2, [pc, #84]	; (80050d4 <prvAddNewTaskToReadyList+0xcc>)
 8005080:	441a      	add	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3304      	adds	r3, #4
 8005086:	4619      	mov	r1, r3
 8005088:	4610      	mov	r0, r2
 800508a:	f7ff f9e3 	bl	8004454 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800508e:	f000 fec1 	bl	8005e14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005092:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <prvAddNewTaskToReadyList+0xc0>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00e      	beq.n	80050b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800509a:	4b0a      	ldr	r3, [pc, #40]	; (80050c4 <prvAddNewTaskToReadyList+0xbc>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d207      	bcs.n	80050b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050a8:	4b0b      	ldr	r3, [pc, #44]	; (80050d8 <prvAddNewTaskToReadyList+0xd0>)
 80050aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050b8:	bf00      	nop
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	20000904 	.word	0x20000904
 80050c4:	20000804 	.word	0x20000804
 80050c8:	20000910 	.word	0x20000910
 80050cc:	20000920 	.word	0x20000920
 80050d0:	2000090c 	.word	0x2000090c
 80050d4:	20000808 	.word	0x20000808
 80050d8:	e000ed04 	.word	0xe000ed04

080050dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80050e4:	2300      	movs	r3, #0
 80050e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d017      	beq.n	800511e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050ee:	4b13      	ldr	r3, [pc, #76]	; (800513c <vTaskDelay+0x60>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <vTaskDelay+0x30>
	__asm volatile
 80050f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	60bb      	str	r3, [r7, #8]
}
 8005108:	bf00      	nop
 800510a:	e7fe      	b.n	800510a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800510c:	f000 f87a 	bl	8005204 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005110:	2100      	movs	r1, #0
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fcb8 	bl	8005a88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005118:	f000 f882 	bl	8005220 <xTaskResumeAll>
 800511c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d107      	bne.n	8005134 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005124:	4b06      	ldr	r3, [pc, #24]	; (8005140 <vTaskDelay+0x64>)
 8005126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005134:	bf00      	nop
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	2000092c 	.word	0x2000092c
 8005140:	e000ed04 	.word	0xe000ed04

08005144 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b08a      	sub	sp, #40	; 0x28
 8005148:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800514a:	2300      	movs	r3, #0
 800514c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800514e:	2300      	movs	r3, #0
 8005150:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005152:	463a      	mov	r2, r7
 8005154:	1d39      	adds	r1, r7, #4
 8005156:	f107 0308 	add.w	r3, r7, #8
 800515a:	4618      	mov	r0, r3
 800515c:	f7fb fbda 	bl	8000914 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005160:	6839      	ldr	r1, [r7, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	9202      	str	r2, [sp, #8]
 8005168:	9301      	str	r3, [sp, #4]
 800516a:	2300      	movs	r3, #0
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	2300      	movs	r3, #0
 8005170:	460a      	mov	r2, r1
 8005172:	491e      	ldr	r1, [pc, #120]	; (80051ec <vTaskStartScheduler+0xa8>)
 8005174:	481e      	ldr	r0, [pc, #120]	; (80051f0 <vTaskStartScheduler+0xac>)
 8005176:	f7ff fe1d 	bl	8004db4 <xTaskCreateStatic>
 800517a:	4603      	mov	r3, r0
 800517c:	4a1d      	ldr	r2, [pc, #116]	; (80051f4 <vTaskStartScheduler+0xb0>)
 800517e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005180:	4b1c      	ldr	r3, [pc, #112]	; (80051f4 <vTaskStartScheduler+0xb0>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005188:	2301      	movs	r3, #1
 800518a:	617b      	str	r3, [r7, #20]
 800518c:	e001      	b.n	8005192 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800518e:	2300      	movs	r3, #0
 8005190:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d116      	bne.n	80051c6 <vTaskStartScheduler+0x82>
	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	613b      	str	r3, [r7, #16]
}
 80051aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051ac:	4b12      	ldr	r3, [pc, #72]	; (80051f8 <vTaskStartScheduler+0xb4>)
 80051ae:	f04f 32ff 	mov.w	r2, #4294967295
 80051b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051b4:	4b11      	ldr	r3, [pc, #68]	; (80051fc <vTaskStartScheduler+0xb8>)
 80051b6:	2201      	movs	r2, #1
 80051b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80051ba:	4b11      	ldr	r3, [pc, #68]	; (8005200 <vTaskStartScheduler+0xbc>)
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051c0:	f000 fd56 	bl	8005c70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051c4:	e00e      	b.n	80051e4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051cc:	d10a      	bne.n	80051e4 <vTaskStartScheduler+0xa0>
	__asm volatile
 80051ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	60fb      	str	r3, [r7, #12]
}
 80051e0:	bf00      	nop
 80051e2:	e7fe      	b.n	80051e2 <vTaskStartScheduler+0x9e>
}
 80051e4:	bf00      	nop
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	080073d8 	.word	0x080073d8
 80051f0:	08005795 	.word	0x08005795
 80051f4:	20000928 	.word	0x20000928
 80051f8:	20000924 	.word	0x20000924
 80051fc:	20000910 	.word	0x20000910
 8005200:	20000908 	.word	0x20000908

08005204 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005208:	4b04      	ldr	r3, [pc, #16]	; (800521c <vTaskSuspendAll+0x18>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3301      	adds	r3, #1
 800520e:	4a03      	ldr	r2, [pc, #12]	; (800521c <vTaskSuspendAll+0x18>)
 8005210:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005212:	bf00      	nop
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	2000092c 	.word	0x2000092c

08005220 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005226:	2300      	movs	r3, #0
 8005228:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800522a:	2300      	movs	r3, #0
 800522c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800522e:	4b41      	ldr	r3, [pc, #260]	; (8005334 <xTaskResumeAll+0x114>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10a      	bne.n	800524c <xTaskResumeAll+0x2c>
	__asm volatile
 8005236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	603b      	str	r3, [r7, #0]
}
 8005248:	bf00      	nop
 800524a:	e7fe      	b.n	800524a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800524c:	f000 fdb2 	bl	8005db4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005250:	4b38      	ldr	r3, [pc, #224]	; (8005334 <xTaskResumeAll+0x114>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3b01      	subs	r3, #1
 8005256:	4a37      	ldr	r2, [pc, #220]	; (8005334 <xTaskResumeAll+0x114>)
 8005258:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800525a:	4b36      	ldr	r3, [pc, #216]	; (8005334 <xTaskResumeAll+0x114>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d161      	bne.n	8005326 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005262:	4b35      	ldr	r3, [pc, #212]	; (8005338 <xTaskResumeAll+0x118>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d05d      	beq.n	8005326 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800526a:	e02e      	b.n	80052ca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800526c:	4b33      	ldr	r3, [pc, #204]	; (800533c <xTaskResumeAll+0x11c>)
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3318      	adds	r3, #24
 8005278:	4618      	mov	r0, r3
 800527a:	f7ff f948 	bl	800450e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3304      	adds	r3, #4
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff f943 	bl	800450e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528c:	2201      	movs	r2, #1
 800528e:	409a      	lsls	r2, r3
 8005290:	4b2b      	ldr	r3, [pc, #172]	; (8005340 <xTaskResumeAll+0x120>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4313      	orrs	r3, r2
 8005296:	4a2a      	ldr	r2, [pc, #168]	; (8005340 <xTaskResumeAll+0x120>)
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800529e:	4613      	mov	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4a27      	ldr	r2, [pc, #156]	; (8005344 <xTaskResumeAll+0x124>)
 80052a8:	441a      	add	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	3304      	adds	r3, #4
 80052ae:	4619      	mov	r1, r3
 80052b0:	4610      	mov	r0, r2
 80052b2:	f7ff f8cf 	bl	8004454 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ba:	4b23      	ldr	r3, [pc, #140]	; (8005348 <xTaskResumeAll+0x128>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d302      	bcc.n	80052ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80052c4:	4b21      	ldr	r3, [pc, #132]	; (800534c <xTaskResumeAll+0x12c>)
 80052c6:	2201      	movs	r2, #1
 80052c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052ca:	4b1c      	ldr	r3, [pc, #112]	; (800533c <xTaskResumeAll+0x11c>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1cc      	bne.n	800526c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052d8:	f000 fb12 	bl	8005900 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80052dc:	4b1c      	ldr	r3, [pc, #112]	; (8005350 <xTaskResumeAll+0x130>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d010      	beq.n	800530a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052e8:	f000 f836 	bl	8005358 <xTaskIncrementTick>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d002      	beq.n	80052f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80052f2:	4b16      	ldr	r3, [pc, #88]	; (800534c <xTaskResumeAll+0x12c>)
 80052f4:	2201      	movs	r2, #1
 80052f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1f1      	bne.n	80052e8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005304:	4b12      	ldr	r3, [pc, #72]	; (8005350 <xTaskResumeAll+0x130>)
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800530a:	4b10      	ldr	r3, [pc, #64]	; (800534c <xTaskResumeAll+0x12c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d009      	beq.n	8005326 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005312:	2301      	movs	r3, #1
 8005314:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005316:	4b0f      	ldr	r3, [pc, #60]	; (8005354 <xTaskResumeAll+0x134>)
 8005318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005326:	f000 fd75 	bl	8005e14 <vPortExitCritical>

	return xAlreadyYielded;
 800532a:	68bb      	ldr	r3, [r7, #8]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	2000092c 	.word	0x2000092c
 8005338:	20000904 	.word	0x20000904
 800533c:	200008c4 	.word	0x200008c4
 8005340:	2000090c 	.word	0x2000090c
 8005344:	20000808 	.word	0x20000808
 8005348:	20000804 	.word	0x20000804
 800534c:	20000918 	.word	0x20000918
 8005350:	20000914 	.word	0x20000914
 8005354:	e000ed04 	.word	0xe000ed04

08005358 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800535e:	2300      	movs	r3, #0
 8005360:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005362:	4b4e      	ldr	r3, [pc, #312]	; (800549c <xTaskIncrementTick+0x144>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	f040 808e 	bne.w	8005488 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800536c:	4b4c      	ldr	r3, [pc, #304]	; (80054a0 <xTaskIncrementTick+0x148>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	3301      	adds	r3, #1
 8005372:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005374:	4a4a      	ldr	r2, [pc, #296]	; (80054a0 <xTaskIncrementTick+0x148>)
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d120      	bne.n	80053c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005380:	4b48      	ldr	r3, [pc, #288]	; (80054a4 <xTaskIncrementTick+0x14c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	603b      	str	r3, [r7, #0]
}
 800539c:	bf00      	nop
 800539e:	e7fe      	b.n	800539e <xTaskIncrementTick+0x46>
 80053a0:	4b40      	ldr	r3, [pc, #256]	; (80054a4 <xTaskIncrementTick+0x14c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	60fb      	str	r3, [r7, #12]
 80053a6:	4b40      	ldr	r3, [pc, #256]	; (80054a8 <xTaskIncrementTick+0x150>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a3e      	ldr	r2, [pc, #248]	; (80054a4 <xTaskIncrementTick+0x14c>)
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	4a3e      	ldr	r2, [pc, #248]	; (80054a8 <xTaskIncrementTick+0x150>)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	4b3d      	ldr	r3, [pc, #244]	; (80054ac <xTaskIncrementTick+0x154>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3301      	adds	r3, #1
 80053ba:	4a3c      	ldr	r2, [pc, #240]	; (80054ac <xTaskIncrementTick+0x154>)
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	f000 fa9f 	bl	8005900 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053c2:	4b3b      	ldr	r3, [pc, #236]	; (80054b0 <xTaskIncrementTick+0x158>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d348      	bcc.n	800545e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053cc:	4b35      	ldr	r3, [pc, #212]	; (80054a4 <xTaskIncrementTick+0x14c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d104      	bne.n	80053e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053d6:	4b36      	ldr	r3, [pc, #216]	; (80054b0 <xTaskIncrementTick+0x158>)
 80053d8:	f04f 32ff 	mov.w	r2, #4294967295
 80053dc:	601a      	str	r2, [r3, #0]
					break;
 80053de:	e03e      	b.n	800545e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053e0:	4b30      	ldr	r3, [pc, #192]	; (80054a4 <xTaskIncrementTick+0x14c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d203      	bcs.n	8005400 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053f8:	4a2d      	ldr	r2, [pc, #180]	; (80054b0 <xTaskIncrementTick+0x158>)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80053fe:	e02e      	b.n	800545e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	3304      	adds	r3, #4
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff f882 	bl	800450e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540e:	2b00      	cmp	r3, #0
 8005410:	d004      	beq.n	800541c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	3318      	adds	r3, #24
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff f879 	bl	800450e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005420:	2201      	movs	r2, #1
 8005422:	409a      	lsls	r2, r3
 8005424:	4b23      	ldr	r3, [pc, #140]	; (80054b4 <xTaskIncrementTick+0x15c>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4313      	orrs	r3, r2
 800542a:	4a22      	ldr	r2, [pc, #136]	; (80054b4 <xTaskIncrementTick+0x15c>)
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005432:	4613      	mov	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4a1f      	ldr	r2, [pc, #124]	; (80054b8 <xTaskIncrementTick+0x160>)
 800543c:	441a      	add	r2, r3
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	3304      	adds	r3, #4
 8005442:	4619      	mov	r1, r3
 8005444:	4610      	mov	r0, r2
 8005446:	f7ff f805 	bl	8004454 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544e:	4b1b      	ldr	r3, [pc, #108]	; (80054bc <xTaskIncrementTick+0x164>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005454:	429a      	cmp	r2, r3
 8005456:	d3b9      	bcc.n	80053cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005458:	2301      	movs	r3, #1
 800545a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800545c:	e7b6      	b.n	80053cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800545e:	4b17      	ldr	r3, [pc, #92]	; (80054bc <xTaskIncrementTick+0x164>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005464:	4914      	ldr	r1, [pc, #80]	; (80054b8 <xTaskIncrementTick+0x160>)
 8005466:	4613      	mov	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	440b      	add	r3, r1
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d901      	bls.n	800547a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005476:	2301      	movs	r3, #1
 8005478:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800547a:	4b11      	ldr	r3, [pc, #68]	; (80054c0 <xTaskIncrementTick+0x168>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d007      	beq.n	8005492 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005482:	2301      	movs	r3, #1
 8005484:	617b      	str	r3, [r7, #20]
 8005486:	e004      	b.n	8005492 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005488:	4b0e      	ldr	r3, [pc, #56]	; (80054c4 <xTaskIncrementTick+0x16c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	3301      	adds	r3, #1
 800548e:	4a0d      	ldr	r2, [pc, #52]	; (80054c4 <xTaskIncrementTick+0x16c>)
 8005490:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005492:	697b      	ldr	r3, [r7, #20]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	2000092c 	.word	0x2000092c
 80054a0:	20000908 	.word	0x20000908
 80054a4:	200008bc 	.word	0x200008bc
 80054a8:	200008c0 	.word	0x200008c0
 80054ac:	2000091c 	.word	0x2000091c
 80054b0:	20000924 	.word	0x20000924
 80054b4:	2000090c 	.word	0x2000090c
 80054b8:	20000808 	.word	0x20000808
 80054bc:	20000804 	.word	0x20000804
 80054c0:	20000918 	.word	0x20000918
 80054c4:	20000914 	.word	0x20000914

080054c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054c8:	b480      	push	{r7}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054ce:	4b27      	ldr	r3, [pc, #156]	; (800556c <vTaskSwitchContext+0xa4>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054d6:	4b26      	ldr	r3, [pc, #152]	; (8005570 <vTaskSwitchContext+0xa8>)
 80054d8:	2201      	movs	r2, #1
 80054da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054dc:	e03f      	b.n	800555e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80054de:	4b24      	ldr	r3, [pc, #144]	; (8005570 <vTaskSwitchContext+0xa8>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054e4:	4b23      	ldr	r3, [pc, #140]	; (8005574 <vTaskSwitchContext+0xac>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	fab3 f383 	clz	r3, r3
 80054f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80054f2:	7afb      	ldrb	r3, [r7, #11]
 80054f4:	f1c3 031f 	rsb	r3, r3, #31
 80054f8:	617b      	str	r3, [r7, #20]
 80054fa:	491f      	ldr	r1, [pc, #124]	; (8005578 <vTaskSwitchContext+0xb0>)
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	4613      	mov	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	440b      	add	r3, r1
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10a      	bne.n	8005524 <vTaskSwitchContext+0x5c>
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	607b      	str	r3, [r7, #4]
}
 8005520:	bf00      	nop
 8005522:	e7fe      	b.n	8005522 <vTaskSwitchContext+0x5a>
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	4613      	mov	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4a12      	ldr	r2, [pc, #72]	; (8005578 <vTaskSwitchContext+0xb0>)
 8005530:	4413      	add	r3, r2
 8005532:	613b      	str	r3, [r7, #16]
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	605a      	str	r2, [r3, #4]
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	3308      	adds	r3, #8
 8005546:	429a      	cmp	r2, r3
 8005548:	d104      	bne.n	8005554 <vTaskSwitchContext+0x8c>
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	605a      	str	r2, [r3, #4]
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	4a08      	ldr	r2, [pc, #32]	; (800557c <vTaskSwitchContext+0xb4>)
 800555c:	6013      	str	r3, [r2, #0]
}
 800555e:	bf00      	nop
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	2000092c 	.word	0x2000092c
 8005570:	20000918 	.word	0x20000918
 8005574:	2000090c 	.word	0x2000090c
 8005578:	20000808 	.word	0x20000808
 800557c:	20000804 	.word	0x20000804

08005580 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10a      	bne.n	80055a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	60fb      	str	r3, [r7, #12]
}
 80055a2:	bf00      	nop
 80055a4:	e7fe      	b.n	80055a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055a6:	4b07      	ldr	r3, [pc, #28]	; (80055c4 <vTaskPlaceOnEventList+0x44>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3318      	adds	r3, #24
 80055ac:	4619      	mov	r1, r3
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fe ff74 	bl	800449c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055b4:	2101      	movs	r1, #1
 80055b6:	6838      	ldr	r0, [r7, #0]
 80055b8:	f000 fa66 	bl	8005a88 <prvAddCurrentTaskToDelayedList>
}
 80055bc:	bf00      	nop
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20000804 	.word	0x20000804

080055c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10a      	bne.n	80055f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80055de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	60fb      	str	r3, [r7, #12]
}
 80055f0:	bf00      	nop
 80055f2:	e7fe      	b.n	80055f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	3318      	adds	r3, #24
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7fe ff88 	bl	800450e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055fe:	4b1d      	ldr	r3, [pc, #116]	; (8005674 <xTaskRemoveFromEventList+0xac>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d11c      	bne.n	8005640 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	3304      	adds	r3, #4
 800560a:	4618      	mov	r0, r3
 800560c:	f7fe ff7f 	bl	800450e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	2201      	movs	r2, #1
 8005616:	409a      	lsls	r2, r3
 8005618:	4b17      	ldr	r3, [pc, #92]	; (8005678 <xTaskRemoveFromEventList+0xb0>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4313      	orrs	r3, r2
 800561e:	4a16      	ldr	r2, [pc, #88]	; (8005678 <xTaskRemoveFromEventList+0xb0>)
 8005620:	6013      	str	r3, [r2, #0]
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005626:	4613      	mov	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4a13      	ldr	r2, [pc, #76]	; (800567c <xTaskRemoveFromEventList+0xb4>)
 8005630:	441a      	add	r2, r3
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	3304      	adds	r3, #4
 8005636:	4619      	mov	r1, r3
 8005638:	4610      	mov	r0, r2
 800563a:	f7fe ff0b 	bl	8004454 <vListInsertEnd>
 800563e:	e005      	b.n	800564c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	3318      	adds	r3, #24
 8005644:	4619      	mov	r1, r3
 8005646:	480e      	ldr	r0, [pc, #56]	; (8005680 <xTaskRemoveFromEventList+0xb8>)
 8005648:	f7fe ff04 	bl	8004454 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005650:	4b0c      	ldr	r3, [pc, #48]	; (8005684 <xTaskRemoveFromEventList+0xbc>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005656:	429a      	cmp	r2, r3
 8005658:	d905      	bls.n	8005666 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800565a:	2301      	movs	r3, #1
 800565c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800565e:	4b0a      	ldr	r3, [pc, #40]	; (8005688 <xTaskRemoveFromEventList+0xc0>)
 8005660:	2201      	movs	r2, #1
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	e001      	b.n	800566a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005666:	2300      	movs	r3, #0
 8005668:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800566a:	697b      	ldr	r3, [r7, #20]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	2000092c 	.word	0x2000092c
 8005678:	2000090c 	.word	0x2000090c
 800567c:	20000808 	.word	0x20000808
 8005680:	200008c4 	.word	0x200008c4
 8005684:	20000804 	.word	0x20000804
 8005688:	20000918 	.word	0x20000918

0800568c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005694:	4b06      	ldr	r3, [pc, #24]	; (80056b0 <vTaskInternalSetTimeOutState+0x24>)
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800569c:	4b05      	ldr	r3, [pc, #20]	; (80056b4 <vTaskInternalSetTimeOutState+0x28>)
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	605a      	str	r2, [r3, #4]
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	2000091c 	.word	0x2000091c
 80056b4:	20000908 	.word	0x20000908

080056b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b088      	sub	sp, #32
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10a      	bne.n	80056de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80056c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	613b      	str	r3, [r7, #16]
}
 80056da:	bf00      	nop
 80056dc:	e7fe      	b.n	80056dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10a      	bne.n	80056fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	60fb      	str	r3, [r7, #12]
}
 80056f6:	bf00      	nop
 80056f8:	e7fe      	b.n	80056f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80056fa:	f000 fb5b 	bl	8005db4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80056fe:	4b1d      	ldr	r3, [pc, #116]	; (8005774 <xTaskCheckForTimeOut+0xbc>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005716:	d102      	bne.n	800571e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005718:	2300      	movs	r3, #0
 800571a:	61fb      	str	r3, [r7, #28]
 800571c:	e023      	b.n	8005766 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	4b15      	ldr	r3, [pc, #84]	; (8005778 <xTaskCheckForTimeOut+0xc0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d007      	beq.n	800573a <xTaskCheckForTimeOut+0x82>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	429a      	cmp	r2, r3
 8005732:	d302      	bcc.n	800573a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005734:	2301      	movs	r3, #1
 8005736:	61fb      	str	r3, [r7, #28]
 8005738:	e015      	b.n	8005766 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	429a      	cmp	r2, r3
 8005742:	d20b      	bcs.n	800575c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	1ad2      	subs	r2, r2, r3
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7ff ff9b 	bl	800568c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005756:	2300      	movs	r3, #0
 8005758:	61fb      	str	r3, [r7, #28]
 800575a:	e004      	b.n	8005766 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005762:	2301      	movs	r3, #1
 8005764:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005766:	f000 fb55 	bl	8005e14 <vPortExitCritical>

	return xReturn;
 800576a:	69fb      	ldr	r3, [r7, #28]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3720      	adds	r7, #32
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	20000908 	.word	0x20000908
 8005778:	2000091c 	.word	0x2000091c

0800577c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005780:	4b03      	ldr	r3, [pc, #12]	; (8005790 <vTaskMissedYield+0x14>)
 8005782:	2201      	movs	r2, #1
 8005784:	601a      	str	r2, [r3, #0]
}
 8005786:	bf00      	nop
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	20000918 	.word	0x20000918

08005794 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800579c:	f000 f852 	bl	8005844 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057a0:	4b06      	ldr	r3, [pc, #24]	; (80057bc <prvIdleTask+0x28>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d9f9      	bls.n	800579c <prvIdleTask+0x8>
			{
				taskYIELD();
 80057a8:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <prvIdleTask+0x2c>)
 80057aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057b8:	e7f0      	b.n	800579c <prvIdleTask+0x8>
 80057ba:	bf00      	nop
 80057bc:	20000808 	.word	0x20000808
 80057c0:	e000ed04 	.word	0xe000ed04

080057c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057ca:	2300      	movs	r3, #0
 80057cc:	607b      	str	r3, [r7, #4]
 80057ce:	e00c      	b.n	80057ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	4613      	mov	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4a12      	ldr	r2, [pc, #72]	; (8005824 <prvInitialiseTaskLists+0x60>)
 80057dc:	4413      	add	r3, r2
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fe fe0b 	bl	80043fa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3301      	adds	r3, #1
 80057e8:	607b      	str	r3, [r7, #4]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b06      	cmp	r3, #6
 80057ee:	d9ef      	bls.n	80057d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057f0:	480d      	ldr	r0, [pc, #52]	; (8005828 <prvInitialiseTaskLists+0x64>)
 80057f2:	f7fe fe02 	bl	80043fa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057f6:	480d      	ldr	r0, [pc, #52]	; (800582c <prvInitialiseTaskLists+0x68>)
 80057f8:	f7fe fdff 	bl	80043fa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057fc:	480c      	ldr	r0, [pc, #48]	; (8005830 <prvInitialiseTaskLists+0x6c>)
 80057fe:	f7fe fdfc 	bl	80043fa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005802:	480c      	ldr	r0, [pc, #48]	; (8005834 <prvInitialiseTaskLists+0x70>)
 8005804:	f7fe fdf9 	bl	80043fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005808:	480b      	ldr	r0, [pc, #44]	; (8005838 <prvInitialiseTaskLists+0x74>)
 800580a:	f7fe fdf6 	bl	80043fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800580e:	4b0b      	ldr	r3, [pc, #44]	; (800583c <prvInitialiseTaskLists+0x78>)
 8005810:	4a05      	ldr	r2, [pc, #20]	; (8005828 <prvInitialiseTaskLists+0x64>)
 8005812:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005814:	4b0a      	ldr	r3, [pc, #40]	; (8005840 <prvInitialiseTaskLists+0x7c>)
 8005816:	4a05      	ldr	r2, [pc, #20]	; (800582c <prvInitialiseTaskLists+0x68>)
 8005818:	601a      	str	r2, [r3, #0]
}
 800581a:	bf00      	nop
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	20000808 	.word	0x20000808
 8005828:	20000894 	.word	0x20000894
 800582c:	200008a8 	.word	0x200008a8
 8005830:	200008c4 	.word	0x200008c4
 8005834:	200008d8 	.word	0x200008d8
 8005838:	200008f0 	.word	0x200008f0
 800583c:	200008bc 	.word	0x200008bc
 8005840:	200008c0 	.word	0x200008c0

08005844 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800584a:	e019      	b.n	8005880 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800584c:	f000 fab2 	bl	8005db4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005850:	4b10      	ldr	r3, [pc, #64]	; (8005894 <prvCheckTasksWaitingTermination+0x50>)
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3304      	adds	r3, #4
 800585c:	4618      	mov	r0, r3
 800585e:	f7fe fe56 	bl	800450e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005862:	4b0d      	ldr	r3, [pc, #52]	; (8005898 <prvCheckTasksWaitingTermination+0x54>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3b01      	subs	r3, #1
 8005868:	4a0b      	ldr	r2, [pc, #44]	; (8005898 <prvCheckTasksWaitingTermination+0x54>)
 800586a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800586c:	4b0b      	ldr	r3, [pc, #44]	; (800589c <prvCheckTasksWaitingTermination+0x58>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3b01      	subs	r3, #1
 8005872:	4a0a      	ldr	r2, [pc, #40]	; (800589c <prvCheckTasksWaitingTermination+0x58>)
 8005874:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005876:	f000 facd 	bl	8005e14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f810 	bl	80058a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005880:	4b06      	ldr	r3, [pc, #24]	; (800589c <prvCheckTasksWaitingTermination+0x58>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1e1      	bne.n	800584c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005888:	bf00      	nop
 800588a:	bf00      	nop
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	200008d8 	.word	0x200008d8
 8005898:	20000904 	.word	0x20000904
 800589c:	200008ec 	.word	0x200008ec

080058a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d108      	bne.n	80058c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fc2a 	bl	8006110 <vPortFree>
				vPortFree( pxTCB );
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 fc27 	bl	8006110 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058c2:	e018      	b.n	80058f6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d103      	bne.n	80058d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fc1e 	bl	8006110 <vPortFree>
	}
 80058d4:	e00f      	b.n	80058f6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d00a      	beq.n	80058f6 <prvDeleteTCB+0x56>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	60fb      	str	r3, [r7, #12]
}
 80058f2:	bf00      	nop
 80058f4:	e7fe      	b.n	80058f4 <prvDeleteTCB+0x54>
	}
 80058f6:	bf00      	nop
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005906:	4b0c      	ldr	r3, [pc, #48]	; (8005938 <prvResetNextTaskUnblockTime+0x38>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d104      	bne.n	800591a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005910:	4b0a      	ldr	r3, [pc, #40]	; (800593c <prvResetNextTaskUnblockTime+0x3c>)
 8005912:	f04f 32ff 	mov.w	r2, #4294967295
 8005916:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005918:	e008      	b.n	800592c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800591a:	4b07      	ldr	r3, [pc, #28]	; (8005938 <prvResetNextTaskUnblockTime+0x38>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	4a04      	ldr	r2, [pc, #16]	; (800593c <prvResetNextTaskUnblockTime+0x3c>)
 800592a:	6013      	str	r3, [r2, #0]
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	200008bc 	.word	0x200008bc
 800593c:	20000924 	.word	0x20000924

08005940 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005946:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <xTaskGetSchedulerState+0x34>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d102      	bne.n	8005954 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800594e:	2301      	movs	r3, #1
 8005950:	607b      	str	r3, [r7, #4]
 8005952:	e008      	b.n	8005966 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005954:	4b08      	ldr	r3, [pc, #32]	; (8005978 <xTaskGetSchedulerState+0x38>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d102      	bne.n	8005962 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800595c:	2302      	movs	r3, #2
 800595e:	607b      	str	r3, [r7, #4]
 8005960:	e001      	b.n	8005966 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005962:	2300      	movs	r3, #0
 8005964:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005966:	687b      	ldr	r3, [r7, #4]
	}
 8005968:	4618      	mov	r0, r3
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr
 8005974:	20000910 	.word	0x20000910
 8005978:	2000092c 	.word	0x2000092c

0800597c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005988:	2300      	movs	r3, #0
 800598a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d06e      	beq.n	8005a70 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005992:	4b3a      	ldr	r3, [pc, #232]	; (8005a7c <xTaskPriorityDisinherit+0x100>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	429a      	cmp	r2, r3
 800599a:	d00a      	beq.n	80059b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	60fb      	str	r3, [r7, #12]
}
 80059ae:	bf00      	nop
 80059b0:	e7fe      	b.n	80059b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10a      	bne.n	80059d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80059ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	60bb      	str	r3, [r7, #8]
}
 80059cc:	bf00      	nop
 80059ce:	e7fe      	b.n	80059ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059d4:	1e5a      	subs	r2, r3, #1
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d044      	beq.n	8005a70 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d140      	bne.n	8005a70 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	3304      	adds	r3, #4
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fe fd8b 	bl	800450e <uxListRemove>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d115      	bne.n	8005a2a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a02:	491f      	ldr	r1, [pc, #124]	; (8005a80 <xTaskPriorityDisinherit+0x104>)
 8005a04:	4613      	mov	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10a      	bne.n	8005a2a <xTaskPriorityDisinherit+0xae>
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a18:	2201      	movs	r2, #1
 8005a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1e:	43da      	mvns	r2, r3
 8005a20:	4b18      	ldr	r3, [pc, #96]	; (8005a84 <xTaskPriorityDisinherit+0x108>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4013      	ands	r3, r2
 8005a26:	4a17      	ldr	r2, [pc, #92]	; (8005a84 <xTaskPriorityDisinherit+0x108>)
 8005a28:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a36:	f1c3 0207 	rsb	r2, r3, #7
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a42:	2201      	movs	r2, #1
 8005a44:	409a      	lsls	r2, r3
 8005a46:	4b0f      	ldr	r3, [pc, #60]	; (8005a84 <xTaskPriorityDisinherit+0x108>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	4a0d      	ldr	r2, [pc, #52]	; (8005a84 <xTaskPriorityDisinherit+0x108>)
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a54:	4613      	mov	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4a08      	ldr	r2, [pc, #32]	; (8005a80 <xTaskPriorityDisinherit+0x104>)
 8005a5e:	441a      	add	r2, r3
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	3304      	adds	r3, #4
 8005a64:	4619      	mov	r1, r3
 8005a66:	4610      	mov	r0, r2
 8005a68:	f7fe fcf4 	bl	8004454 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a70:	697b      	ldr	r3, [r7, #20]
	}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000804 	.word	0x20000804
 8005a80:	20000808 	.word	0x20000808
 8005a84:	2000090c 	.word	0x2000090c

08005a88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a92:	4b29      	ldr	r3, [pc, #164]	; (8005b38 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a98:	4b28      	ldr	r3, [pc, #160]	; (8005b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fe fd35 	bl	800450e <uxListRemove>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10b      	bne.n	8005ac2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005aaa:	4b24      	ldr	r3, [pc, #144]	; (8005b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab6:	43da      	mvns	r2, r3
 8005ab8:	4b21      	ldr	r3, [pc, #132]	; (8005b40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4013      	ands	r3, r2
 8005abe:	4a20      	ldr	r2, [pc, #128]	; (8005b40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ac0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac8:	d10a      	bne.n	8005ae0 <prvAddCurrentTaskToDelayedList+0x58>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d007      	beq.n	8005ae0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ad0:	4b1a      	ldr	r3, [pc, #104]	; (8005b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	481a      	ldr	r0, [pc, #104]	; (8005b44 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005ada:	f7fe fcbb 	bl	8004454 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ade:	e026      	b.n	8005b2e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ae8:	4b14      	ldr	r3, [pc, #80]	; (8005b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d209      	bcs.n	8005b0c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005af8:	4b13      	ldr	r3, [pc, #76]	; (8005b48 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	4b0f      	ldr	r3, [pc, #60]	; (8005b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3304      	adds	r3, #4
 8005b02:	4619      	mov	r1, r3
 8005b04:	4610      	mov	r0, r2
 8005b06:	f7fe fcc9 	bl	800449c <vListInsert>
}
 8005b0a:	e010      	b.n	8005b2e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b0c:	4b0f      	ldr	r3, [pc, #60]	; (8005b4c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3304      	adds	r3, #4
 8005b16:	4619      	mov	r1, r3
 8005b18:	4610      	mov	r0, r2
 8005b1a:	f7fe fcbf 	bl	800449c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b1e:	4b0c      	ldr	r3, [pc, #48]	; (8005b50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d202      	bcs.n	8005b2e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005b28:	4a09      	ldr	r2, [pc, #36]	; (8005b50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	6013      	str	r3, [r2, #0]
}
 8005b2e:	bf00      	nop
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20000908 	.word	0x20000908
 8005b3c:	20000804 	.word	0x20000804
 8005b40:	2000090c 	.word	0x2000090c
 8005b44:	200008f0 	.word	0x200008f0
 8005b48:	200008c0 	.word	0x200008c0
 8005b4c:	200008bc 	.word	0x200008bc
 8005b50:	20000924 	.word	0x20000924

08005b54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	3b04      	subs	r3, #4
 8005b64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	3b04      	subs	r3, #4
 8005b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f023 0201 	bic.w	r2, r3, #1
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	3b04      	subs	r3, #4
 8005b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b84:	4a0c      	ldr	r2, [pc, #48]	; (8005bb8 <pxPortInitialiseStack+0x64>)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3b14      	subs	r3, #20
 8005b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	3b04      	subs	r3, #4
 8005b9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f06f 0202 	mvn.w	r2, #2
 8005ba2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	3b20      	subs	r3, #32
 8005ba8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005baa:	68fb      	ldr	r3, [r7, #12]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	08005bbd 	.word	0x08005bbd

08005bbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005bc6:	4b12      	ldr	r3, [pc, #72]	; (8005c10 <prvTaskExitError+0x54>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bce:	d00a      	beq.n	8005be6 <prvTaskExitError+0x2a>
	__asm volatile
 8005bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	60fb      	str	r3, [r7, #12]
}
 8005be2:	bf00      	nop
 8005be4:	e7fe      	b.n	8005be4 <prvTaskExitError+0x28>
	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	60bb      	str	r3, [r7, #8]
}
 8005bf8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005bfa:	bf00      	nop
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d0fc      	beq.n	8005bfc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c02:	bf00      	nop
 8005c04:	bf00      	nop
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	20000018 	.word	0x20000018
	...

08005c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c20:	4b07      	ldr	r3, [pc, #28]	; (8005c40 <pxCurrentTCBConst2>)
 8005c22:	6819      	ldr	r1, [r3, #0]
 8005c24:	6808      	ldr	r0, [r1, #0]
 8005c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2a:	f380 8809 	msr	PSP, r0
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f04f 0000 	mov.w	r0, #0
 8005c36:	f380 8811 	msr	BASEPRI, r0
 8005c3a:	4770      	bx	lr
 8005c3c:	f3af 8000 	nop.w

08005c40 <pxCurrentTCBConst2>:
 8005c40:	20000804 	.word	0x20000804
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c44:	bf00      	nop
 8005c46:	bf00      	nop

08005c48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c48:	4808      	ldr	r0, [pc, #32]	; (8005c6c <prvPortStartFirstTask+0x24>)
 8005c4a:	6800      	ldr	r0, [r0, #0]
 8005c4c:	6800      	ldr	r0, [r0, #0]
 8005c4e:	f380 8808 	msr	MSP, r0
 8005c52:	f04f 0000 	mov.w	r0, #0
 8005c56:	f380 8814 	msr	CONTROL, r0
 8005c5a:	b662      	cpsie	i
 8005c5c:	b661      	cpsie	f
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	df00      	svc	0
 8005c68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c6a:	bf00      	nop
 8005c6c:	e000ed08 	.word	0xe000ed08

08005c70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c76:	4b46      	ldr	r3, [pc, #280]	; (8005d90 <xPortStartScheduler+0x120>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a46      	ldr	r2, [pc, #280]	; (8005d94 <xPortStartScheduler+0x124>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d10a      	bne.n	8005c96 <xPortStartScheduler+0x26>
	__asm volatile
 8005c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	613b      	str	r3, [r7, #16]
}
 8005c92:	bf00      	nop
 8005c94:	e7fe      	b.n	8005c94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c96:	4b3e      	ldr	r3, [pc, #248]	; (8005d90 <xPortStartScheduler+0x120>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a3f      	ldr	r2, [pc, #252]	; (8005d98 <xPortStartScheduler+0x128>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d10a      	bne.n	8005cb6 <xPortStartScheduler+0x46>
	__asm volatile
 8005ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	60fb      	str	r3, [r7, #12]
}
 8005cb2:	bf00      	nop
 8005cb4:	e7fe      	b.n	8005cb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005cb6:	4b39      	ldr	r3, [pc, #228]	; (8005d9c <xPortStartScheduler+0x12c>)
 8005cb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	22ff      	movs	r2, #255	; 0xff
 8005cc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005cd0:	78fb      	ldrb	r3, [r7, #3]
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	4b31      	ldr	r3, [pc, #196]	; (8005da0 <xPortStartScheduler+0x130>)
 8005cdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005cde:	4b31      	ldr	r3, [pc, #196]	; (8005da4 <xPortStartScheduler+0x134>)
 8005ce0:	2207      	movs	r2, #7
 8005ce2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ce4:	e009      	b.n	8005cfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005ce6:	4b2f      	ldr	r3, [pc, #188]	; (8005da4 <xPortStartScheduler+0x134>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	4a2d      	ldr	r2, [pc, #180]	; (8005da4 <xPortStartScheduler+0x134>)
 8005cee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005cf0:	78fb      	ldrb	r3, [r7, #3]
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cfa:	78fb      	ldrb	r3, [r7, #3]
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d02:	2b80      	cmp	r3, #128	; 0x80
 8005d04:	d0ef      	beq.n	8005ce6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d06:	4b27      	ldr	r3, [pc, #156]	; (8005da4 <xPortStartScheduler+0x134>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f1c3 0307 	rsb	r3, r3, #7
 8005d0e:	2b04      	cmp	r3, #4
 8005d10:	d00a      	beq.n	8005d28 <xPortStartScheduler+0xb8>
	__asm volatile
 8005d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d16:	f383 8811 	msr	BASEPRI, r3
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	60bb      	str	r3, [r7, #8]
}
 8005d24:	bf00      	nop
 8005d26:	e7fe      	b.n	8005d26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d28:	4b1e      	ldr	r3, [pc, #120]	; (8005da4 <xPortStartScheduler+0x134>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	021b      	lsls	r3, r3, #8
 8005d2e:	4a1d      	ldr	r2, [pc, #116]	; (8005da4 <xPortStartScheduler+0x134>)
 8005d30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d32:	4b1c      	ldr	r3, [pc, #112]	; (8005da4 <xPortStartScheduler+0x134>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d3a:	4a1a      	ldr	r2, [pc, #104]	; (8005da4 <xPortStartScheduler+0x134>)
 8005d3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d46:	4b18      	ldr	r3, [pc, #96]	; (8005da8 <xPortStartScheduler+0x138>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a17      	ldr	r2, [pc, #92]	; (8005da8 <xPortStartScheduler+0x138>)
 8005d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d52:	4b15      	ldr	r3, [pc, #84]	; (8005da8 <xPortStartScheduler+0x138>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a14      	ldr	r2, [pc, #80]	; (8005da8 <xPortStartScheduler+0x138>)
 8005d58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d5e:	f000 f8dd 	bl	8005f1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d62:	4b12      	ldr	r3, [pc, #72]	; (8005dac <xPortStartScheduler+0x13c>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d68:	f000 f8fc 	bl	8005f64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d6c:	4b10      	ldr	r3, [pc, #64]	; (8005db0 <xPortStartScheduler+0x140>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a0f      	ldr	r2, [pc, #60]	; (8005db0 <xPortStartScheduler+0x140>)
 8005d72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d78:	f7ff ff66 	bl	8005c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d7c:	f7ff fba4 	bl	80054c8 <vTaskSwitchContext>
	prvTaskExitError();
 8005d80:	f7ff ff1c 	bl	8005bbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	e000ed00 	.word	0xe000ed00
 8005d94:	410fc271 	.word	0x410fc271
 8005d98:	410fc270 	.word	0x410fc270
 8005d9c:	e000e400 	.word	0xe000e400
 8005da0:	20000930 	.word	0x20000930
 8005da4:	20000934 	.word	0x20000934
 8005da8:	e000ed20 	.word	0xe000ed20
 8005dac:	20000018 	.word	0x20000018
 8005db0:	e000ef34 	.word	0xe000ef34

08005db4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
	__asm volatile
 8005dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	607b      	str	r3, [r7, #4]
}
 8005dcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005dce:	4b0f      	ldr	r3, [pc, #60]	; (8005e0c <vPortEnterCritical+0x58>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	4a0d      	ldr	r2, [pc, #52]	; (8005e0c <vPortEnterCritical+0x58>)
 8005dd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005dd8:	4b0c      	ldr	r3, [pc, #48]	; (8005e0c <vPortEnterCritical+0x58>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d10f      	bne.n	8005e00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005de0:	4b0b      	ldr	r3, [pc, #44]	; (8005e10 <vPortEnterCritical+0x5c>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00a      	beq.n	8005e00 <vPortEnterCritical+0x4c>
	__asm volatile
 8005dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dee:	f383 8811 	msr	BASEPRI, r3
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	603b      	str	r3, [r7, #0]
}
 8005dfc:	bf00      	nop
 8005dfe:	e7fe      	b.n	8005dfe <vPortEnterCritical+0x4a>
	}
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	20000018 	.word	0x20000018
 8005e10:	e000ed04 	.word	0xe000ed04

08005e14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e1a:	4b12      	ldr	r3, [pc, #72]	; (8005e64 <vPortExitCritical+0x50>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10a      	bne.n	8005e38 <vPortExitCritical+0x24>
	__asm volatile
 8005e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e26:	f383 8811 	msr	BASEPRI, r3
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	607b      	str	r3, [r7, #4]
}
 8005e34:	bf00      	nop
 8005e36:	e7fe      	b.n	8005e36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005e38:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <vPortExitCritical+0x50>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	4a09      	ldr	r2, [pc, #36]	; (8005e64 <vPortExitCritical+0x50>)
 8005e40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e42:	4b08      	ldr	r3, [pc, #32]	; (8005e64 <vPortExitCritical+0x50>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d105      	bne.n	8005e56 <vPortExitCritical+0x42>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	20000018 	.word	0x20000018
	...

08005e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e70:	f3ef 8009 	mrs	r0, PSP
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	4b15      	ldr	r3, [pc, #84]	; (8005ed0 <pxCurrentTCBConst>)
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	f01e 0f10 	tst.w	lr, #16
 8005e80:	bf08      	it	eq
 8005e82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e8a:	6010      	str	r0, [r2, #0]
 8005e8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e94:	f380 8811 	msr	BASEPRI, r0
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f7ff fb12 	bl	80054c8 <vTaskSwitchContext>
 8005ea4:	f04f 0000 	mov.w	r0, #0
 8005ea8:	f380 8811 	msr	BASEPRI, r0
 8005eac:	bc09      	pop	{r0, r3}
 8005eae:	6819      	ldr	r1, [r3, #0]
 8005eb0:	6808      	ldr	r0, [r1, #0]
 8005eb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb6:	f01e 0f10 	tst.w	lr, #16
 8005eba:	bf08      	it	eq
 8005ebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ec0:	f380 8809 	msr	PSP, r0
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	f3af 8000 	nop.w

08005ed0 <pxCurrentTCBConst>:
 8005ed0:	20000804 	.word	0x20000804
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ed4:	bf00      	nop
 8005ed6:	bf00      	nop

08005ed8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	607b      	str	r3, [r7, #4]
}
 8005ef0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ef2:	f7ff fa31 	bl	8005358 <xTaskIncrementTick>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005efc:	4b06      	ldr	r3, [pc, #24]	; (8005f18 <SysTick_Handler+0x40>)
 8005efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f02:	601a      	str	r2, [r3, #0]
 8005f04:	2300      	movs	r3, #0
 8005f06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	f383 8811 	msr	BASEPRI, r3
}
 8005f0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f10:	bf00      	nop
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	e000ed04 	.word	0xe000ed04

08005f1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f20:	4b0b      	ldr	r3, [pc, #44]	; (8005f50 <vPortSetupTimerInterrupt+0x34>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f26:	4b0b      	ldr	r3, [pc, #44]	; (8005f54 <vPortSetupTimerInterrupt+0x38>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f2c:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <vPortSetupTimerInterrupt+0x3c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a0a      	ldr	r2, [pc, #40]	; (8005f5c <vPortSetupTimerInterrupt+0x40>)
 8005f32:	fba2 2303 	umull	r2, r3, r2, r3
 8005f36:	099b      	lsrs	r3, r3, #6
 8005f38:	4a09      	ldr	r2, [pc, #36]	; (8005f60 <vPortSetupTimerInterrupt+0x44>)
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f3e:	4b04      	ldr	r3, [pc, #16]	; (8005f50 <vPortSetupTimerInterrupt+0x34>)
 8005f40:	2207      	movs	r2, #7
 8005f42:	601a      	str	r2, [r3, #0]
}
 8005f44:	bf00      	nop
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	e000e010 	.word	0xe000e010
 8005f54:	e000e018 	.word	0xe000e018
 8005f58:	2000000c 	.word	0x2000000c
 8005f5c:	10624dd3 	.word	0x10624dd3
 8005f60:	e000e014 	.word	0xe000e014

08005f64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f74 <vPortEnableVFP+0x10>
 8005f68:	6801      	ldr	r1, [r0, #0]
 8005f6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f6e:	6001      	str	r1, [r0, #0]
 8005f70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f72:	bf00      	nop
 8005f74:	e000ed88 	.word	0xe000ed88

08005f78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08a      	sub	sp, #40	; 0x28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f80:	2300      	movs	r3, #0
 8005f82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f84:	f7ff f93e 	bl	8005204 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f88:	4b5b      	ldr	r3, [pc, #364]	; (80060f8 <pvPortMalloc+0x180>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f90:	f000 f920 	bl	80061d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f94:	4b59      	ldr	r3, [pc, #356]	; (80060fc <pvPortMalloc+0x184>)
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f040 8093 	bne.w	80060c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d01d      	beq.n	8005fe4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005fa8:	2208      	movs	r2, #8
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4413      	add	r3, r2
 8005fae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f003 0307 	and.w	r3, r3, #7
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d014      	beq.n	8005fe4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f023 0307 	bic.w	r3, r3, #7
 8005fc0:	3308      	adds	r3, #8
 8005fc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <pvPortMalloc+0x6c>
	__asm volatile
 8005fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	617b      	str	r3, [r7, #20]
}
 8005fe0:	bf00      	nop
 8005fe2:	e7fe      	b.n	8005fe2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d06e      	beq.n	80060c8 <pvPortMalloc+0x150>
 8005fea:	4b45      	ldr	r3, [pc, #276]	; (8006100 <pvPortMalloc+0x188>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d869      	bhi.n	80060c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ff4:	4b43      	ldr	r3, [pc, #268]	; (8006104 <pvPortMalloc+0x18c>)
 8005ff6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ff8:	4b42      	ldr	r3, [pc, #264]	; (8006104 <pvPortMalloc+0x18c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ffe:	e004      	b.n	800600a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	429a      	cmp	r2, r3
 8006012:	d903      	bls.n	800601c <pvPortMalloc+0xa4>
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1f1      	bne.n	8006000 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800601c:	4b36      	ldr	r3, [pc, #216]	; (80060f8 <pvPortMalloc+0x180>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006022:	429a      	cmp	r2, r3
 8006024:	d050      	beq.n	80060c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2208      	movs	r2, #8
 800602c:	4413      	add	r3, r2
 800602e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	1ad2      	subs	r2, r2, r3
 8006040:	2308      	movs	r3, #8
 8006042:	005b      	lsls	r3, r3, #1
 8006044:	429a      	cmp	r2, r3
 8006046:	d91f      	bls.n	8006088 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4413      	add	r3, r2
 800604e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	f003 0307 	and.w	r3, r3, #7
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <pvPortMalloc+0xf8>
	__asm volatile
 800605a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	613b      	str	r3, [r7, #16]
}
 800606c:	bf00      	nop
 800606e:	e7fe      	b.n	800606e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	1ad2      	subs	r2, r2, r3
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006082:	69b8      	ldr	r0, [r7, #24]
 8006084:	f000 f908 	bl	8006298 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006088:	4b1d      	ldr	r3, [pc, #116]	; (8006100 <pvPortMalloc+0x188>)
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	4a1b      	ldr	r2, [pc, #108]	; (8006100 <pvPortMalloc+0x188>)
 8006094:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006096:	4b1a      	ldr	r3, [pc, #104]	; (8006100 <pvPortMalloc+0x188>)
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	4b1b      	ldr	r3, [pc, #108]	; (8006108 <pvPortMalloc+0x190>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d203      	bcs.n	80060aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060a2:	4b17      	ldr	r3, [pc, #92]	; (8006100 <pvPortMalloc+0x188>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a18      	ldr	r2, [pc, #96]	; (8006108 <pvPortMalloc+0x190>)
 80060a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	4b13      	ldr	r3, [pc, #76]	; (80060fc <pvPortMalloc+0x184>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	431a      	orrs	r2, r3
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80060be:	4b13      	ldr	r3, [pc, #76]	; (800610c <pvPortMalloc+0x194>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3301      	adds	r3, #1
 80060c4:	4a11      	ldr	r2, [pc, #68]	; (800610c <pvPortMalloc+0x194>)
 80060c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060c8:	f7ff f8aa 	bl	8005220 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	f003 0307 	and.w	r3, r3, #7
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <pvPortMalloc+0x174>
	__asm volatile
 80060d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	60fb      	str	r3, [r7, #12]
}
 80060e8:	bf00      	nop
 80060ea:	e7fe      	b.n	80060ea <pvPortMalloc+0x172>
	return pvReturn;
 80060ec:	69fb      	ldr	r3, [r7, #28]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3728      	adds	r7, #40	; 0x28
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	20004540 	.word	0x20004540
 80060fc:	20004554 	.word	0x20004554
 8006100:	20004544 	.word	0x20004544
 8006104:	20004538 	.word	0x20004538
 8006108:	20004548 	.word	0x20004548
 800610c:	2000454c 	.word	0x2000454c

08006110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d04d      	beq.n	80061be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006122:	2308      	movs	r3, #8
 8006124:	425b      	negs	r3, r3
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	4413      	add	r3, r2
 800612a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	4b24      	ldr	r3, [pc, #144]	; (80061c8 <vPortFree+0xb8>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4013      	ands	r3, r2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10a      	bne.n	8006154 <vPortFree+0x44>
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	60fb      	str	r3, [r7, #12]
}
 8006150:	bf00      	nop
 8006152:	e7fe      	b.n	8006152 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00a      	beq.n	8006172 <vPortFree+0x62>
	__asm volatile
 800615c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006160:	f383 8811 	msr	BASEPRI, r3
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	60bb      	str	r3, [r7, #8]
}
 800616e:	bf00      	nop
 8006170:	e7fe      	b.n	8006170 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	4b14      	ldr	r3, [pc, #80]	; (80061c8 <vPortFree+0xb8>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4013      	ands	r3, r2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d01e      	beq.n	80061be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d11a      	bne.n	80061be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	4b0e      	ldr	r3, [pc, #56]	; (80061c8 <vPortFree+0xb8>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	43db      	mvns	r3, r3
 8006192:	401a      	ands	r2, r3
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006198:	f7ff f834 	bl	8005204 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	4b0a      	ldr	r3, [pc, #40]	; (80061cc <vPortFree+0xbc>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4413      	add	r3, r2
 80061a6:	4a09      	ldr	r2, [pc, #36]	; (80061cc <vPortFree+0xbc>)
 80061a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061aa:	6938      	ldr	r0, [r7, #16]
 80061ac:	f000 f874 	bl	8006298 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80061b0:	4b07      	ldr	r3, [pc, #28]	; (80061d0 <vPortFree+0xc0>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3301      	adds	r3, #1
 80061b6:	4a06      	ldr	r2, [pc, #24]	; (80061d0 <vPortFree+0xc0>)
 80061b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80061ba:	f7ff f831 	bl	8005220 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061be:	bf00      	nop
 80061c0:	3718      	adds	r7, #24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20004554 	.word	0x20004554
 80061cc:	20004544 	.word	0x20004544
 80061d0:	20004550 	.word	0x20004550

080061d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80061de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061e0:	4b27      	ldr	r3, [pc, #156]	; (8006280 <prvHeapInit+0xac>)
 80061e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f003 0307 	and.w	r3, r3, #7
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00c      	beq.n	8006208 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3307      	adds	r3, #7
 80061f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f023 0307 	bic.w	r3, r3, #7
 80061fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	4a1f      	ldr	r2, [pc, #124]	; (8006280 <prvHeapInit+0xac>)
 8006204:	4413      	add	r3, r2
 8006206:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800620c:	4a1d      	ldr	r2, [pc, #116]	; (8006284 <prvHeapInit+0xb0>)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006212:	4b1c      	ldr	r3, [pc, #112]	; (8006284 <prvHeapInit+0xb0>)
 8006214:	2200      	movs	r2, #0
 8006216:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	4413      	add	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006220:	2208      	movs	r2, #8
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	1a9b      	subs	r3, r3, r2
 8006226:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 0307 	bic.w	r3, r3, #7
 800622e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4a15      	ldr	r2, [pc, #84]	; (8006288 <prvHeapInit+0xb4>)
 8006234:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006236:	4b14      	ldr	r3, [pc, #80]	; (8006288 <prvHeapInit+0xb4>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2200      	movs	r2, #0
 800623c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800623e:	4b12      	ldr	r3, [pc, #72]	; (8006288 <prvHeapInit+0xb4>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2200      	movs	r2, #0
 8006244:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	1ad2      	subs	r2, r2, r3
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006254:	4b0c      	ldr	r3, [pc, #48]	; (8006288 <prvHeapInit+0xb4>)
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	4a0a      	ldr	r2, [pc, #40]	; (800628c <prvHeapInit+0xb8>)
 8006262:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	4a09      	ldr	r2, [pc, #36]	; (8006290 <prvHeapInit+0xbc>)
 800626a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800626c:	4b09      	ldr	r3, [pc, #36]	; (8006294 <prvHeapInit+0xc0>)
 800626e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006272:	601a      	str	r2, [r3, #0]
}
 8006274:	bf00      	nop
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	20000938 	.word	0x20000938
 8006284:	20004538 	.word	0x20004538
 8006288:	20004540 	.word	0x20004540
 800628c:	20004548 	.word	0x20004548
 8006290:	20004544 	.word	0x20004544
 8006294:	20004554 	.word	0x20004554

08006298 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062a0:	4b28      	ldr	r3, [pc, #160]	; (8006344 <prvInsertBlockIntoFreeList+0xac>)
 80062a2:	60fb      	str	r3, [r7, #12]
 80062a4:	e002      	b.n	80062ac <prvInsertBlockIntoFreeList+0x14>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d8f7      	bhi.n	80062a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	4413      	add	r3, r2
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d108      	bne.n	80062da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	441a      	add	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	441a      	add	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d118      	bne.n	8006320 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	4b15      	ldr	r3, [pc, #84]	; (8006348 <prvInsertBlockIntoFreeList+0xb0>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d00d      	beq.n	8006316 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	441a      	add	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	e008      	b.n	8006328 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006316:	4b0c      	ldr	r3, [pc, #48]	; (8006348 <prvInsertBlockIntoFreeList+0xb0>)
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	e003      	b.n	8006328 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	429a      	cmp	r2, r3
 800632e:	d002      	beq.n	8006336 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006336:	bf00      	nop
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	20004538 	.word	0x20004538
 8006348:	20004540 	.word	0x20004540

0800634c <std>:
 800634c:	2300      	movs	r3, #0
 800634e:	b510      	push	{r4, lr}
 8006350:	4604      	mov	r4, r0
 8006352:	e9c0 3300 	strd	r3, r3, [r0]
 8006356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800635a:	6083      	str	r3, [r0, #8]
 800635c:	8181      	strh	r1, [r0, #12]
 800635e:	6643      	str	r3, [r0, #100]	; 0x64
 8006360:	81c2      	strh	r2, [r0, #14]
 8006362:	6183      	str	r3, [r0, #24]
 8006364:	4619      	mov	r1, r3
 8006366:	2208      	movs	r2, #8
 8006368:	305c      	adds	r0, #92	; 0x5c
 800636a:	f000 f9f7 	bl	800675c <memset>
 800636e:	4b0d      	ldr	r3, [pc, #52]	; (80063a4 <std+0x58>)
 8006370:	6263      	str	r3, [r4, #36]	; 0x24
 8006372:	4b0d      	ldr	r3, [pc, #52]	; (80063a8 <std+0x5c>)
 8006374:	62a3      	str	r3, [r4, #40]	; 0x28
 8006376:	4b0d      	ldr	r3, [pc, #52]	; (80063ac <std+0x60>)
 8006378:	62e3      	str	r3, [r4, #44]	; 0x2c
 800637a:	4b0d      	ldr	r3, [pc, #52]	; (80063b0 <std+0x64>)
 800637c:	6323      	str	r3, [r4, #48]	; 0x30
 800637e:	4b0d      	ldr	r3, [pc, #52]	; (80063b4 <std+0x68>)
 8006380:	6224      	str	r4, [r4, #32]
 8006382:	429c      	cmp	r4, r3
 8006384:	d006      	beq.n	8006394 <std+0x48>
 8006386:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800638a:	4294      	cmp	r4, r2
 800638c:	d002      	beq.n	8006394 <std+0x48>
 800638e:	33d0      	adds	r3, #208	; 0xd0
 8006390:	429c      	cmp	r4, r3
 8006392:	d105      	bne.n	80063a0 <std+0x54>
 8006394:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800639c:	f000 ba7c 	b.w	8006898 <__retarget_lock_init_recursive>
 80063a0:	bd10      	pop	{r4, pc}
 80063a2:	bf00      	nop
 80063a4:	080065ad 	.word	0x080065ad
 80063a8:	080065cf 	.word	0x080065cf
 80063ac:	08006607 	.word	0x08006607
 80063b0:	0800662b 	.word	0x0800662b
 80063b4:	20004558 	.word	0x20004558

080063b8 <stdio_exit_handler>:
 80063b8:	4a02      	ldr	r2, [pc, #8]	; (80063c4 <stdio_exit_handler+0xc>)
 80063ba:	4903      	ldr	r1, [pc, #12]	; (80063c8 <stdio_exit_handler+0x10>)
 80063bc:	4803      	ldr	r0, [pc, #12]	; (80063cc <stdio_exit_handler+0x14>)
 80063be:	f000 b869 	b.w	8006494 <_fwalk_sglue>
 80063c2:	bf00      	nop
 80063c4:	2000001c 	.word	0x2000001c
 80063c8:	08007161 	.word	0x08007161
 80063cc:	20000028 	.word	0x20000028

080063d0 <cleanup_stdio>:
 80063d0:	6841      	ldr	r1, [r0, #4]
 80063d2:	4b0c      	ldr	r3, [pc, #48]	; (8006404 <cleanup_stdio+0x34>)
 80063d4:	4299      	cmp	r1, r3
 80063d6:	b510      	push	{r4, lr}
 80063d8:	4604      	mov	r4, r0
 80063da:	d001      	beq.n	80063e0 <cleanup_stdio+0x10>
 80063dc:	f000 fec0 	bl	8007160 <_fflush_r>
 80063e0:	68a1      	ldr	r1, [r4, #8]
 80063e2:	4b09      	ldr	r3, [pc, #36]	; (8006408 <cleanup_stdio+0x38>)
 80063e4:	4299      	cmp	r1, r3
 80063e6:	d002      	beq.n	80063ee <cleanup_stdio+0x1e>
 80063e8:	4620      	mov	r0, r4
 80063ea:	f000 feb9 	bl	8007160 <_fflush_r>
 80063ee:	68e1      	ldr	r1, [r4, #12]
 80063f0:	4b06      	ldr	r3, [pc, #24]	; (800640c <cleanup_stdio+0x3c>)
 80063f2:	4299      	cmp	r1, r3
 80063f4:	d004      	beq.n	8006400 <cleanup_stdio+0x30>
 80063f6:	4620      	mov	r0, r4
 80063f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063fc:	f000 beb0 	b.w	8007160 <_fflush_r>
 8006400:	bd10      	pop	{r4, pc}
 8006402:	bf00      	nop
 8006404:	20004558 	.word	0x20004558
 8006408:	200045c0 	.word	0x200045c0
 800640c:	20004628 	.word	0x20004628

08006410 <global_stdio_init.part.0>:
 8006410:	b510      	push	{r4, lr}
 8006412:	4b0b      	ldr	r3, [pc, #44]	; (8006440 <global_stdio_init.part.0+0x30>)
 8006414:	4c0b      	ldr	r4, [pc, #44]	; (8006444 <global_stdio_init.part.0+0x34>)
 8006416:	4a0c      	ldr	r2, [pc, #48]	; (8006448 <global_stdio_init.part.0+0x38>)
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	4620      	mov	r0, r4
 800641c:	2200      	movs	r2, #0
 800641e:	2104      	movs	r1, #4
 8006420:	f7ff ff94 	bl	800634c <std>
 8006424:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006428:	2201      	movs	r2, #1
 800642a:	2109      	movs	r1, #9
 800642c:	f7ff ff8e 	bl	800634c <std>
 8006430:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006434:	2202      	movs	r2, #2
 8006436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800643a:	2112      	movs	r1, #18
 800643c:	f7ff bf86 	b.w	800634c <std>
 8006440:	20004690 	.word	0x20004690
 8006444:	20004558 	.word	0x20004558
 8006448:	080063b9 	.word	0x080063b9

0800644c <__sfp_lock_acquire>:
 800644c:	4801      	ldr	r0, [pc, #4]	; (8006454 <__sfp_lock_acquire+0x8>)
 800644e:	f000 ba24 	b.w	800689a <__retarget_lock_acquire_recursive>
 8006452:	bf00      	nop
 8006454:	20004699 	.word	0x20004699

08006458 <__sfp_lock_release>:
 8006458:	4801      	ldr	r0, [pc, #4]	; (8006460 <__sfp_lock_release+0x8>)
 800645a:	f000 ba1f 	b.w	800689c <__retarget_lock_release_recursive>
 800645e:	bf00      	nop
 8006460:	20004699 	.word	0x20004699

08006464 <__sinit>:
 8006464:	b510      	push	{r4, lr}
 8006466:	4604      	mov	r4, r0
 8006468:	f7ff fff0 	bl	800644c <__sfp_lock_acquire>
 800646c:	6a23      	ldr	r3, [r4, #32]
 800646e:	b11b      	cbz	r3, 8006478 <__sinit+0x14>
 8006470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006474:	f7ff bff0 	b.w	8006458 <__sfp_lock_release>
 8006478:	4b04      	ldr	r3, [pc, #16]	; (800648c <__sinit+0x28>)
 800647a:	6223      	str	r3, [r4, #32]
 800647c:	4b04      	ldr	r3, [pc, #16]	; (8006490 <__sinit+0x2c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1f5      	bne.n	8006470 <__sinit+0xc>
 8006484:	f7ff ffc4 	bl	8006410 <global_stdio_init.part.0>
 8006488:	e7f2      	b.n	8006470 <__sinit+0xc>
 800648a:	bf00      	nop
 800648c:	080063d1 	.word	0x080063d1
 8006490:	20004690 	.word	0x20004690

08006494 <_fwalk_sglue>:
 8006494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006498:	4607      	mov	r7, r0
 800649a:	4688      	mov	r8, r1
 800649c:	4614      	mov	r4, r2
 800649e:	2600      	movs	r6, #0
 80064a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064a4:	f1b9 0901 	subs.w	r9, r9, #1
 80064a8:	d505      	bpl.n	80064b6 <_fwalk_sglue+0x22>
 80064aa:	6824      	ldr	r4, [r4, #0]
 80064ac:	2c00      	cmp	r4, #0
 80064ae:	d1f7      	bne.n	80064a0 <_fwalk_sglue+0xc>
 80064b0:	4630      	mov	r0, r6
 80064b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064b6:	89ab      	ldrh	r3, [r5, #12]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d907      	bls.n	80064cc <_fwalk_sglue+0x38>
 80064bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064c0:	3301      	adds	r3, #1
 80064c2:	d003      	beq.n	80064cc <_fwalk_sglue+0x38>
 80064c4:	4629      	mov	r1, r5
 80064c6:	4638      	mov	r0, r7
 80064c8:	47c0      	blx	r8
 80064ca:	4306      	orrs	r6, r0
 80064cc:	3568      	adds	r5, #104	; 0x68
 80064ce:	e7e9      	b.n	80064a4 <_fwalk_sglue+0x10>

080064d0 <iprintf>:
 80064d0:	b40f      	push	{r0, r1, r2, r3}
 80064d2:	b507      	push	{r0, r1, r2, lr}
 80064d4:	4906      	ldr	r1, [pc, #24]	; (80064f0 <iprintf+0x20>)
 80064d6:	ab04      	add	r3, sp, #16
 80064d8:	6808      	ldr	r0, [r1, #0]
 80064da:	f853 2b04 	ldr.w	r2, [r3], #4
 80064de:	6881      	ldr	r1, [r0, #8]
 80064e0:	9301      	str	r3, [sp, #4]
 80064e2:	f000 fb0d 	bl	8006b00 <_vfiprintf_r>
 80064e6:	b003      	add	sp, #12
 80064e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80064ec:	b004      	add	sp, #16
 80064ee:	4770      	bx	lr
 80064f0:	20000074 	.word	0x20000074

080064f4 <_puts_r>:
 80064f4:	6a03      	ldr	r3, [r0, #32]
 80064f6:	b570      	push	{r4, r5, r6, lr}
 80064f8:	6884      	ldr	r4, [r0, #8]
 80064fa:	4605      	mov	r5, r0
 80064fc:	460e      	mov	r6, r1
 80064fe:	b90b      	cbnz	r3, 8006504 <_puts_r+0x10>
 8006500:	f7ff ffb0 	bl	8006464 <__sinit>
 8006504:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006506:	07db      	lsls	r3, r3, #31
 8006508:	d405      	bmi.n	8006516 <_puts_r+0x22>
 800650a:	89a3      	ldrh	r3, [r4, #12]
 800650c:	0598      	lsls	r0, r3, #22
 800650e:	d402      	bmi.n	8006516 <_puts_r+0x22>
 8006510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006512:	f000 f9c2 	bl	800689a <__retarget_lock_acquire_recursive>
 8006516:	89a3      	ldrh	r3, [r4, #12]
 8006518:	0719      	lsls	r1, r3, #28
 800651a:	d513      	bpl.n	8006544 <_puts_r+0x50>
 800651c:	6923      	ldr	r3, [r4, #16]
 800651e:	b18b      	cbz	r3, 8006544 <_puts_r+0x50>
 8006520:	3e01      	subs	r6, #1
 8006522:	68a3      	ldr	r3, [r4, #8]
 8006524:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006528:	3b01      	subs	r3, #1
 800652a:	60a3      	str	r3, [r4, #8]
 800652c:	b9e9      	cbnz	r1, 800656a <_puts_r+0x76>
 800652e:	2b00      	cmp	r3, #0
 8006530:	da2e      	bge.n	8006590 <_puts_r+0x9c>
 8006532:	4622      	mov	r2, r4
 8006534:	210a      	movs	r1, #10
 8006536:	4628      	mov	r0, r5
 8006538:	f000 f87b 	bl	8006632 <__swbuf_r>
 800653c:	3001      	adds	r0, #1
 800653e:	d007      	beq.n	8006550 <_puts_r+0x5c>
 8006540:	250a      	movs	r5, #10
 8006542:	e007      	b.n	8006554 <_puts_r+0x60>
 8006544:	4621      	mov	r1, r4
 8006546:	4628      	mov	r0, r5
 8006548:	f000 f8b0 	bl	80066ac <__swsetup_r>
 800654c:	2800      	cmp	r0, #0
 800654e:	d0e7      	beq.n	8006520 <_puts_r+0x2c>
 8006550:	f04f 35ff 	mov.w	r5, #4294967295
 8006554:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006556:	07da      	lsls	r2, r3, #31
 8006558:	d405      	bmi.n	8006566 <_puts_r+0x72>
 800655a:	89a3      	ldrh	r3, [r4, #12]
 800655c:	059b      	lsls	r3, r3, #22
 800655e:	d402      	bmi.n	8006566 <_puts_r+0x72>
 8006560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006562:	f000 f99b 	bl	800689c <__retarget_lock_release_recursive>
 8006566:	4628      	mov	r0, r5
 8006568:	bd70      	pop	{r4, r5, r6, pc}
 800656a:	2b00      	cmp	r3, #0
 800656c:	da04      	bge.n	8006578 <_puts_r+0x84>
 800656e:	69a2      	ldr	r2, [r4, #24]
 8006570:	429a      	cmp	r2, r3
 8006572:	dc06      	bgt.n	8006582 <_puts_r+0x8e>
 8006574:	290a      	cmp	r1, #10
 8006576:	d004      	beq.n	8006582 <_puts_r+0x8e>
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	1c5a      	adds	r2, r3, #1
 800657c:	6022      	str	r2, [r4, #0]
 800657e:	7019      	strb	r1, [r3, #0]
 8006580:	e7cf      	b.n	8006522 <_puts_r+0x2e>
 8006582:	4622      	mov	r2, r4
 8006584:	4628      	mov	r0, r5
 8006586:	f000 f854 	bl	8006632 <__swbuf_r>
 800658a:	3001      	adds	r0, #1
 800658c:	d1c9      	bne.n	8006522 <_puts_r+0x2e>
 800658e:	e7df      	b.n	8006550 <_puts_r+0x5c>
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	250a      	movs	r5, #10
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	6022      	str	r2, [r4, #0]
 8006598:	701d      	strb	r5, [r3, #0]
 800659a:	e7db      	b.n	8006554 <_puts_r+0x60>

0800659c <puts>:
 800659c:	4b02      	ldr	r3, [pc, #8]	; (80065a8 <puts+0xc>)
 800659e:	4601      	mov	r1, r0
 80065a0:	6818      	ldr	r0, [r3, #0]
 80065a2:	f7ff bfa7 	b.w	80064f4 <_puts_r>
 80065a6:	bf00      	nop
 80065a8:	20000074 	.word	0x20000074

080065ac <__sread>:
 80065ac:	b510      	push	{r4, lr}
 80065ae:	460c      	mov	r4, r1
 80065b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065b4:	f000 f922 	bl	80067fc <_read_r>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	bfab      	itete	ge
 80065bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065be:	89a3      	ldrhlt	r3, [r4, #12]
 80065c0:	181b      	addge	r3, r3, r0
 80065c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065c6:	bfac      	ite	ge
 80065c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80065ca:	81a3      	strhlt	r3, [r4, #12]
 80065cc:	bd10      	pop	{r4, pc}

080065ce <__swrite>:
 80065ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d2:	461f      	mov	r7, r3
 80065d4:	898b      	ldrh	r3, [r1, #12]
 80065d6:	05db      	lsls	r3, r3, #23
 80065d8:	4605      	mov	r5, r0
 80065da:	460c      	mov	r4, r1
 80065dc:	4616      	mov	r6, r2
 80065de:	d505      	bpl.n	80065ec <__swrite+0x1e>
 80065e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065e4:	2302      	movs	r3, #2
 80065e6:	2200      	movs	r2, #0
 80065e8:	f000 f8f6 	bl	80067d8 <_lseek_r>
 80065ec:	89a3      	ldrh	r3, [r4, #12]
 80065ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065f6:	81a3      	strh	r3, [r4, #12]
 80065f8:	4632      	mov	r2, r6
 80065fa:	463b      	mov	r3, r7
 80065fc:	4628      	mov	r0, r5
 80065fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006602:	f000 b90d 	b.w	8006820 <_write_r>

08006606 <__sseek>:
 8006606:	b510      	push	{r4, lr}
 8006608:	460c      	mov	r4, r1
 800660a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800660e:	f000 f8e3 	bl	80067d8 <_lseek_r>
 8006612:	1c43      	adds	r3, r0, #1
 8006614:	89a3      	ldrh	r3, [r4, #12]
 8006616:	bf15      	itete	ne
 8006618:	6560      	strne	r0, [r4, #84]	; 0x54
 800661a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800661e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006622:	81a3      	strheq	r3, [r4, #12]
 8006624:	bf18      	it	ne
 8006626:	81a3      	strhne	r3, [r4, #12]
 8006628:	bd10      	pop	{r4, pc}

0800662a <__sclose>:
 800662a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800662e:	f000 b8c3 	b.w	80067b8 <_close_r>

08006632 <__swbuf_r>:
 8006632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006634:	460e      	mov	r6, r1
 8006636:	4614      	mov	r4, r2
 8006638:	4605      	mov	r5, r0
 800663a:	b118      	cbz	r0, 8006644 <__swbuf_r+0x12>
 800663c:	6a03      	ldr	r3, [r0, #32]
 800663e:	b90b      	cbnz	r3, 8006644 <__swbuf_r+0x12>
 8006640:	f7ff ff10 	bl	8006464 <__sinit>
 8006644:	69a3      	ldr	r3, [r4, #24]
 8006646:	60a3      	str	r3, [r4, #8]
 8006648:	89a3      	ldrh	r3, [r4, #12]
 800664a:	071a      	lsls	r2, r3, #28
 800664c:	d525      	bpl.n	800669a <__swbuf_r+0x68>
 800664e:	6923      	ldr	r3, [r4, #16]
 8006650:	b31b      	cbz	r3, 800669a <__swbuf_r+0x68>
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	6922      	ldr	r2, [r4, #16]
 8006656:	1a98      	subs	r0, r3, r2
 8006658:	6963      	ldr	r3, [r4, #20]
 800665a:	b2f6      	uxtb	r6, r6
 800665c:	4283      	cmp	r3, r0
 800665e:	4637      	mov	r7, r6
 8006660:	dc04      	bgt.n	800666c <__swbuf_r+0x3a>
 8006662:	4621      	mov	r1, r4
 8006664:	4628      	mov	r0, r5
 8006666:	f000 fd7b 	bl	8007160 <_fflush_r>
 800666a:	b9e0      	cbnz	r0, 80066a6 <__swbuf_r+0x74>
 800666c:	68a3      	ldr	r3, [r4, #8]
 800666e:	3b01      	subs	r3, #1
 8006670:	60a3      	str	r3, [r4, #8]
 8006672:	6823      	ldr	r3, [r4, #0]
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	6022      	str	r2, [r4, #0]
 8006678:	701e      	strb	r6, [r3, #0]
 800667a:	6962      	ldr	r2, [r4, #20]
 800667c:	1c43      	adds	r3, r0, #1
 800667e:	429a      	cmp	r2, r3
 8006680:	d004      	beq.n	800668c <__swbuf_r+0x5a>
 8006682:	89a3      	ldrh	r3, [r4, #12]
 8006684:	07db      	lsls	r3, r3, #31
 8006686:	d506      	bpl.n	8006696 <__swbuf_r+0x64>
 8006688:	2e0a      	cmp	r6, #10
 800668a:	d104      	bne.n	8006696 <__swbuf_r+0x64>
 800668c:	4621      	mov	r1, r4
 800668e:	4628      	mov	r0, r5
 8006690:	f000 fd66 	bl	8007160 <_fflush_r>
 8006694:	b938      	cbnz	r0, 80066a6 <__swbuf_r+0x74>
 8006696:	4638      	mov	r0, r7
 8006698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800669a:	4621      	mov	r1, r4
 800669c:	4628      	mov	r0, r5
 800669e:	f000 f805 	bl	80066ac <__swsetup_r>
 80066a2:	2800      	cmp	r0, #0
 80066a4:	d0d5      	beq.n	8006652 <__swbuf_r+0x20>
 80066a6:	f04f 37ff 	mov.w	r7, #4294967295
 80066aa:	e7f4      	b.n	8006696 <__swbuf_r+0x64>

080066ac <__swsetup_r>:
 80066ac:	b538      	push	{r3, r4, r5, lr}
 80066ae:	4b2a      	ldr	r3, [pc, #168]	; (8006758 <__swsetup_r+0xac>)
 80066b0:	4605      	mov	r5, r0
 80066b2:	6818      	ldr	r0, [r3, #0]
 80066b4:	460c      	mov	r4, r1
 80066b6:	b118      	cbz	r0, 80066c0 <__swsetup_r+0x14>
 80066b8:	6a03      	ldr	r3, [r0, #32]
 80066ba:	b90b      	cbnz	r3, 80066c0 <__swsetup_r+0x14>
 80066bc:	f7ff fed2 	bl	8006464 <__sinit>
 80066c0:	89a3      	ldrh	r3, [r4, #12]
 80066c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066c6:	0718      	lsls	r0, r3, #28
 80066c8:	d422      	bmi.n	8006710 <__swsetup_r+0x64>
 80066ca:	06d9      	lsls	r1, r3, #27
 80066cc:	d407      	bmi.n	80066de <__swsetup_r+0x32>
 80066ce:	2309      	movs	r3, #9
 80066d0:	602b      	str	r3, [r5, #0]
 80066d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80066d6:	81a3      	strh	r3, [r4, #12]
 80066d8:	f04f 30ff 	mov.w	r0, #4294967295
 80066dc:	e034      	b.n	8006748 <__swsetup_r+0x9c>
 80066de:	0758      	lsls	r0, r3, #29
 80066e0:	d512      	bpl.n	8006708 <__swsetup_r+0x5c>
 80066e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066e4:	b141      	cbz	r1, 80066f8 <__swsetup_r+0x4c>
 80066e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066ea:	4299      	cmp	r1, r3
 80066ec:	d002      	beq.n	80066f4 <__swsetup_r+0x48>
 80066ee:	4628      	mov	r0, r5
 80066f0:	f000 f8e4 	bl	80068bc <_free_r>
 80066f4:	2300      	movs	r3, #0
 80066f6:	6363      	str	r3, [r4, #52]	; 0x34
 80066f8:	89a3      	ldrh	r3, [r4, #12]
 80066fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066fe:	81a3      	strh	r3, [r4, #12]
 8006700:	2300      	movs	r3, #0
 8006702:	6063      	str	r3, [r4, #4]
 8006704:	6923      	ldr	r3, [r4, #16]
 8006706:	6023      	str	r3, [r4, #0]
 8006708:	89a3      	ldrh	r3, [r4, #12]
 800670a:	f043 0308 	orr.w	r3, r3, #8
 800670e:	81a3      	strh	r3, [r4, #12]
 8006710:	6923      	ldr	r3, [r4, #16]
 8006712:	b94b      	cbnz	r3, 8006728 <__swsetup_r+0x7c>
 8006714:	89a3      	ldrh	r3, [r4, #12]
 8006716:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800671a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800671e:	d003      	beq.n	8006728 <__swsetup_r+0x7c>
 8006720:	4621      	mov	r1, r4
 8006722:	4628      	mov	r0, r5
 8006724:	f000 fd6a 	bl	80071fc <__smakebuf_r>
 8006728:	89a0      	ldrh	r0, [r4, #12]
 800672a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800672e:	f010 0301 	ands.w	r3, r0, #1
 8006732:	d00a      	beq.n	800674a <__swsetup_r+0x9e>
 8006734:	2300      	movs	r3, #0
 8006736:	60a3      	str	r3, [r4, #8]
 8006738:	6963      	ldr	r3, [r4, #20]
 800673a:	425b      	negs	r3, r3
 800673c:	61a3      	str	r3, [r4, #24]
 800673e:	6923      	ldr	r3, [r4, #16]
 8006740:	b943      	cbnz	r3, 8006754 <__swsetup_r+0xa8>
 8006742:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006746:	d1c4      	bne.n	80066d2 <__swsetup_r+0x26>
 8006748:	bd38      	pop	{r3, r4, r5, pc}
 800674a:	0781      	lsls	r1, r0, #30
 800674c:	bf58      	it	pl
 800674e:	6963      	ldrpl	r3, [r4, #20]
 8006750:	60a3      	str	r3, [r4, #8]
 8006752:	e7f4      	b.n	800673e <__swsetup_r+0x92>
 8006754:	2000      	movs	r0, #0
 8006756:	e7f7      	b.n	8006748 <__swsetup_r+0x9c>
 8006758:	20000074 	.word	0x20000074

0800675c <memset>:
 800675c:	4402      	add	r2, r0
 800675e:	4603      	mov	r3, r0
 8006760:	4293      	cmp	r3, r2
 8006762:	d100      	bne.n	8006766 <memset+0xa>
 8006764:	4770      	bx	lr
 8006766:	f803 1b01 	strb.w	r1, [r3], #1
 800676a:	e7f9      	b.n	8006760 <memset+0x4>

0800676c <strncmp>:
 800676c:	b510      	push	{r4, lr}
 800676e:	b16a      	cbz	r2, 800678c <strncmp+0x20>
 8006770:	3901      	subs	r1, #1
 8006772:	1884      	adds	r4, r0, r2
 8006774:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006778:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800677c:	429a      	cmp	r2, r3
 800677e:	d103      	bne.n	8006788 <strncmp+0x1c>
 8006780:	42a0      	cmp	r0, r4
 8006782:	d001      	beq.n	8006788 <strncmp+0x1c>
 8006784:	2a00      	cmp	r2, #0
 8006786:	d1f5      	bne.n	8006774 <strncmp+0x8>
 8006788:	1ad0      	subs	r0, r2, r3
 800678a:	bd10      	pop	{r4, pc}
 800678c:	4610      	mov	r0, r2
 800678e:	e7fc      	b.n	800678a <strncmp+0x1e>

08006790 <strncpy>:
 8006790:	b510      	push	{r4, lr}
 8006792:	3901      	subs	r1, #1
 8006794:	4603      	mov	r3, r0
 8006796:	b132      	cbz	r2, 80067a6 <strncpy+0x16>
 8006798:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800679c:	f803 4b01 	strb.w	r4, [r3], #1
 80067a0:	3a01      	subs	r2, #1
 80067a2:	2c00      	cmp	r4, #0
 80067a4:	d1f7      	bne.n	8006796 <strncpy+0x6>
 80067a6:	441a      	add	r2, r3
 80067a8:	2100      	movs	r1, #0
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d100      	bne.n	80067b0 <strncpy+0x20>
 80067ae:	bd10      	pop	{r4, pc}
 80067b0:	f803 1b01 	strb.w	r1, [r3], #1
 80067b4:	e7f9      	b.n	80067aa <strncpy+0x1a>
	...

080067b8 <_close_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4d06      	ldr	r5, [pc, #24]	; (80067d4 <_close_r+0x1c>)
 80067bc:	2300      	movs	r3, #0
 80067be:	4604      	mov	r4, r0
 80067c0:	4608      	mov	r0, r1
 80067c2:	602b      	str	r3, [r5, #0]
 80067c4:	f7fb f857 	bl	8001876 <_close>
 80067c8:	1c43      	adds	r3, r0, #1
 80067ca:	d102      	bne.n	80067d2 <_close_r+0x1a>
 80067cc:	682b      	ldr	r3, [r5, #0]
 80067ce:	b103      	cbz	r3, 80067d2 <_close_r+0x1a>
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	bd38      	pop	{r3, r4, r5, pc}
 80067d4:	20004694 	.word	0x20004694

080067d8 <_lseek_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	4d07      	ldr	r5, [pc, #28]	; (80067f8 <_lseek_r+0x20>)
 80067dc:	4604      	mov	r4, r0
 80067de:	4608      	mov	r0, r1
 80067e0:	4611      	mov	r1, r2
 80067e2:	2200      	movs	r2, #0
 80067e4:	602a      	str	r2, [r5, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	f7fb f86c 	bl	80018c4 <_lseek>
 80067ec:	1c43      	adds	r3, r0, #1
 80067ee:	d102      	bne.n	80067f6 <_lseek_r+0x1e>
 80067f0:	682b      	ldr	r3, [r5, #0]
 80067f2:	b103      	cbz	r3, 80067f6 <_lseek_r+0x1e>
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	bd38      	pop	{r3, r4, r5, pc}
 80067f8:	20004694 	.word	0x20004694

080067fc <_read_r>:
 80067fc:	b538      	push	{r3, r4, r5, lr}
 80067fe:	4d07      	ldr	r5, [pc, #28]	; (800681c <_read_r+0x20>)
 8006800:	4604      	mov	r4, r0
 8006802:	4608      	mov	r0, r1
 8006804:	4611      	mov	r1, r2
 8006806:	2200      	movs	r2, #0
 8006808:	602a      	str	r2, [r5, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	f7fa fffa 	bl	8001804 <_read>
 8006810:	1c43      	adds	r3, r0, #1
 8006812:	d102      	bne.n	800681a <_read_r+0x1e>
 8006814:	682b      	ldr	r3, [r5, #0]
 8006816:	b103      	cbz	r3, 800681a <_read_r+0x1e>
 8006818:	6023      	str	r3, [r4, #0]
 800681a:	bd38      	pop	{r3, r4, r5, pc}
 800681c:	20004694 	.word	0x20004694

08006820 <_write_r>:
 8006820:	b538      	push	{r3, r4, r5, lr}
 8006822:	4d07      	ldr	r5, [pc, #28]	; (8006840 <_write_r+0x20>)
 8006824:	4604      	mov	r4, r0
 8006826:	4608      	mov	r0, r1
 8006828:	4611      	mov	r1, r2
 800682a:	2200      	movs	r2, #0
 800682c:	602a      	str	r2, [r5, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	f7fb f805 	bl	800183e <_write>
 8006834:	1c43      	adds	r3, r0, #1
 8006836:	d102      	bne.n	800683e <_write_r+0x1e>
 8006838:	682b      	ldr	r3, [r5, #0]
 800683a:	b103      	cbz	r3, 800683e <_write_r+0x1e>
 800683c:	6023      	str	r3, [r4, #0]
 800683e:	bd38      	pop	{r3, r4, r5, pc}
 8006840:	20004694 	.word	0x20004694

08006844 <__errno>:
 8006844:	4b01      	ldr	r3, [pc, #4]	; (800684c <__errno+0x8>)
 8006846:	6818      	ldr	r0, [r3, #0]
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	20000074 	.word	0x20000074

08006850 <__libc_init_array>:
 8006850:	b570      	push	{r4, r5, r6, lr}
 8006852:	4d0d      	ldr	r5, [pc, #52]	; (8006888 <__libc_init_array+0x38>)
 8006854:	4c0d      	ldr	r4, [pc, #52]	; (800688c <__libc_init_array+0x3c>)
 8006856:	1b64      	subs	r4, r4, r5
 8006858:	10a4      	asrs	r4, r4, #2
 800685a:	2600      	movs	r6, #0
 800685c:	42a6      	cmp	r6, r4
 800685e:	d109      	bne.n	8006874 <__libc_init_array+0x24>
 8006860:	4d0b      	ldr	r5, [pc, #44]	; (8006890 <__libc_init_array+0x40>)
 8006862:	4c0c      	ldr	r4, [pc, #48]	; (8006894 <__libc_init_array+0x44>)
 8006864:	f000 fd38 	bl	80072d8 <_init>
 8006868:	1b64      	subs	r4, r4, r5
 800686a:	10a4      	asrs	r4, r4, #2
 800686c:	2600      	movs	r6, #0
 800686e:	42a6      	cmp	r6, r4
 8006870:	d105      	bne.n	800687e <__libc_init_array+0x2e>
 8006872:	bd70      	pop	{r4, r5, r6, pc}
 8006874:	f855 3b04 	ldr.w	r3, [r5], #4
 8006878:	4798      	blx	r3
 800687a:	3601      	adds	r6, #1
 800687c:	e7ee      	b.n	800685c <__libc_init_array+0xc>
 800687e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006882:	4798      	blx	r3
 8006884:	3601      	adds	r6, #1
 8006886:	e7f2      	b.n	800686e <__libc_init_array+0x1e>
 8006888:	08008190 	.word	0x08008190
 800688c:	08008190 	.word	0x08008190
 8006890:	08008190 	.word	0x08008190
 8006894:	08008194 	.word	0x08008194

08006898 <__retarget_lock_init_recursive>:
 8006898:	4770      	bx	lr

0800689a <__retarget_lock_acquire_recursive>:
 800689a:	4770      	bx	lr

0800689c <__retarget_lock_release_recursive>:
 800689c:	4770      	bx	lr

0800689e <memcpy>:
 800689e:	440a      	add	r2, r1
 80068a0:	4291      	cmp	r1, r2
 80068a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80068a6:	d100      	bne.n	80068aa <memcpy+0xc>
 80068a8:	4770      	bx	lr
 80068aa:	b510      	push	{r4, lr}
 80068ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068b4:	4291      	cmp	r1, r2
 80068b6:	d1f9      	bne.n	80068ac <memcpy+0xe>
 80068b8:	bd10      	pop	{r4, pc}
	...

080068bc <_free_r>:
 80068bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068be:	2900      	cmp	r1, #0
 80068c0:	d044      	beq.n	800694c <_free_r+0x90>
 80068c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068c6:	9001      	str	r0, [sp, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f1a1 0404 	sub.w	r4, r1, #4
 80068ce:	bfb8      	it	lt
 80068d0:	18e4      	addlt	r4, r4, r3
 80068d2:	f000 f8df 	bl	8006a94 <__malloc_lock>
 80068d6:	4a1e      	ldr	r2, [pc, #120]	; (8006950 <_free_r+0x94>)
 80068d8:	9801      	ldr	r0, [sp, #4]
 80068da:	6813      	ldr	r3, [r2, #0]
 80068dc:	b933      	cbnz	r3, 80068ec <_free_r+0x30>
 80068de:	6063      	str	r3, [r4, #4]
 80068e0:	6014      	str	r4, [r2, #0]
 80068e2:	b003      	add	sp, #12
 80068e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068e8:	f000 b8da 	b.w	8006aa0 <__malloc_unlock>
 80068ec:	42a3      	cmp	r3, r4
 80068ee:	d908      	bls.n	8006902 <_free_r+0x46>
 80068f0:	6825      	ldr	r5, [r4, #0]
 80068f2:	1961      	adds	r1, r4, r5
 80068f4:	428b      	cmp	r3, r1
 80068f6:	bf01      	itttt	eq
 80068f8:	6819      	ldreq	r1, [r3, #0]
 80068fa:	685b      	ldreq	r3, [r3, #4]
 80068fc:	1949      	addeq	r1, r1, r5
 80068fe:	6021      	streq	r1, [r4, #0]
 8006900:	e7ed      	b.n	80068de <_free_r+0x22>
 8006902:	461a      	mov	r2, r3
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	b10b      	cbz	r3, 800690c <_free_r+0x50>
 8006908:	42a3      	cmp	r3, r4
 800690a:	d9fa      	bls.n	8006902 <_free_r+0x46>
 800690c:	6811      	ldr	r1, [r2, #0]
 800690e:	1855      	adds	r5, r2, r1
 8006910:	42a5      	cmp	r5, r4
 8006912:	d10b      	bne.n	800692c <_free_r+0x70>
 8006914:	6824      	ldr	r4, [r4, #0]
 8006916:	4421      	add	r1, r4
 8006918:	1854      	adds	r4, r2, r1
 800691a:	42a3      	cmp	r3, r4
 800691c:	6011      	str	r1, [r2, #0]
 800691e:	d1e0      	bne.n	80068e2 <_free_r+0x26>
 8006920:	681c      	ldr	r4, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	6053      	str	r3, [r2, #4]
 8006926:	440c      	add	r4, r1
 8006928:	6014      	str	r4, [r2, #0]
 800692a:	e7da      	b.n	80068e2 <_free_r+0x26>
 800692c:	d902      	bls.n	8006934 <_free_r+0x78>
 800692e:	230c      	movs	r3, #12
 8006930:	6003      	str	r3, [r0, #0]
 8006932:	e7d6      	b.n	80068e2 <_free_r+0x26>
 8006934:	6825      	ldr	r5, [r4, #0]
 8006936:	1961      	adds	r1, r4, r5
 8006938:	428b      	cmp	r3, r1
 800693a:	bf04      	itt	eq
 800693c:	6819      	ldreq	r1, [r3, #0]
 800693e:	685b      	ldreq	r3, [r3, #4]
 8006940:	6063      	str	r3, [r4, #4]
 8006942:	bf04      	itt	eq
 8006944:	1949      	addeq	r1, r1, r5
 8006946:	6021      	streq	r1, [r4, #0]
 8006948:	6054      	str	r4, [r2, #4]
 800694a:	e7ca      	b.n	80068e2 <_free_r+0x26>
 800694c:	b003      	add	sp, #12
 800694e:	bd30      	pop	{r4, r5, pc}
 8006950:	2000469c 	.word	0x2000469c

08006954 <sbrk_aligned>:
 8006954:	b570      	push	{r4, r5, r6, lr}
 8006956:	4e0e      	ldr	r6, [pc, #56]	; (8006990 <sbrk_aligned+0x3c>)
 8006958:	460c      	mov	r4, r1
 800695a:	6831      	ldr	r1, [r6, #0]
 800695c:	4605      	mov	r5, r0
 800695e:	b911      	cbnz	r1, 8006966 <sbrk_aligned+0x12>
 8006960:	f000 fcaa 	bl	80072b8 <_sbrk_r>
 8006964:	6030      	str	r0, [r6, #0]
 8006966:	4621      	mov	r1, r4
 8006968:	4628      	mov	r0, r5
 800696a:	f000 fca5 	bl	80072b8 <_sbrk_r>
 800696e:	1c43      	adds	r3, r0, #1
 8006970:	d00a      	beq.n	8006988 <sbrk_aligned+0x34>
 8006972:	1cc4      	adds	r4, r0, #3
 8006974:	f024 0403 	bic.w	r4, r4, #3
 8006978:	42a0      	cmp	r0, r4
 800697a:	d007      	beq.n	800698c <sbrk_aligned+0x38>
 800697c:	1a21      	subs	r1, r4, r0
 800697e:	4628      	mov	r0, r5
 8006980:	f000 fc9a 	bl	80072b8 <_sbrk_r>
 8006984:	3001      	adds	r0, #1
 8006986:	d101      	bne.n	800698c <sbrk_aligned+0x38>
 8006988:	f04f 34ff 	mov.w	r4, #4294967295
 800698c:	4620      	mov	r0, r4
 800698e:	bd70      	pop	{r4, r5, r6, pc}
 8006990:	200046a0 	.word	0x200046a0

08006994 <_malloc_r>:
 8006994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006998:	1ccd      	adds	r5, r1, #3
 800699a:	f025 0503 	bic.w	r5, r5, #3
 800699e:	3508      	adds	r5, #8
 80069a0:	2d0c      	cmp	r5, #12
 80069a2:	bf38      	it	cc
 80069a4:	250c      	movcc	r5, #12
 80069a6:	2d00      	cmp	r5, #0
 80069a8:	4607      	mov	r7, r0
 80069aa:	db01      	blt.n	80069b0 <_malloc_r+0x1c>
 80069ac:	42a9      	cmp	r1, r5
 80069ae:	d905      	bls.n	80069bc <_malloc_r+0x28>
 80069b0:	230c      	movs	r3, #12
 80069b2:	603b      	str	r3, [r7, #0]
 80069b4:	2600      	movs	r6, #0
 80069b6:	4630      	mov	r0, r6
 80069b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a90 <_malloc_r+0xfc>
 80069c0:	f000 f868 	bl	8006a94 <__malloc_lock>
 80069c4:	f8d8 3000 	ldr.w	r3, [r8]
 80069c8:	461c      	mov	r4, r3
 80069ca:	bb5c      	cbnz	r4, 8006a24 <_malloc_r+0x90>
 80069cc:	4629      	mov	r1, r5
 80069ce:	4638      	mov	r0, r7
 80069d0:	f7ff ffc0 	bl	8006954 <sbrk_aligned>
 80069d4:	1c43      	adds	r3, r0, #1
 80069d6:	4604      	mov	r4, r0
 80069d8:	d155      	bne.n	8006a86 <_malloc_r+0xf2>
 80069da:	f8d8 4000 	ldr.w	r4, [r8]
 80069de:	4626      	mov	r6, r4
 80069e0:	2e00      	cmp	r6, #0
 80069e2:	d145      	bne.n	8006a70 <_malloc_r+0xdc>
 80069e4:	2c00      	cmp	r4, #0
 80069e6:	d048      	beq.n	8006a7a <_malloc_r+0xe6>
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	4631      	mov	r1, r6
 80069ec:	4638      	mov	r0, r7
 80069ee:	eb04 0903 	add.w	r9, r4, r3
 80069f2:	f000 fc61 	bl	80072b8 <_sbrk_r>
 80069f6:	4581      	cmp	r9, r0
 80069f8:	d13f      	bne.n	8006a7a <_malloc_r+0xe6>
 80069fa:	6821      	ldr	r1, [r4, #0]
 80069fc:	1a6d      	subs	r5, r5, r1
 80069fe:	4629      	mov	r1, r5
 8006a00:	4638      	mov	r0, r7
 8006a02:	f7ff ffa7 	bl	8006954 <sbrk_aligned>
 8006a06:	3001      	adds	r0, #1
 8006a08:	d037      	beq.n	8006a7a <_malloc_r+0xe6>
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	442b      	add	r3, r5
 8006a0e:	6023      	str	r3, [r4, #0]
 8006a10:	f8d8 3000 	ldr.w	r3, [r8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d038      	beq.n	8006a8a <_malloc_r+0xf6>
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	42a2      	cmp	r2, r4
 8006a1c:	d12b      	bne.n	8006a76 <_malloc_r+0xe2>
 8006a1e:	2200      	movs	r2, #0
 8006a20:	605a      	str	r2, [r3, #4]
 8006a22:	e00f      	b.n	8006a44 <_malloc_r+0xb0>
 8006a24:	6822      	ldr	r2, [r4, #0]
 8006a26:	1b52      	subs	r2, r2, r5
 8006a28:	d41f      	bmi.n	8006a6a <_malloc_r+0xd6>
 8006a2a:	2a0b      	cmp	r2, #11
 8006a2c:	d917      	bls.n	8006a5e <_malloc_r+0xca>
 8006a2e:	1961      	adds	r1, r4, r5
 8006a30:	42a3      	cmp	r3, r4
 8006a32:	6025      	str	r5, [r4, #0]
 8006a34:	bf18      	it	ne
 8006a36:	6059      	strne	r1, [r3, #4]
 8006a38:	6863      	ldr	r3, [r4, #4]
 8006a3a:	bf08      	it	eq
 8006a3c:	f8c8 1000 	streq.w	r1, [r8]
 8006a40:	5162      	str	r2, [r4, r5]
 8006a42:	604b      	str	r3, [r1, #4]
 8006a44:	4638      	mov	r0, r7
 8006a46:	f104 060b 	add.w	r6, r4, #11
 8006a4a:	f000 f829 	bl	8006aa0 <__malloc_unlock>
 8006a4e:	f026 0607 	bic.w	r6, r6, #7
 8006a52:	1d23      	adds	r3, r4, #4
 8006a54:	1af2      	subs	r2, r6, r3
 8006a56:	d0ae      	beq.n	80069b6 <_malloc_r+0x22>
 8006a58:	1b9b      	subs	r3, r3, r6
 8006a5a:	50a3      	str	r3, [r4, r2]
 8006a5c:	e7ab      	b.n	80069b6 <_malloc_r+0x22>
 8006a5e:	42a3      	cmp	r3, r4
 8006a60:	6862      	ldr	r2, [r4, #4]
 8006a62:	d1dd      	bne.n	8006a20 <_malloc_r+0x8c>
 8006a64:	f8c8 2000 	str.w	r2, [r8]
 8006a68:	e7ec      	b.n	8006a44 <_malloc_r+0xb0>
 8006a6a:	4623      	mov	r3, r4
 8006a6c:	6864      	ldr	r4, [r4, #4]
 8006a6e:	e7ac      	b.n	80069ca <_malloc_r+0x36>
 8006a70:	4634      	mov	r4, r6
 8006a72:	6876      	ldr	r6, [r6, #4]
 8006a74:	e7b4      	b.n	80069e0 <_malloc_r+0x4c>
 8006a76:	4613      	mov	r3, r2
 8006a78:	e7cc      	b.n	8006a14 <_malloc_r+0x80>
 8006a7a:	230c      	movs	r3, #12
 8006a7c:	603b      	str	r3, [r7, #0]
 8006a7e:	4638      	mov	r0, r7
 8006a80:	f000 f80e 	bl	8006aa0 <__malloc_unlock>
 8006a84:	e797      	b.n	80069b6 <_malloc_r+0x22>
 8006a86:	6025      	str	r5, [r4, #0]
 8006a88:	e7dc      	b.n	8006a44 <_malloc_r+0xb0>
 8006a8a:	605b      	str	r3, [r3, #4]
 8006a8c:	deff      	udf	#255	; 0xff
 8006a8e:	bf00      	nop
 8006a90:	2000469c 	.word	0x2000469c

08006a94 <__malloc_lock>:
 8006a94:	4801      	ldr	r0, [pc, #4]	; (8006a9c <__malloc_lock+0x8>)
 8006a96:	f7ff bf00 	b.w	800689a <__retarget_lock_acquire_recursive>
 8006a9a:	bf00      	nop
 8006a9c:	20004698 	.word	0x20004698

08006aa0 <__malloc_unlock>:
 8006aa0:	4801      	ldr	r0, [pc, #4]	; (8006aa8 <__malloc_unlock+0x8>)
 8006aa2:	f7ff befb 	b.w	800689c <__retarget_lock_release_recursive>
 8006aa6:	bf00      	nop
 8006aa8:	20004698 	.word	0x20004698

08006aac <__sfputc_r>:
 8006aac:	6893      	ldr	r3, [r2, #8]
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	b410      	push	{r4}
 8006ab4:	6093      	str	r3, [r2, #8]
 8006ab6:	da08      	bge.n	8006aca <__sfputc_r+0x1e>
 8006ab8:	6994      	ldr	r4, [r2, #24]
 8006aba:	42a3      	cmp	r3, r4
 8006abc:	db01      	blt.n	8006ac2 <__sfputc_r+0x16>
 8006abe:	290a      	cmp	r1, #10
 8006ac0:	d103      	bne.n	8006aca <__sfputc_r+0x1e>
 8006ac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ac6:	f7ff bdb4 	b.w	8006632 <__swbuf_r>
 8006aca:	6813      	ldr	r3, [r2, #0]
 8006acc:	1c58      	adds	r0, r3, #1
 8006ace:	6010      	str	r0, [r2, #0]
 8006ad0:	7019      	strb	r1, [r3, #0]
 8006ad2:	4608      	mov	r0, r1
 8006ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <__sfputs_r>:
 8006ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006adc:	4606      	mov	r6, r0
 8006ade:	460f      	mov	r7, r1
 8006ae0:	4614      	mov	r4, r2
 8006ae2:	18d5      	adds	r5, r2, r3
 8006ae4:	42ac      	cmp	r4, r5
 8006ae6:	d101      	bne.n	8006aec <__sfputs_r+0x12>
 8006ae8:	2000      	movs	r0, #0
 8006aea:	e007      	b.n	8006afc <__sfputs_r+0x22>
 8006aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006af0:	463a      	mov	r2, r7
 8006af2:	4630      	mov	r0, r6
 8006af4:	f7ff ffda 	bl	8006aac <__sfputc_r>
 8006af8:	1c43      	adds	r3, r0, #1
 8006afa:	d1f3      	bne.n	8006ae4 <__sfputs_r+0xa>
 8006afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b00 <_vfiprintf_r>:
 8006b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b04:	460d      	mov	r5, r1
 8006b06:	b09d      	sub	sp, #116	; 0x74
 8006b08:	4614      	mov	r4, r2
 8006b0a:	4698      	mov	r8, r3
 8006b0c:	4606      	mov	r6, r0
 8006b0e:	b118      	cbz	r0, 8006b18 <_vfiprintf_r+0x18>
 8006b10:	6a03      	ldr	r3, [r0, #32]
 8006b12:	b90b      	cbnz	r3, 8006b18 <_vfiprintf_r+0x18>
 8006b14:	f7ff fca6 	bl	8006464 <__sinit>
 8006b18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b1a:	07d9      	lsls	r1, r3, #31
 8006b1c:	d405      	bmi.n	8006b2a <_vfiprintf_r+0x2a>
 8006b1e:	89ab      	ldrh	r3, [r5, #12]
 8006b20:	059a      	lsls	r2, r3, #22
 8006b22:	d402      	bmi.n	8006b2a <_vfiprintf_r+0x2a>
 8006b24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b26:	f7ff feb8 	bl	800689a <__retarget_lock_acquire_recursive>
 8006b2a:	89ab      	ldrh	r3, [r5, #12]
 8006b2c:	071b      	lsls	r3, r3, #28
 8006b2e:	d501      	bpl.n	8006b34 <_vfiprintf_r+0x34>
 8006b30:	692b      	ldr	r3, [r5, #16]
 8006b32:	b99b      	cbnz	r3, 8006b5c <_vfiprintf_r+0x5c>
 8006b34:	4629      	mov	r1, r5
 8006b36:	4630      	mov	r0, r6
 8006b38:	f7ff fdb8 	bl	80066ac <__swsetup_r>
 8006b3c:	b170      	cbz	r0, 8006b5c <_vfiprintf_r+0x5c>
 8006b3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b40:	07dc      	lsls	r4, r3, #31
 8006b42:	d504      	bpl.n	8006b4e <_vfiprintf_r+0x4e>
 8006b44:	f04f 30ff 	mov.w	r0, #4294967295
 8006b48:	b01d      	add	sp, #116	; 0x74
 8006b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b4e:	89ab      	ldrh	r3, [r5, #12]
 8006b50:	0598      	lsls	r0, r3, #22
 8006b52:	d4f7      	bmi.n	8006b44 <_vfiprintf_r+0x44>
 8006b54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b56:	f7ff fea1 	bl	800689c <__retarget_lock_release_recursive>
 8006b5a:	e7f3      	b.n	8006b44 <_vfiprintf_r+0x44>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b60:	2320      	movs	r3, #32
 8006b62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b66:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b6a:	2330      	movs	r3, #48	; 0x30
 8006b6c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006d20 <_vfiprintf_r+0x220>
 8006b70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b74:	f04f 0901 	mov.w	r9, #1
 8006b78:	4623      	mov	r3, r4
 8006b7a:	469a      	mov	sl, r3
 8006b7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b80:	b10a      	cbz	r2, 8006b86 <_vfiprintf_r+0x86>
 8006b82:	2a25      	cmp	r2, #37	; 0x25
 8006b84:	d1f9      	bne.n	8006b7a <_vfiprintf_r+0x7a>
 8006b86:	ebba 0b04 	subs.w	fp, sl, r4
 8006b8a:	d00b      	beq.n	8006ba4 <_vfiprintf_r+0xa4>
 8006b8c:	465b      	mov	r3, fp
 8006b8e:	4622      	mov	r2, r4
 8006b90:	4629      	mov	r1, r5
 8006b92:	4630      	mov	r0, r6
 8006b94:	f7ff ffa1 	bl	8006ada <__sfputs_r>
 8006b98:	3001      	adds	r0, #1
 8006b9a:	f000 80a9 	beq.w	8006cf0 <_vfiprintf_r+0x1f0>
 8006b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ba0:	445a      	add	r2, fp
 8006ba2:	9209      	str	r2, [sp, #36]	; 0x24
 8006ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f000 80a1 	beq.w	8006cf0 <_vfiprintf_r+0x1f0>
 8006bae:	2300      	movs	r3, #0
 8006bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bb8:	f10a 0a01 	add.w	sl, sl, #1
 8006bbc:	9304      	str	r3, [sp, #16]
 8006bbe:	9307      	str	r3, [sp, #28]
 8006bc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bc4:	931a      	str	r3, [sp, #104]	; 0x68
 8006bc6:	4654      	mov	r4, sl
 8006bc8:	2205      	movs	r2, #5
 8006bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bce:	4854      	ldr	r0, [pc, #336]	; (8006d20 <_vfiprintf_r+0x220>)
 8006bd0:	f7f9 fb1e 	bl	8000210 <memchr>
 8006bd4:	9a04      	ldr	r2, [sp, #16]
 8006bd6:	b9d8      	cbnz	r0, 8006c10 <_vfiprintf_r+0x110>
 8006bd8:	06d1      	lsls	r1, r2, #27
 8006bda:	bf44      	itt	mi
 8006bdc:	2320      	movmi	r3, #32
 8006bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006be2:	0713      	lsls	r3, r2, #28
 8006be4:	bf44      	itt	mi
 8006be6:	232b      	movmi	r3, #43	; 0x2b
 8006be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bec:	f89a 3000 	ldrb.w	r3, [sl]
 8006bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8006bf2:	d015      	beq.n	8006c20 <_vfiprintf_r+0x120>
 8006bf4:	9a07      	ldr	r2, [sp, #28]
 8006bf6:	4654      	mov	r4, sl
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	f04f 0c0a 	mov.w	ip, #10
 8006bfe:	4621      	mov	r1, r4
 8006c00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c04:	3b30      	subs	r3, #48	; 0x30
 8006c06:	2b09      	cmp	r3, #9
 8006c08:	d94d      	bls.n	8006ca6 <_vfiprintf_r+0x1a6>
 8006c0a:	b1b0      	cbz	r0, 8006c3a <_vfiprintf_r+0x13a>
 8006c0c:	9207      	str	r2, [sp, #28]
 8006c0e:	e014      	b.n	8006c3a <_vfiprintf_r+0x13a>
 8006c10:	eba0 0308 	sub.w	r3, r0, r8
 8006c14:	fa09 f303 	lsl.w	r3, r9, r3
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	9304      	str	r3, [sp, #16]
 8006c1c:	46a2      	mov	sl, r4
 8006c1e:	e7d2      	b.n	8006bc6 <_vfiprintf_r+0xc6>
 8006c20:	9b03      	ldr	r3, [sp, #12]
 8006c22:	1d19      	adds	r1, r3, #4
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	9103      	str	r1, [sp, #12]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	bfbb      	ittet	lt
 8006c2c:	425b      	neglt	r3, r3
 8006c2e:	f042 0202 	orrlt.w	r2, r2, #2
 8006c32:	9307      	strge	r3, [sp, #28]
 8006c34:	9307      	strlt	r3, [sp, #28]
 8006c36:	bfb8      	it	lt
 8006c38:	9204      	strlt	r2, [sp, #16]
 8006c3a:	7823      	ldrb	r3, [r4, #0]
 8006c3c:	2b2e      	cmp	r3, #46	; 0x2e
 8006c3e:	d10c      	bne.n	8006c5a <_vfiprintf_r+0x15a>
 8006c40:	7863      	ldrb	r3, [r4, #1]
 8006c42:	2b2a      	cmp	r3, #42	; 0x2a
 8006c44:	d134      	bne.n	8006cb0 <_vfiprintf_r+0x1b0>
 8006c46:	9b03      	ldr	r3, [sp, #12]
 8006c48:	1d1a      	adds	r2, r3, #4
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	9203      	str	r2, [sp, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	bfb8      	it	lt
 8006c52:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c56:	3402      	adds	r4, #2
 8006c58:	9305      	str	r3, [sp, #20]
 8006c5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006d30 <_vfiprintf_r+0x230>
 8006c5e:	7821      	ldrb	r1, [r4, #0]
 8006c60:	2203      	movs	r2, #3
 8006c62:	4650      	mov	r0, sl
 8006c64:	f7f9 fad4 	bl	8000210 <memchr>
 8006c68:	b138      	cbz	r0, 8006c7a <_vfiprintf_r+0x17a>
 8006c6a:	9b04      	ldr	r3, [sp, #16]
 8006c6c:	eba0 000a 	sub.w	r0, r0, sl
 8006c70:	2240      	movs	r2, #64	; 0x40
 8006c72:	4082      	lsls	r2, r0
 8006c74:	4313      	orrs	r3, r2
 8006c76:	3401      	adds	r4, #1
 8006c78:	9304      	str	r3, [sp, #16]
 8006c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c7e:	4829      	ldr	r0, [pc, #164]	; (8006d24 <_vfiprintf_r+0x224>)
 8006c80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c84:	2206      	movs	r2, #6
 8006c86:	f7f9 fac3 	bl	8000210 <memchr>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	d03f      	beq.n	8006d0e <_vfiprintf_r+0x20e>
 8006c8e:	4b26      	ldr	r3, [pc, #152]	; (8006d28 <_vfiprintf_r+0x228>)
 8006c90:	bb1b      	cbnz	r3, 8006cda <_vfiprintf_r+0x1da>
 8006c92:	9b03      	ldr	r3, [sp, #12]
 8006c94:	3307      	adds	r3, #7
 8006c96:	f023 0307 	bic.w	r3, r3, #7
 8006c9a:	3308      	adds	r3, #8
 8006c9c:	9303      	str	r3, [sp, #12]
 8006c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca0:	443b      	add	r3, r7
 8006ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ca4:	e768      	b.n	8006b78 <_vfiprintf_r+0x78>
 8006ca6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006caa:	460c      	mov	r4, r1
 8006cac:	2001      	movs	r0, #1
 8006cae:	e7a6      	b.n	8006bfe <_vfiprintf_r+0xfe>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	3401      	adds	r4, #1
 8006cb4:	9305      	str	r3, [sp, #20]
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	f04f 0c0a 	mov.w	ip, #10
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cc2:	3a30      	subs	r2, #48	; 0x30
 8006cc4:	2a09      	cmp	r2, #9
 8006cc6:	d903      	bls.n	8006cd0 <_vfiprintf_r+0x1d0>
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d0c6      	beq.n	8006c5a <_vfiprintf_r+0x15a>
 8006ccc:	9105      	str	r1, [sp, #20]
 8006cce:	e7c4      	b.n	8006c5a <_vfiprintf_r+0x15a>
 8006cd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cd4:	4604      	mov	r4, r0
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e7f0      	b.n	8006cbc <_vfiprintf_r+0x1bc>
 8006cda:	ab03      	add	r3, sp, #12
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	462a      	mov	r2, r5
 8006ce0:	4b12      	ldr	r3, [pc, #72]	; (8006d2c <_vfiprintf_r+0x22c>)
 8006ce2:	a904      	add	r1, sp, #16
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	f3af 8000 	nop.w
 8006cea:	4607      	mov	r7, r0
 8006cec:	1c78      	adds	r0, r7, #1
 8006cee:	d1d6      	bne.n	8006c9e <_vfiprintf_r+0x19e>
 8006cf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cf2:	07d9      	lsls	r1, r3, #31
 8006cf4:	d405      	bmi.n	8006d02 <_vfiprintf_r+0x202>
 8006cf6:	89ab      	ldrh	r3, [r5, #12]
 8006cf8:	059a      	lsls	r2, r3, #22
 8006cfa:	d402      	bmi.n	8006d02 <_vfiprintf_r+0x202>
 8006cfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cfe:	f7ff fdcd 	bl	800689c <__retarget_lock_release_recursive>
 8006d02:	89ab      	ldrh	r3, [r5, #12]
 8006d04:	065b      	lsls	r3, r3, #25
 8006d06:	f53f af1d 	bmi.w	8006b44 <_vfiprintf_r+0x44>
 8006d0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d0c:	e71c      	b.n	8006b48 <_vfiprintf_r+0x48>
 8006d0e:	ab03      	add	r3, sp, #12
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	462a      	mov	r2, r5
 8006d14:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <_vfiprintf_r+0x22c>)
 8006d16:	a904      	add	r1, sp, #16
 8006d18:	4630      	mov	r0, r6
 8006d1a:	f000 f879 	bl	8006e10 <_printf_i>
 8006d1e:	e7e4      	b.n	8006cea <_vfiprintf_r+0x1ea>
 8006d20:	08008154 	.word	0x08008154
 8006d24:	0800815e 	.word	0x0800815e
 8006d28:	00000000 	.word	0x00000000
 8006d2c:	08006adb 	.word	0x08006adb
 8006d30:	0800815a 	.word	0x0800815a

08006d34 <_printf_common>:
 8006d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d38:	4616      	mov	r6, r2
 8006d3a:	4699      	mov	r9, r3
 8006d3c:	688a      	ldr	r2, [r1, #8]
 8006d3e:	690b      	ldr	r3, [r1, #16]
 8006d40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d44:	4293      	cmp	r3, r2
 8006d46:	bfb8      	it	lt
 8006d48:	4613      	movlt	r3, r2
 8006d4a:	6033      	str	r3, [r6, #0]
 8006d4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d50:	4607      	mov	r7, r0
 8006d52:	460c      	mov	r4, r1
 8006d54:	b10a      	cbz	r2, 8006d5a <_printf_common+0x26>
 8006d56:	3301      	adds	r3, #1
 8006d58:	6033      	str	r3, [r6, #0]
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	0699      	lsls	r1, r3, #26
 8006d5e:	bf42      	ittt	mi
 8006d60:	6833      	ldrmi	r3, [r6, #0]
 8006d62:	3302      	addmi	r3, #2
 8006d64:	6033      	strmi	r3, [r6, #0]
 8006d66:	6825      	ldr	r5, [r4, #0]
 8006d68:	f015 0506 	ands.w	r5, r5, #6
 8006d6c:	d106      	bne.n	8006d7c <_printf_common+0x48>
 8006d6e:	f104 0a19 	add.w	sl, r4, #25
 8006d72:	68e3      	ldr	r3, [r4, #12]
 8006d74:	6832      	ldr	r2, [r6, #0]
 8006d76:	1a9b      	subs	r3, r3, r2
 8006d78:	42ab      	cmp	r3, r5
 8006d7a:	dc26      	bgt.n	8006dca <_printf_common+0x96>
 8006d7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d80:	1e13      	subs	r3, r2, #0
 8006d82:	6822      	ldr	r2, [r4, #0]
 8006d84:	bf18      	it	ne
 8006d86:	2301      	movne	r3, #1
 8006d88:	0692      	lsls	r2, r2, #26
 8006d8a:	d42b      	bmi.n	8006de4 <_printf_common+0xb0>
 8006d8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d90:	4649      	mov	r1, r9
 8006d92:	4638      	mov	r0, r7
 8006d94:	47c0      	blx	r8
 8006d96:	3001      	adds	r0, #1
 8006d98:	d01e      	beq.n	8006dd8 <_printf_common+0xa4>
 8006d9a:	6823      	ldr	r3, [r4, #0]
 8006d9c:	6922      	ldr	r2, [r4, #16]
 8006d9e:	f003 0306 	and.w	r3, r3, #6
 8006da2:	2b04      	cmp	r3, #4
 8006da4:	bf02      	ittt	eq
 8006da6:	68e5      	ldreq	r5, [r4, #12]
 8006da8:	6833      	ldreq	r3, [r6, #0]
 8006daa:	1aed      	subeq	r5, r5, r3
 8006dac:	68a3      	ldr	r3, [r4, #8]
 8006dae:	bf0c      	ite	eq
 8006db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006db4:	2500      	movne	r5, #0
 8006db6:	4293      	cmp	r3, r2
 8006db8:	bfc4      	itt	gt
 8006dba:	1a9b      	subgt	r3, r3, r2
 8006dbc:	18ed      	addgt	r5, r5, r3
 8006dbe:	2600      	movs	r6, #0
 8006dc0:	341a      	adds	r4, #26
 8006dc2:	42b5      	cmp	r5, r6
 8006dc4:	d11a      	bne.n	8006dfc <_printf_common+0xc8>
 8006dc6:	2000      	movs	r0, #0
 8006dc8:	e008      	b.n	8006ddc <_printf_common+0xa8>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	4652      	mov	r2, sl
 8006dce:	4649      	mov	r1, r9
 8006dd0:	4638      	mov	r0, r7
 8006dd2:	47c0      	blx	r8
 8006dd4:	3001      	adds	r0, #1
 8006dd6:	d103      	bne.n	8006de0 <_printf_common+0xac>
 8006dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de0:	3501      	adds	r5, #1
 8006de2:	e7c6      	b.n	8006d72 <_printf_common+0x3e>
 8006de4:	18e1      	adds	r1, r4, r3
 8006de6:	1c5a      	adds	r2, r3, #1
 8006de8:	2030      	movs	r0, #48	; 0x30
 8006dea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dee:	4422      	add	r2, r4
 8006df0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006df4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006df8:	3302      	adds	r3, #2
 8006dfa:	e7c7      	b.n	8006d8c <_printf_common+0x58>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	4622      	mov	r2, r4
 8006e00:	4649      	mov	r1, r9
 8006e02:	4638      	mov	r0, r7
 8006e04:	47c0      	blx	r8
 8006e06:	3001      	adds	r0, #1
 8006e08:	d0e6      	beq.n	8006dd8 <_printf_common+0xa4>
 8006e0a:	3601      	adds	r6, #1
 8006e0c:	e7d9      	b.n	8006dc2 <_printf_common+0x8e>
	...

08006e10 <_printf_i>:
 8006e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e14:	7e0f      	ldrb	r7, [r1, #24]
 8006e16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e18:	2f78      	cmp	r7, #120	; 0x78
 8006e1a:	4691      	mov	r9, r2
 8006e1c:	4680      	mov	r8, r0
 8006e1e:	460c      	mov	r4, r1
 8006e20:	469a      	mov	sl, r3
 8006e22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e26:	d807      	bhi.n	8006e38 <_printf_i+0x28>
 8006e28:	2f62      	cmp	r7, #98	; 0x62
 8006e2a:	d80a      	bhi.n	8006e42 <_printf_i+0x32>
 8006e2c:	2f00      	cmp	r7, #0
 8006e2e:	f000 80d4 	beq.w	8006fda <_printf_i+0x1ca>
 8006e32:	2f58      	cmp	r7, #88	; 0x58
 8006e34:	f000 80c0 	beq.w	8006fb8 <_printf_i+0x1a8>
 8006e38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e40:	e03a      	b.n	8006eb8 <_printf_i+0xa8>
 8006e42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e46:	2b15      	cmp	r3, #21
 8006e48:	d8f6      	bhi.n	8006e38 <_printf_i+0x28>
 8006e4a:	a101      	add	r1, pc, #4	; (adr r1, 8006e50 <_printf_i+0x40>)
 8006e4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e50:	08006ea9 	.word	0x08006ea9
 8006e54:	08006ebd 	.word	0x08006ebd
 8006e58:	08006e39 	.word	0x08006e39
 8006e5c:	08006e39 	.word	0x08006e39
 8006e60:	08006e39 	.word	0x08006e39
 8006e64:	08006e39 	.word	0x08006e39
 8006e68:	08006ebd 	.word	0x08006ebd
 8006e6c:	08006e39 	.word	0x08006e39
 8006e70:	08006e39 	.word	0x08006e39
 8006e74:	08006e39 	.word	0x08006e39
 8006e78:	08006e39 	.word	0x08006e39
 8006e7c:	08006fc1 	.word	0x08006fc1
 8006e80:	08006ee9 	.word	0x08006ee9
 8006e84:	08006f7b 	.word	0x08006f7b
 8006e88:	08006e39 	.word	0x08006e39
 8006e8c:	08006e39 	.word	0x08006e39
 8006e90:	08006fe3 	.word	0x08006fe3
 8006e94:	08006e39 	.word	0x08006e39
 8006e98:	08006ee9 	.word	0x08006ee9
 8006e9c:	08006e39 	.word	0x08006e39
 8006ea0:	08006e39 	.word	0x08006e39
 8006ea4:	08006f83 	.word	0x08006f83
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	1d1a      	adds	r2, r3, #4
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	602a      	str	r2, [r5, #0]
 8006eb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006eb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e09f      	b.n	8006ffc <_printf_i+0x1ec>
 8006ebc:	6820      	ldr	r0, [r4, #0]
 8006ebe:	682b      	ldr	r3, [r5, #0]
 8006ec0:	0607      	lsls	r7, r0, #24
 8006ec2:	f103 0104 	add.w	r1, r3, #4
 8006ec6:	6029      	str	r1, [r5, #0]
 8006ec8:	d501      	bpl.n	8006ece <_printf_i+0xbe>
 8006eca:	681e      	ldr	r6, [r3, #0]
 8006ecc:	e003      	b.n	8006ed6 <_printf_i+0xc6>
 8006ece:	0646      	lsls	r6, r0, #25
 8006ed0:	d5fb      	bpl.n	8006eca <_printf_i+0xba>
 8006ed2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006ed6:	2e00      	cmp	r6, #0
 8006ed8:	da03      	bge.n	8006ee2 <_printf_i+0xd2>
 8006eda:	232d      	movs	r3, #45	; 0x2d
 8006edc:	4276      	negs	r6, r6
 8006ede:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ee2:	485a      	ldr	r0, [pc, #360]	; (800704c <_printf_i+0x23c>)
 8006ee4:	230a      	movs	r3, #10
 8006ee6:	e012      	b.n	8006f0e <_printf_i+0xfe>
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	6820      	ldr	r0, [r4, #0]
 8006eec:	1d19      	adds	r1, r3, #4
 8006eee:	6029      	str	r1, [r5, #0]
 8006ef0:	0605      	lsls	r5, r0, #24
 8006ef2:	d501      	bpl.n	8006ef8 <_printf_i+0xe8>
 8006ef4:	681e      	ldr	r6, [r3, #0]
 8006ef6:	e002      	b.n	8006efe <_printf_i+0xee>
 8006ef8:	0641      	lsls	r1, r0, #25
 8006efa:	d5fb      	bpl.n	8006ef4 <_printf_i+0xe4>
 8006efc:	881e      	ldrh	r6, [r3, #0]
 8006efe:	4853      	ldr	r0, [pc, #332]	; (800704c <_printf_i+0x23c>)
 8006f00:	2f6f      	cmp	r7, #111	; 0x6f
 8006f02:	bf0c      	ite	eq
 8006f04:	2308      	moveq	r3, #8
 8006f06:	230a      	movne	r3, #10
 8006f08:	2100      	movs	r1, #0
 8006f0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f0e:	6865      	ldr	r5, [r4, #4]
 8006f10:	60a5      	str	r5, [r4, #8]
 8006f12:	2d00      	cmp	r5, #0
 8006f14:	bfa2      	ittt	ge
 8006f16:	6821      	ldrge	r1, [r4, #0]
 8006f18:	f021 0104 	bicge.w	r1, r1, #4
 8006f1c:	6021      	strge	r1, [r4, #0]
 8006f1e:	b90e      	cbnz	r6, 8006f24 <_printf_i+0x114>
 8006f20:	2d00      	cmp	r5, #0
 8006f22:	d04b      	beq.n	8006fbc <_printf_i+0x1ac>
 8006f24:	4615      	mov	r5, r2
 8006f26:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f2a:	fb03 6711 	mls	r7, r3, r1, r6
 8006f2e:	5dc7      	ldrb	r7, [r0, r7]
 8006f30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f34:	4637      	mov	r7, r6
 8006f36:	42bb      	cmp	r3, r7
 8006f38:	460e      	mov	r6, r1
 8006f3a:	d9f4      	bls.n	8006f26 <_printf_i+0x116>
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d10b      	bne.n	8006f58 <_printf_i+0x148>
 8006f40:	6823      	ldr	r3, [r4, #0]
 8006f42:	07de      	lsls	r6, r3, #31
 8006f44:	d508      	bpl.n	8006f58 <_printf_i+0x148>
 8006f46:	6923      	ldr	r3, [r4, #16]
 8006f48:	6861      	ldr	r1, [r4, #4]
 8006f4a:	4299      	cmp	r1, r3
 8006f4c:	bfde      	ittt	le
 8006f4e:	2330      	movle	r3, #48	; 0x30
 8006f50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f58:	1b52      	subs	r2, r2, r5
 8006f5a:	6122      	str	r2, [r4, #16]
 8006f5c:	f8cd a000 	str.w	sl, [sp]
 8006f60:	464b      	mov	r3, r9
 8006f62:	aa03      	add	r2, sp, #12
 8006f64:	4621      	mov	r1, r4
 8006f66:	4640      	mov	r0, r8
 8006f68:	f7ff fee4 	bl	8006d34 <_printf_common>
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	d14a      	bne.n	8007006 <_printf_i+0x1f6>
 8006f70:	f04f 30ff 	mov.w	r0, #4294967295
 8006f74:	b004      	add	sp, #16
 8006f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	f043 0320 	orr.w	r3, r3, #32
 8006f80:	6023      	str	r3, [r4, #0]
 8006f82:	4833      	ldr	r0, [pc, #204]	; (8007050 <_printf_i+0x240>)
 8006f84:	2778      	movs	r7, #120	; 0x78
 8006f86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	6829      	ldr	r1, [r5, #0]
 8006f8e:	061f      	lsls	r7, r3, #24
 8006f90:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f94:	d402      	bmi.n	8006f9c <_printf_i+0x18c>
 8006f96:	065f      	lsls	r7, r3, #25
 8006f98:	bf48      	it	mi
 8006f9a:	b2b6      	uxthmi	r6, r6
 8006f9c:	07df      	lsls	r7, r3, #31
 8006f9e:	bf48      	it	mi
 8006fa0:	f043 0320 	orrmi.w	r3, r3, #32
 8006fa4:	6029      	str	r1, [r5, #0]
 8006fa6:	bf48      	it	mi
 8006fa8:	6023      	strmi	r3, [r4, #0]
 8006faa:	b91e      	cbnz	r6, 8006fb4 <_printf_i+0x1a4>
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	f023 0320 	bic.w	r3, r3, #32
 8006fb2:	6023      	str	r3, [r4, #0]
 8006fb4:	2310      	movs	r3, #16
 8006fb6:	e7a7      	b.n	8006f08 <_printf_i+0xf8>
 8006fb8:	4824      	ldr	r0, [pc, #144]	; (800704c <_printf_i+0x23c>)
 8006fba:	e7e4      	b.n	8006f86 <_printf_i+0x176>
 8006fbc:	4615      	mov	r5, r2
 8006fbe:	e7bd      	b.n	8006f3c <_printf_i+0x12c>
 8006fc0:	682b      	ldr	r3, [r5, #0]
 8006fc2:	6826      	ldr	r6, [r4, #0]
 8006fc4:	6961      	ldr	r1, [r4, #20]
 8006fc6:	1d18      	adds	r0, r3, #4
 8006fc8:	6028      	str	r0, [r5, #0]
 8006fca:	0635      	lsls	r5, r6, #24
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	d501      	bpl.n	8006fd4 <_printf_i+0x1c4>
 8006fd0:	6019      	str	r1, [r3, #0]
 8006fd2:	e002      	b.n	8006fda <_printf_i+0x1ca>
 8006fd4:	0670      	lsls	r0, r6, #25
 8006fd6:	d5fb      	bpl.n	8006fd0 <_printf_i+0x1c0>
 8006fd8:	8019      	strh	r1, [r3, #0]
 8006fda:	2300      	movs	r3, #0
 8006fdc:	6123      	str	r3, [r4, #16]
 8006fde:	4615      	mov	r5, r2
 8006fe0:	e7bc      	b.n	8006f5c <_printf_i+0x14c>
 8006fe2:	682b      	ldr	r3, [r5, #0]
 8006fe4:	1d1a      	adds	r2, r3, #4
 8006fe6:	602a      	str	r2, [r5, #0]
 8006fe8:	681d      	ldr	r5, [r3, #0]
 8006fea:	6862      	ldr	r2, [r4, #4]
 8006fec:	2100      	movs	r1, #0
 8006fee:	4628      	mov	r0, r5
 8006ff0:	f7f9 f90e 	bl	8000210 <memchr>
 8006ff4:	b108      	cbz	r0, 8006ffa <_printf_i+0x1ea>
 8006ff6:	1b40      	subs	r0, r0, r5
 8006ff8:	6060      	str	r0, [r4, #4]
 8006ffa:	6863      	ldr	r3, [r4, #4]
 8006ffc:	6123      	str	r3, [r4, #16]
 8006ffe:	2300      	movs	r3, #0
 8007000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007004:	e7aa      	b.n	8006f5c <_printf_i+0x14c>
 8007006:	6923      	ldr	r3, [r4, #16]
 8007008:	462a      	mov	r2, r5
 800700a:	4649      	mov	r1, r9
 800700c:	4640      	mov	r0, r8
 800700e:	47d0      	blx	sl
 8007010:	3001      	adds	r0, #1
 8007012:	d0ad      	beq.n	8006f70 <_printf_i+0x160>
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	079b      	lsls	r3, r3, #30
 8007018:	d413      	bmi.n	8007042 <_printf_i+0x232>
 800701a:	68e0      	ldr	r0, [r4, #12]
 800701c:	9b03      	ldr	r3, [sp, #12]
 800701e:	4298      	cmp	r0, r3
 8007020:	bfb8      	it	lt
 8007022:	4618      	movlt	r0, r3
 8007024:	e7a6      	b.n	8006f74 <_printf_i+0x164>
 8007026:	2301      	movs	r3, #1
 8007028:	4632      	mov	r2, r6
 800702a:	4649      	mov	r1, r9
 800702c:	4640      	mov	r0, r8
 800702e:	47d0      	blx	sl
 8007030:	3001      	adds	r0, #1
 8007032:	d09d      	beq.n	8006f70 <_printf_i+0x160>
 8007034:	3501      	adds	r5, #1
 8007036:	68e3      	ldr	r3, [r4, #12]
 8007038:	9903      	ldr	r1, [sp, #12]
 800703a:	1a5b      	subs	r3, r3, r1
 800703c:	42ab      	cmp	r3, r5
 800703e:	dcf2      	bgt.n	8007026 <_printf_i+0x216>
 8007040:	e7eb      	b.n	800701a <_printf_i+0x20a>
 8007042:	2500      	movs	r5, #0
 8007044:	f104 0619 	add.w	r6, r4, #25
 8007048:	e7f5      	b.n	8007036 <_printf_i+0x226>
 800704a:	bf00      	nop
 800704c:	08008165 	.word	0x08008165
 8007050:	08008176 	.word	0x08008176

08007054 <__sflush_r>:
 8007054:	898a      	ldrh	r2, [r1, #12]
 8007056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800705a:	4605      	mov	r5, r0
 800705c:	0710      	lsls	r0, r2, #28
 800705e:	460c      	mov	r4, r1
 8007060:	d458      	bmi.n	8007114 <__sflush_r+0xc0>
 8007062:	684b      	ldr	r3, [r1, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	dc05      	bgt.n	8007074 <__sflush_r+0x20>
 8007068:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800706a:	2b00      	cmp	r3, #0
 800706c:	dc02      	bgt.n	8007074 <__sflush_r+0x20>
 800706e:	2000      	movs	r0, #0
 8007070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007074:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007076:	2e00      	cmp	r6, #0
 8007078:	d0f9      	beq.n	800706e <__sflush_r+0x1a>
 800707a:	2300      	movs	r3, #0
 800707c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007080:	682f      	ldr	r7, [r5, #0]
 8007082:	6a21      	ldr	r1, [r4, #32]
 8007084:	602b      	str	r3, [r5, #0]
 8007086:	d032      	beq.n	80070ee <__sflush_r+0x9a>
 8007088:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800708a:	89a3      	ldrh	r3, [r4, #12]
 800708c:	075a      	lsls	r2, r3, #29
 800708e:	d505      	bpl.n	800709c <__sflush_r+0x48>
 8007090:	6863      	ldr	r3, [r4, #4]
 8007092:	1ac0      	subs	r0, r0, r3
 8007094:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007096:	b10b      	cbz	r3, 800709c <__sflush_r+0x48>
 8007098:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800709a:	1ac0      	subs	r0, r0, r3
 800709c:	2300      	movs	r3, #0
 800709e:	4602      	mov	r2, r0
 80070a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070a2:	6a21      	ldr	r1, [r4, #32]
 80070a4:	4628      	mov	r0, r5
 80070a6:	47b0      	blx	r6
 80070a8:	1c43      	adds	r3, r0, #1
 80070aa:	89a3      	ldrh	r3, [r4, #12]
 80070ac:	d106      	bne.n	80070bc <__sflush_r+0x68>
 80070ae:	6829      	ldr	r1, [r5, #0]
 80070b0:	291d      	cmp	r1, #29
 80070b2:	d82b      	bhi.n	800710c <__sflush_r+0xb8>
 80070b4:	4a29      	ldr	r2, [pc, #164]	; (800715c <__sflush_r+0x108>)
 80070b6:	410a      	asrs	r2, r1
 80070b8:	07d6      	lsls	r6, r2, #31
 80070ba:	d427      	bmi.n	800710c <__sflush_r+0xb8>
 80070bc:	2200      	movs	r2, #0
 80070be:	6062      	str	r2, [r4, #4]
 80070c0:	04d9      	lsls	r1, r3, #19
 80070c2:	6922      	ldr	r2, [r4, #16]
 80070c4:	6022      	str	r2, [r4, #0]
 80070c6:	d504      	bpl.n	80070d2 <__sflush_r+0x7e>
 80070c8:	1c42      	adds	r2, r0, #1
 80070ca:	d101      	bne.n	80070d0 <__sflush_r+0x7c>
 80070cc:	682b      	ldr	r3, [r5, #0]
 80070ce:	b903      	cbnz	r3, 80070d2 <__sflush_r+0x7e>
 80070d0:	6560      	str	r0, [r4, #84]	; 0x54
 80070d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070d4:	602f      	str	r7, [r5, #0]
 80070d6:	2900      	cmp	r1, #0
 80070d8:	d0c9      	beq.n	800706e <__sflush_r+0x1a>
 80070da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070de:	4299      	cmp	r1, r3
 80070e0:	d002      	beq.n	80070e8 <__sflush_r+0x94>
 80070e2:	4628      	mov	r0, r5
 80070e4:	f7ff fbea 	bl	80068bc <_free_r>
 80070e8:	2000      	movs	r0, #0
 80070ea:	6360      	str	r0, [r4, #52]	; 0x34
 80070ec:	e7c0      	b.n	8007070 <__sflush_r+0x1c>
 80070ee:	2301      	movs	r3, #1
 80070f0:	4628      	mov	r0, r5
 80070f2:	47b0      	blx	r6
 80070f4:	1c41      	adds	r1, r0, #1
 80070f6:	d1c8      	bne.n	800708a <__sflush_r+0x36>
 80070f8:	682b      	ldr	r3, [r5, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d0c5      	beq.n	800708a <__sflush_r+0x36>
 80070fe:	2b1d      	cmp	r3, #29
 8007100:	d001      	beq.n	8007106 <__sflush_r+0xb2>
 8007102:	2b16      	cmp	r3, #22
 8007104:	d101      	bne.n	800710a <__sflush_r+0xb6>
 8007106:	602f      	str	r7, [r5, #0]
 8007108:	e7b1      	b.n	800706e <__sflush_r+0x1a>
 800710a:	89a3      	ldrh	r3, [r4, #12]
 800710c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007110:	81a3      	strh	r3, [r4, #12]
 8007112:	e7ad      	b.n	8007070 <__sflush_r+0x1c>
 8007114:	690f      	ldr	r7, [r1, #16]
 8007116:	2f00      	cmp	r7, #0
 8007118:	d0a9      	beq.n	800706e <__sflush_r+0x1a>
 800711a:	0793      	lsls	r3, r2, #30
 800711c:	680e      	ldr	r6, [r1, #0]
 800711e:	bf08      	it	eq
 8007120:	694b      	ldreq	r3, [r1, #20]
 8007122:	600f      	str	r7, [r1, #0]
 8007124:	bf18      	it	ne
 8007126:	2300      	movne	r3, #0
 8007128:	eba6 0807 	sub.w	r8, r6, r7
 800712c:	608b      	str	r3, [r1, #8]
 800712e:	f1b8 0f00 	cmp.w	r8, #0
 8007132:	dd9c      	ble.n	800706e <__sflush_r+0x1a>
 8007134:	6a21      	ldr	r1, [r4, #32]
 8007136:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007138:	4643      	mov	r3, r8
 800713a:	463a      	mov	r2, r7
 800713c:	4628      	mov	r0, r5
 800713e:	47b0      	blx	r6
 8007140:	2800      	cmp	r0, #0
 8007142:	dc06      	bgt.n	8007152 <__sflush_r+0xfe>
 8007144:	89a3      	ldrh	r3, [r4, #12]
 8007146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800714a:	81a3      	strh	r3, [r4, #12]
 800714c:	f04f 30ff 	mov.w	r0, #4294967295
 8007150:	e78e      	b.n	8007070 <__sflush_r+0x1c>
 8007152:	4407      	add	r7, r0
 8007154:	eba8 0800 	sub.w	r8, r8, r0
 8007158:	e7e9      	b.n	800712e <__sflush_r+0xda>
 800715a:	bf00      	nop
 800715c:	dfbffffe 	.word	0xdfbffffe

08007160 <_fflush_r>:
 8007160:	b538      	push	{r3, r4, r5, lr}
 8007162:	690b      	ldr	r3, [r1, #16]
 8007164:	4605      	mov	r5, r0
 8007166:	460c      	mov	r4, r1
 8007168:	b913      	cbnz	r3, 8007170 <_fflush_r+0x10>
 800716a:	2500      	movs	r5, #0
 800716c:	4628      	mov	r0, r5
 800716e:	bd38      	pop	{r3, r4, r5, pc}
 8007170:	b118      	cbz	r0, 800717a <_fflush_r+0x1a>
 8007172:	6a03      	ldr	r3, [r0, #32]
 8007174:	b90b      	cbnz	r3, 800717a <_fflush_r+0x1a>
 8007176:	f7ff f975 	bl	8006464 <__sinit>
 800717a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d0f3      	beq.n	800716a <_fflush_r+0xa>
 8007182:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007184:	07d0      	lsls	r0, r2, #31
 8007186:	d404      	bmi.n	8007192 <_fflush_r+0x32>
 8007188:	0599      	lsls	r1, r3, #22
 800718a:	d402      	bmi.n	8007192 <_fflush_r+0x32>
 800718c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800718e:	f7ff fb84 	bl	800689a <__retarget_lock_acquire_recursive>
 8007192:	4628      	mov	r0, r5
 8007194:	4621      	mov	r1, r4
 8007196:	f7ff ff5d 	bl	8007054 <__sflush_r>
 800719a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800719c:	07da      	lsls	r2, r3, #31
 800719e:	4605      	mov	r5, r0
 80071a0:	d4e4      	bmi.n	800716c <_fflush_r+0xc>
 80071a2:	89a3      	ldrh	r3, [r4, #12]
 80071a4:	059b      	lsls	r3, r3, #22
 80071a6:	d4e1      	bmi.n	800716c <_fflush_r+0xc>
 80071a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071aa:	f7ff fb77 	bl	800689c <__retarget_lock_release_recursive>
 80071ae:	e7dd      	b.n	800716c <_fflush_r+0xc>

080071b0 <__swhatbuf_r>:
 80071b0:	b570      	push	{r4, r5, r6, lr}
 80071b2:	460c      	mov	r4, r1
 80071b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071b8:	2900      	cmp	r1, #0
 80071ba:	b096      	sub	sp, #88	; 0x58
 80071bc:	4615      	mov	r5, r2
 80071be:	461e      	mov	r6, r3
 80071c0:	da0d      	bge.n	80071de <__swhatbuf_r+0x2e>
 80071c2:	89a3      	ldrh	r3, [r4, #12]
 80071c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80071c8:	f04f 0100 	mov.w	r1, #0
 80071cc:	bf0c      	ite	eq
 80071ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80071d2:	2340      	movne	r3, #64	; 0x40
 80071d4:	2000      	movs	r0, #0
 80071d6:	6031      	str	r1, [r6, #0]
 80071d8:	602b      	str	r3, [r5, #0]
 80071da:	b016      	add	sp, #88	; 0x58
 80071dc:	bd70      	pop	{r4, r5, r6, pc}
 80071de:	466a      	mov	r2, sp
 80071e0:	f000 f848 	bl	8007274 <_fstat_r>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	dbec      	blt.n	80071c2 <__swhatbuf_r+0x12>
 80071e8:	9901      	ldr	r1, [sp, #4]
 80071ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80071ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80071f2:	4259      	negs	r1, r3
 80071f4:	4159      	adcs	r1, r3
 80071f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071fa:	e7eb      	b.n	80071d4 <__swhatbuf_r+0x24>

080071fc <__smakebuf_r>:
 80071fc:	898b      	ldrh	r3, [r1, #12]
 80071fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007200:	079d      	lsls	r5, r3, #30
 8007202:	4606      	mov	r6, r0
 8007204:	460c      	mov	r4, r1
 8007206:	d507      	bpl.n	8007218 <__smakebuf_r+0x1c>
 8007208:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800720c:	6023      	str	r3, [r4, #0]
 800720e:	6123      	str	r3, [r4, #16]
 8007210:	2301      	movs	r3, #1
 8007212:	6163      	str	r3, [r4, #20]
 8007214:	b002      	add	sp, #8
 8007216:	bd70      	pop	{r4, r5, r6, pc}
 8007218:	ab01      	add	r3, sp, #4
 800721a:	466a      	mov	r2, sp
 800721c:	f7ff ffc8 	bl	80071b0 <__swhatbuf_r>
 8007220:	9900      	ldr	r1, [sp, #0]
 8007222:	4605      	mov	r5, r0
 8007224:	4630      	mov	r0, r6
 8007226:	f7ff fbb5 	bl	8006994 <_malloc_r>
 800722a:	b948      	cbnz	r0, 8007240 <__smakebuf_r+0x44>
 800722c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007230:	059a      	lsls	r2, r3, #22
 8007232:	d4ef      	bmi.n	8007214 <__smakebuf_r+0x18>
 8007234:	f023 0303 	bic.w	r3, r3, #3
 8007238:	f043 0302 	orr.w	r3, r3, #2
 800723c:	81a3      	strh	r3, [r4, #12]
 800723e:	e7e3      	b.n	8007208 <__smakebuf_r+0xc>
 8007240:	89a3      	ldrh	r3, [r4, #12]
 8007242:	6020      	str	r0, [r4, #0]
 8007244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007248:	81a3      	strh	r3, [r4, #12]
 800724a:	9b00      	ldr	r3, [sp, #0]
 800724c:	6163      	str	r3, [r4, #20]
 800724e:	9b01      	ldr	r3, [sp, #4]
 8007250:	6120      	str	r0, [r4, #16]
 8007252:	b15b      	cbz	r3, 800726c <__smakebuf_r+0x70>
 8007254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007258:	4630      	mov	r0, r6
 800725a:	f000 f81d 	bl	8007298 <_isatty_r>
 800725e:	b128      	cbz	r0, 800726c <__smakebuf_r+0x70>
 8007260:	89a3      	ldrh	r3, [r4, #12]
 8007262:	f023 0303 	bic.w	r3, r3, #3
 8007266:	f043 0301 	orr.w	r3, r3, #1
 800726a:	81a3      	strh	r3, [r4, #12]
 800726c:	89a3      	ldrh	r3, [r4, #12]
 800726e:	431d      	orrs	r5, r3
 8007270:	81a5      	strh	r5, [r4, #12]
 8007272:	e7cf      	b.n	8007214 <__smakebuf_r+0x18>

08007274 <_fstat_r>:
 8007274:	b538      	push	{r3, r4, r5, lr}
 8007276:	4d07      	ldr	r5, [pc, #28]	; (8007294 <_fstat_r+0x20>)
 8007278:	2300      	movs	r3, #0
 800727a:	4604      	mov	r4, r0
 800727c:	4608      	mov	r0, r1
 800727e:	4611      	mov	r1, r2
 8007280:	602b      	str	r3, [r5, #0]
 8007282:	f7fa fb04 	bl	800188e <_fstat>
 8007286:	1c43      	adds	r3, r0, #1
 8007288:	d102      	bne.n	8007290 <_fstat_r+0x1c>
 800728a:	682b      	ldr	r3, [r5, #0]
 800728c:	b103      	cbz	r3, 8007290 <_fstat_r+0x1c>
 800728e:	6023      	str	r3, [r4, #0]
 8007290:	bd38      	pop	{r3, r4, r5, pc}
 8007292:	bf00      	nop
 8007294:	20004694 	.word	0x20004694

08007298 <_isatty_r>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	4d06      	ldr	r5, [pc, #24]	; (80072b4 <_isatty_r+0x1c>)
 800729c:	2300      	movs	r3, #0
 800729e:	4604      	mov	r4, r0
 80072a0:	4608      	mov	r0, r1
 80072a2:	602b      	str	r3, [r5, #0]
 80072a4:	f7fa fb03 	bl	80018ae <_isatty>
 80072a8:	1c43      	adds	r3, r0, #1
 80072aa:	d102      	bne.n	80072b2 <_isatty_r+0x1a>
 80072ac:	682b      	ldr	r3, [r5, #0]
 80072ae:	b103      	cbz	r3, 80072b2 <_isatty_r+0x1a>
 80072b0:	6023      	str	r3, [r4, #0]
 80072b2:	bd38      	pop	{r3, r4, r5, pc}
 80072b4:	20004694 	.word	0x20004694

080072b8 <_sbrk_r>:
 80072b8:	b538      	push	{r3, r4, r5, lr}
 80072ba:	4d06      	ldr	r5, [pc, #24]	; (80072d4 <_sbrk_r+0x1c>)
 80072bc:	2300      	movs	r3, #0
 80072be:	4604      	mov	r4, r0
 80072c0:	4608      	mov	r0, r1
 80072c2:	602b      	str	r3, [r5, #0]
 80072c4:	f7fa fb0c 	bl	80018e0 <_sbrk>
 80072c8:	1c43      	adds	r3, r0, #1
 80072ca:	d102      	bne.n	80072d2 <_sbrk_r+0x1a>
 80072cc:	682b      	ldr	r3, [r5, #0]
 80072ce:	b103      	cbz	r3, 80072d2 <_sbrk_r+0x1a>
 80072d0:	6023      	str	r3, [r4, #0]
 80072d2:	bd38      	pop	{r3, r4, r5, pc}
 80072d4:	20004694 	.word	0x20004694

080072d8 <_init>:
 80072d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072da:	bf00      	nop
 80072dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072de:	bc08      	pop	{r3}
 80072e0:	469e      	mov	lr, r3
 80072e2:	4770      	bx	lr

080072e4 <_fini>:
 80072e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e6:	bf00      	nop
 80072e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ea:	bc08      	pop	{r3}
 80072ec:	469e      	mov	lr, r3
 80072ee:	4770      	bx	lr
